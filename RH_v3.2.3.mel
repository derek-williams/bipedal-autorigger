/* 
--------------
RigHelper v3.2.3
--------------
watch the video d00d

copyright ndupree 2014
www.ndupree.com
*/

global proc runOnStart ()
{
    for ($i=1; `objExists ("jnt_spine"+$i)` == 1; $i++)
        intSliderGrp -e -v $i sjIS;
    for ($i=1; `objExists ("L_jnt_Afinger"+$i)` == 1; $i++)
        intSliderGrp -e -v $i fiIS;
    if (`objExists L_ctr_armIK1.stretch`)
        checkBox -e -v 1 stCB;
    if (`objExists jnt_jaw1`)
        checkBox -e -v 1 frCB;
} // end runOnStart ()

// moves and orients object to location - simple method
global proc snapObj (string $child, string $parent, int $ori)
{
    delete `pointConstraint $parent $child`;
    if ($ori == 1){
        delete `orientConstraint $parent $child`;
    }
} // end snapObj ()

// moves and orients object to location - xform method
global proc snapObjXform (string $child, string $parent, int $ori)
{
    // for xform
    float $t[3];
    float $r[3];
    
    $t = `xform -q -ws -t $parent`;
    xform -ws -t $t[0] $t[1] $t[2] $child;
    
    if ($ori == 1){
        $r = `xform -q -ws -ro $parent`;
        xform -ws -ro $r[0] $r[1] $r[2] $child;
    }
} // end snapObjXform ()

global proc jointLabels ()
{
    string $pre = `textField -q -tx preTF`;
    setAttr ($pre+"LeftUpperArmTwist1.side") 1;
    setAttr ($pre+"LeftUpperArmTwist1.type") 18;
    setAttr -type "string" ($pre+"LeftUpperArmTwist1.otherType") LeftUpperArmTwist1;
    setAttr ($pre+"LeftUpperArmTwist2.side") 1;
    setAttr ($pre+"LeftUpperArmTwist2.type") 18;
    setAttr -type "string" ($pre+"LeftUpperArmTwist2.otherType ")LeftUpperArmTwist2;
    setAttr ($pre+"LeftUpperArmTwist3.side") 1;
    setAttr ($pre+"LeftUpperArmTwist3.type") 18;
    setAttr -type "string" ($pre+"LeftUpperArmTwist3.otherType") LeftUpperArmTwist3;
    setAttr ($pre+"LeftElbow1.side") 1;
    setAttr ($pre+"LeftElbow1.type") 18;
    setAttr ($pre+"LeftBicep1.side") 1;
    setAttr ($pre+"LeftBicep1.type") 18;
    setAttr -type "string" ($pre+"LeftBicep1.otherType") bicep1;
    setAttr ($pre+"LeftBicep2.side") 1;
    setAttr ($pre+"LeftBicep2.type") 18;
    setAttr -type "string" ($pre+"LeftBicep2.otherType") bicep2;
    setAttr ($pre+"LeftBicep3.side") 1;
    setAttr ($pre+"LeftBicep3.type") 18;
    setAttr -type "string" ($pre+"LeftBicep3.otherType") bicep3;
    
    if (`checkBox -q -v frCB`){
        setAttr ($pre+"LeftUpperEyelid.side") 1;
        setAttr ($pre+"LeftUpperEyelid.type") 18;
        setAttr -type "string" ($pre+"LeftUpperEyelid.otherType") uppEyelid;
        setAttr ($pre+"LeftLowerEyelid.side") 1;
        setAttr ($pre+"LeftLowerEyelid.type") 18;
        setAttr -type "string" ($pre+"LeftLowerEyelid.otherType") lowEyelid;
        
        setAttr ($pre+"RightUpperEyelid.side") 2;
        setAttr ($pre+"RightUpperEyelid.type") 18;
        setAttr -type "string" ($pre+"RightUpperEyelid.otherType") uppEyelid;
        setAttr ($pre+"RightLowerEyelid.side") 2;
        setAttr ($pre+"RightLowerEyelid.type") 18;
        setAttr -type "string" ($pre+"RightLowerEyelid.otherType") lowEyelid;
        }
    
    setAttr ($pre+"RightUpperArmTwist1.side") 2;
    setAttr ($pre+"RightUpperArmTwist1.type") 18;
    setAttr -type "string" ($pre+"RightUpperArmTwist1.otherType") RightUpperArmTwist1;
    setAttr ($pre+"RightUpperArmTwist2.side") 2;
    setAttr ($pre+"RightUpperArmTwist2.type") 18;
    setAttr -type "string" ($pre+"RightUpperArmTwist2.otherType") RightUpperArmTwist2;
    setAttr ($pre+"RightUpperArmTwist3.side") 2;
    setAttr ($pre+"RightUpperArmTwist3.type") 18;
    setAttr -type "string" ($pre+"RightUpperArmTwist3.otherType") RightUpperArmTwist3;
    setAttr ($pre+"RightElbow1.side") 2;
    setAttr ($pre+"RightElbow1.type") 18;
    setAttr ($pre+"RightBicep1.side") 2;
    setAttr ($pre+"RightBicep1.type") 18;
    setAttr -type "string" ($pre+"RightBicep1.otherType") bicep1;
    setAttr ($pre+"RightBicep2.side") 2;
    setAttr ($pre+"RightBicep2.type") 18;
    setAttr -type "string" ($pre+"RightBicep2.otherType") bicep2;
    setAttr ($pre+"RightBicep3.side") 2;
    setAttr ($pre+"RightBicep3.type") 18;
    setAttr -type "string" ($pre+"RightBicep3.otherType") bicep3;
} // end jointLabels ()

// make joints for user to place
global proc makeJoints ()
{
    // lock button
    button -e-en 0 spB;
    intSliderGrp -e-en 0 sjIS;
    intSliderGrp -e-en 0 fiIS; 
    checkBox -e-en 0 stCB;
    checkBox -e-en 0 frCB;
    
    // get user input
    int $spineJnts = `intSliderGrp -q -v sjIS`;
    int $fingers   = `intSliderGrp -q -v fiIS`;
    
    // global move
    circle -n ctr_skelMover1 -ch 0;
    xform -ws -ro 90 0 0 -s 30 30 30 ctr_skelMover1;
    makeIdentity -a 1 -r 1 -s 1 ctr_skelMover1;
    
    // root
    joint -n enj_root1 -p 0 82 0 -rad 4;
    if (size(`listRelatives -p enj_root1`) > 0) parent -w;
    
    // leg chain
    joint -n L_jnt_hip1 -p 8 80 0 -rad 2; parent -w;
    joint -n L_jnt_knee1 -p 8 45 0 -rad 4;
    joint -n L_jnt_ankle1 -p 8 10 0 -rad 4;
    joint -n L_jnt_ball1 -p 8 0 10 -rad 2;
    joint -n L_enj_toe1 -p 8 0 18 -rad 2;
    
    // reverse foot locators
    spaceLocator -n L_loc_leftBank1; parent L_loc_leftBank1 L_jnt_ball1;
    xform -ws -t 12 0 10 L_loc_leftBank1;
    spaceLocator -n L_loc_rightBank1; parent L_loc_rightBank1 L_jnt_ball1;
    xform -ws -t 4 0 10 L_loc_rightBank1;
    spaceLocator -n L_loc_heel1; parent L_loc_heel1 L_jnt_ball1;
    xform -ws -t 8 0 -2 L_loc_heel1;
    
    // spine
    float $spineOff = 50. / ($spineJnts*1.0); // gotta cast it
    for ($i=1; $i<$spineJnts+1; $i++){
        joint -n ("jnt_spine"+$i) -p 0 (82+$i*$spineOff) 0 -rad 4; parent -w;
    }
    
    // arm chain
    joint -n L_jnt_clavicle1 -p 4 134 0 -rad 3; parent -w;
    joint -n L_drj_shoulder1 -p 18 134 0 -rad 2;
    joint -n L_jnt_elbow1 -p 38 134 0 -rad 2;
    joint -n L_drj_wrist1 -p 60 134 0 -rad 2;
    
    // fingers
    float $fingerOff = 8. / ($fingers*1.0); // gotta cast it
    for ($i=1; $i<$fingers+1; $i++){
        joint -n ("L_jnt_Afinger"+$i) -p 68 134 (5-$i*$fingerOff) -rad .5; parent -w;
        joint -n ("L_jnt_Bfinger"+$i) -p 72 134 (5-$i*$fingerOff) -rad .5;
        joint -n ("L_jnt_Cfinger"+$i) -p 76 134 (5-$i*$fingerOff) -rad .5;
        joint -n ("L_enj_finger"+$i) -p 80 134 (5-$i*$fingerOff) -rad .5;
    }
    
    // neck chain
    joint -n drj_neck1 -p 0 140 0 -rad 2; parent -w;
    joint -n jnt_neck2 -p 0 146 0 -rad 2;
    
    // parent all to jointMover1
    for ($i=1; $i<$spineJnts+1; $i++)
        parent ("jnt_spine"+$i) ctr_skelMover1;
    for ($i=1; $i<$fingers+1; $i++)
        parent ("L_jnt_Afinger"+$i) ctr_skelMover1;
    parent L_jnt_hip1 ctr_skelMover1;
    parent L_jnt_clavicle1 ctr_skelMover1;
    parent drj_neck1 ctr_skelMover1;
    parent enj_root1 ctr_skelMover1;
    
    // check if user wants facial rig
    if (`checkBox -q -v frCB`){
        circle -n ctr_faceMover1 -ch 0;
        xform -ws -t 0 160 40 -s 15 15 15 ctr_faceMover1;
        makeIdentity -a 1 -t 1 -s 1 ctr_faceMover1;
        parent ctr_faceMover1 ctr_skelMover1;
        joint -n L_jnt_brow1 -p 1 165 40 -rad .5 ctr_faceMover1;
        joint -n L_jnt_brow2 -p 3 165 40 -rad .5 ctr_faceMover1;
        joint -n L_jnt_brow3 -p 5 165 40 -rad .5 ctr_faceMover1;
        joint -n L_jnt_nostril1 -p 1 160 40 -rad .5 ctr_faceMover1;
        joint -n L_jnt_cheekBone1 -p 4 162 40 -rad .5 ctr_faceMover1;
        joint -n L_jnt_cheek1 -p 8 158 40 -rad .5 ctr_faceMover1;
        joint -n L_jnt_uppMouth1 -p 2 156 40 -rad .5 ctr_faceMover1;
        joint -n L_jnt_cornerMouth1 -p 5 155 40 -rad .5 ctr_faceMover1;
        joint -n L_jnt_lowMouth1 -p 2 154 40 -rad .5 ctr_faceMover1;
        joint -n jnt_jaw1 -p 0 150 3 -rad 1 ctr_skelMover1;
        joint -n jnt_toung1 -p 0 148 5 -rad 1;
        joint -n jnt_toung2 -p 0 148 8 -rad 1 jnt_toung1;
        joint -n L_jnt_eyelid1 -p 6 160 8 -rad 1 jnt_neck2;
    }
} // end makeJoints ()

// make the rest of the skeleton
global proc makeSkel ()
{
    // get user input
    int $spineJnts = `intSliderGrp -q -v sjIS`;
    int $fingers   = `intSliderGrp -q -v fiIS`;
    
    // freeze transforms on face mover
    if (`checkBox -q -v frCB`)
        makeIdentity -a 1 -s 1 ctr_faceMover1;
        
    // freeze transforms on joints
    makeIdentity -a 1 -r 1 -s 1 L_jnt_hip1;
    makeIdentity -a 1 -r 1 -s 1 L_jnt_clavicle1;
    makeIdentity -a 1 -r 1 -s 1 drj_neck1;
    for ($i=1; $i<$fingers+1; $i++)
        makeIdentity -a 1 -r 1 -s 1 ("L_jnt_Afinger"+$i);
    
    // spine chain
    delete `aimConstraint jnt_spine1 enj_root1`;
    makeIdentity -a 1 -r 1 enj_root1;
    parent jnt_spine1 enj_root1;
    for ($i=1; $i<$spineJnts; $i++)
        parent ("jnt_spine"+($i+1)) ("jnt_spine"+$i);
    joint -e -oj xyz -sao yup -ch -zso enj_root1;
    setAttr ("jnt_spine"+$spineJnts+".jointOrient") 0 0 0;
    joint -n jnt_hips1 -p -1 0 0 -r enj_root1;
    
    // leg chain
    joint -e -oj xzy -sao zup -ch -zso L_jnt_hip1;
    joint -e -oj xzy -sao yup -ch -zso L_jnt_ball1;
    setAttr L_enj_toe1.jointOrient 0 0 0;
    joint -n L_jnt_knee2 -p 4 0 0 -r -rad 4 L_jnt_knee1;
    
    // reverse foot joints
    joint -n L_drv_ballRot1 -rad .5; parent -w;
    snapObj ("L_drv_ballRot1", "L_jnt_ball1", 1);
    
    joint -n L_drv_toeTap1 -rad .5; parent -w;
    snapObj ("L_drv_toeTap1", "L_jnt_ball1", 1);
    
    joint -n L_drv_tipToe1 -rad .5; parent -w;
    snapObj ("L_drv_tipToe1", "L_enj_toe1", 1);
    
    joint -n L_drv_heelRot1 -rad .5; parent -w;
    snapObj ("L_drv_heelRot1", "L_loc_heel1", 1);
    
    joint -n L_drv_heelPiv1 -rad .5; parent -w;
    snapObj ("L_drv_heelPiv1", "L_loc_heel1", 1);
    
    joint -n L_drv_toePiv1 -rad .5; parent -w;
    snapObj ("L_drv_toePiv1", "L_enj_toe1", 1);
    
    joint -n L_drv_lBank1 -rad .5; parent -w;
    snapObj ("L_drv_lBank1", "L_loc_leftBank1", 1);
    
    joint -n L_drv_rBank1 -rad .5; parent -w;
    snapObj ("L_drv_rBank1", "L_loc_rightBank1", 1);
    
    parent L_drv_ballRot1 L_drv_toeTap1 L_drv_tipToe1;
    parent L_drv_tipToe1 L_drv_heelRot1;
    parent L_drv_heelRot1 L_drv_heelPiv1;
    parent L_drv_heelPiv1 L_drv_toePiv1;
    parent L_drv_toePiv1 L_drv_lBank1;
    parent L_drv_lBank1 L_drv_rBank1;
    makeIdentity -a 1 -t 1 -r 1 -s 1 -n 0 L_drv_rBank1;
    parent L_drv_rBank1 L_jnt_ankle1;
    
    delete L_loc_heel1;
    delete L_loc_leftBank1;
    delete L_loc_rightBank1;
    
    // arm chain
    joint -e -oj xyz -sao zup -ch -zso L_jnt_clavicle1;
    setAttr L_drj_wrist1.jointOrient 0 0 0;
    joint -n L_jnt_shoulder1 -rad .5 L_drj_shoulder1;
    parent L_jnt_shoulder1 L_jnt_clavicle1;
    joint -n L_jnt_elbow2 -rad .5 -r -p 1 0 0 L_jnt_elbow1;
    
    // neck chain
    if (`checkBox -q -v frCB`){
        parent -w L_jnt_eyelid1;
        
        joint -e -oj xyz -sao yup -ch -zso drj_neck1;
        setAttr jnt_neck2.jointOrient 0 0 0;
        
        parent L_jnt_eyelid1 jnt_neck2;
        parent jnt_jaw1 jnt_neck2;
        duplicate L_jnt_eyelid1;
        rename `duplicate L_jnt_eyelid1` L_jnt_eye1;
        setAttr L_jnt_eye1.radius 2;
        joint -n L_enj_eyelid1 -p 0 1 0 -r L_jnt_eyelid1;
        setAttr L_enj_eyelid1.jointOrient 0 0 0;
        joint -n L_enj_eyelid2 -p 0 -1 0 -r L_jnt_eyelid2;
        setAttr L_enj_eyelid2.jointOrient 0 0 0;
        joint -e -oj xyz -sao yup -ch -zso jnt_jaw1;
        setAttr jnt_toung2.jointOrient 0 0 0;
        joint -e -oj xyz -sao zup -ch -zso L_jnt_eyelid1;
        joint -e -oj xyz -sao zup -ch -zso L_jnt_eyelid2;
        joint -e -oj xyz -sao zup -ch -zso L_jnt_eye1;        
    }
    else{
        joint -e -oj xyz -sao yup -ch -zso drj_neck1;
        setAttr jnt_neck2.jointOrient 0 0 0;        
    }
    
    // connect hierarchy
    parent L_jnt_hip1 jnt_hips1;
    parent L_jnt_clavicle1 ("jnt_spine"+$spineJnts);
    joint -n L_jnt_wrist1 -rad .5 L_drj_wrist1;
    parent L_jnt_wrist1 L_jnt_elbow1;
    for ($i=1; $i<$fingers+1; $i++)
        parent ("L_jnt_Afinger"+$i) L_jnt_wrist1;
    parent drj_neck1 ("jnt_spine"+$spineJnts);
    
    // mirror joints
    mirrorJoint -mb -myz -sr "L" "R" L_jnt_clavicle1;
    mirrorJoint -mb -myz -sr "L" "R" L_jnt_hip1;
    
    if (`checkBox -q -v frCB`){
        mirrorJoint -myz -sr "L" "R" L_jnt_eyelid1;
        mirrorJoint -myz -sr "L" "R" L_jnt_eyelid2;
        mirrorJoint -myz -sr "L" "R" L_jnt_eye1;
    }
    
    // prefered angles
    setAttr L_jnt_knee1.preferredAngleY 45;
    setAttr R_jnt_knee1.preferredAngleY 45;
    setAttr L_jnt_knee2.preferredAngleY 45;
    setAttr R_jnt_knee2.preferredAngleY 45;
    setAttr L_jnt_elbow1.preferredAngleZ 45;
    setAttr R_jnt_elbow1.preferredAngleZ 45;
    
    // joint connections    
    connectAttr L_drj_shoulder1.ry L_jnt_shoulder1.ry;
    connectAttr L_drj_shoulder1.rz L_jnt_shoulder1.rz;
    connectAttr R_drj_shoulder1.ry R_jnt_shoulder1.ry;
    connectAttr R_drj_shoulder1.rz R_jnt_shoulder1.rz;
    
    createNode -n L_elbow_mdn1 multiplyDivide;
    setAttr L_elbow_mdn1.operation 2;
    connectAttr L_jnt_elbow1.rz L_elbow_mdn1.input1X;
    setAttr L_elbow_mdn1.input2X -90;
    connectAttr L_elbow_mdn1.outputX L_jnt_elbow2.ty;
    
    createNode -n R_elbow_mdn1 multiplyDivide;
    setAttr R_elbow_mdn1.operation 2;
    connectAttr R_jnt_elbow1.rz R_elbow_mdn1.input1X;
    setAttr R_elbow_mdn1.input2X 90;
    connectAttr R_elbow_mdn1.outputX R_jnt_elbow2.ty;
    
    createNode -n L_knee_mdn1 multiplyDivide;
    setAttr L_knee_mdn1.operation 2;
    connectAttr L_jnt_knee1.ry L_knee_mdn1.input1X;
    setAttr L_knee_mdn1.input2X 45;
    connectAttr L_knee_mdn1.outputX L_jnt_knee2.tz;
    
    createNode -n R_knee_mdn1 multiplyDivide;
    setAttr R_knee_mdn1.operation 2;
    connectAttr R_jnt_knee1.ry R_knee_mdn1.input1X;
    setAttr R_knee_mdn1.input2X -45;
    connectAttr R_knee_mdn1.outputX R_jnt_knee2.tz;
    
    // twist joints
    
    // neck
    float $off = `getAttr jnt_neck2.tx` * .25;
    joint -n jnt_neTwist1 -r -p $off 0 0 drj_neck1;
    $off = `getAttr jnt_neck2.tx` * .5;
    joint -n jnt_neTwist2 -r -p $off 0 0 drj_neck1;
    $off = `getAttr jnt_neck2.tx` * .75;
    joint -n jnt_neTwist3 -r -p $off 0 0 drj_neck1;
    
    spaceLocator -n loc_neTwist1;
    snapObj ("loc_neTwist1", "jnt_neTwist1", 1);
    xform -os -r -t 0 0 5 loc_neTwist1;
    snapObjXform ("loc_neTwist1.rotatePivot", "jnt_neTwist1", 1);
    parent loc_neTwist1 drj_neck1;
    makeIdentity -a 1 -t 1 loc_neTwist1;
    setAttr loc_neTwist1.visibility 0;
    
    spaceLocator -n loc_neTwist2;
    snapObj ("loc_neTwist2", "jnt_neTwist3", 1);
    xform -os -r -t 0 0 5 loc_neTwist2;
    snapObjXform ("loc_neTwist2.rotatePivot", "jnt_neTwist3", 1);
    parent loc_neTwist2 drj_neck1;
    makeIdentity -a 1 -t 1 loc_neTwist2;
    setAttr loc_neTwist2.visibility 0;
    
    createNode -n neTwist_mdn1 multiplyDivide;
    connectAttr drj_neck1.rx neTwist_mdn1.input1X;
    connectAttr drj_neck1.rx neTwist_mdn1.input1Y;
    connectAttr drj_neck1.rx neTwist_mdn1.input1Z;
    setAttr neTwist_mdn1.input2X -.75;
    setAttr neTwist_mdn1.input2Y -.5;
    setAttr neTwist_mdn1.input2Z -.25;
    
    connectAttr neTwist_mdn1.outputX loc_neTwist1.rx;
    connectAttr neTwist_mdn1.outputY jnt_neTwist2.rx;
    connectAttr neTwist_mdn1.outputZ loc_neTwist2.rx;
    
    aimConstraint -wut objectrotation -wuo loc_neTwist1 jnt_neTwist2 jnt_neTwist1;
    aimConstraint -wut objectrotation -wuo loc_neTwist2 jnt_neck2 jnt_neTwist3 ;
    
    createNode -n neStretch_mdn1 multiplyDivide;
    connectAttr jnt_neTwist2.t neStretch_mdn1.input1;
    setAttr neStretch_mdn1.input2X .5;
    setAttr neStretch_mdn1.input2Y .5;
    setAttr neStretch_mdn1.input2Z .5;
    
    connectAttr neStretch_mdn1.outputY jnt_neTwist1.ty;
    connectAttr neStretch_mdn1.outputZ jnt_neTwist1.tz;
    connectAttr neStretch_mdn1.outputY jnt_neTwist3.ty;
    connectAttr neStretch_mdn1.outputZ jnt_neTwist3.tz;
    
    connectAttr neStretch_mdn1.outputY loc_neTwist1.ty;
    connectAttr neStretch_mdn1.outputZ loc_neTwist1.tz;
    connectAttr neStretch_mdn1.outputY loc_neTwist2.ty;
    connectAttr neStretch_mdn1.outputZ loc_neTwist2.tz;
    
    createNode -n neStretch_mdn2 multiplyDivide;
    connectAttr jnt_neck2.tx neStretch_mdn2.input1X;
    connectAttr jnt_neck2.tx neStretch_mdn2.input1Y;
    connectAttr jnt_neck2.tx neStretch_mdn2.input1Z;
    setAttr neStretch_mdn2.input2X .25;
    setAttr neStretch_mdn2.input2Y .5;
    setAttr neStretch_mdn2.input2Z .75;
    
    connectAttr neStretch_mdn2.outputX jnt_neTwist1.tx;
    connectAttr neStretch_mdn2.outputY jnt_neTwist2.tx;
    connectAttr neStretch_mdn2.outputZ jnt_neTwist3.tx;
    
    createNode -n neStretch_pma1 plusMinusAverage;
    setAttr neStretch_pma1.operation 2;
    connectAttr jnt_neck2.tx neStretch_pma1.input1D[0];
    setAttr neStretch_pma1.input1D[1] `getAttr jnt_neck2.tx`;
    createNode -n neStretch_mdn3 multiplyDivide;
    connectAttr neStretch_pma1.output1D neStretch_mdn3.input1X;
    connectAttr neStretch_pma1.output1D neStretch_mdn3.input1Y;
    setAttr neStretch_mdn3.input2X .25;
    setAttr neStretch_mdn3.input2Y .75;
    connectAttr neStretch_mdn3.outputX loc_neTwist1.tx;
    connectAttr neStretch_mdn3.outputY loc_neTwist2.tx;

    // left shoulder
    float $off = `getAttr L_jnt_elbow1.tx` * .25;
    joint -n L_jnt_shTwist1 -r -p $off 0 0 L_jnt_shoulder1;
    $off = `getAttr L_jnt_elbow1.tx` * .5;
    joint -n L_jnt_shTwist2 -r -p $off 0 0 L_jnt_shoulder1;
    $off = `getAttr L_jnt_elbow1.tx` * .75;
    joint -n L_jnt_shTwist3 -r -p $off 0 0 L_jnt_shoulder1;
    
    spaceLocator -n L_loc_shTwist1;
    snapObj ("L_loc_shTwist1", "L_jnt_shTwist1", 1);
    xform -os -r -t 0 5 0 L_loc_shTwist1;
    snapObjXform ("L_loc_shTwist1.rotatePivot", "L_jnt_shTwist1", 1);
    parent L_loc_shTwist1 L_jnt_shoulder1;
    makeIdentity -a 1 -t 1 L_loc_shTwist1;
    setAttr L_loc_shTwist1.visibility 0;
    
    spaceLocator -n L_loc_shTwist2;
    snapObj ("L_loc_shTwist2", "L_jnt_shTwist3", 1);
    xform -os -r -t 0 5 0 L_loc_shTwist2;
    snapObjXform ("L_loc_shTwist2.rotatePivot", "L_jnt_shTwist3", 1);
    parent L_loc_shTwist2 L_jnt_shoulder1;
    makeIdentity -a 1 -t 1 L_loc_shTwist2;
    setAttr L_loc_shTwist2.visibility 0;
    
    createNode -n L_shTwist_mdn1 multiplyDivide;
    connectAttr L_drj_shoulder1.rx L_shTwist_mdn1.input1X;
    connectAttr L_drj_shoulder1.rx L_shTwist_mdn1.input1Y;
    connectAttr L_drj_shoulder1.rx L_shTwist_mdn1.input1Z;
    setAttr L_shTwist_mdn1.input2X .25;
    setAttr L_shTwist_mdn1.input2Y .5;
    setAttr L_shTwist_mdn1.input2Z .75;
    
    connectAttr L_shTwist_mdn1.outputX L_loc_shTwist1.rx;
    connectAttr L_shTwist_mdn1.outputY L_jnt_shTwist2.rx;
    connectAttr L_shTwist_mdn1.outputZ L_loc_shTwist2.rx;
    
    aimConstraint -wut objectrotation -wuo L_loc_shTwist1 L_jnt_shTwist2 L_jnt_shTwist1;
    aimConstraint -wut objectrotation -wuo L_loc_shTwist2 L_jnt_elbow1 L_jnt_shTwist3 ;
    
    createNode -n L_shStretch_mdn1 multiplyDivide;
    connectAttr L_jnt_shTwist2.t L_shStretch_mdn1.input1;
    setAttr L_shStretch_mdn1.input2X .5;
    setAttr L_shStretch_mdn1.input2Y .5;
    setAttr L_shStretch_mdn1.input2Z .5;
    
    connectAttr L_shStretch_mdn1.outputY L_jnt_shTwist1.ty;
    connectAttr L_shStretch_mdn1.outputZ L_jnt_shTwist1.tz;
    connectAttr L_shStretch_mdn1.outputY L_jnt_shTwist3.ty;
    connectAttr L_shStretch_mdn1.outputZ L_jnt_shTwist3.tz;
    
    connectAttr L_shStretch_mdn1.outputY L_loc_shTwist1.ty;
    connectAttr L_shStretch_mdn1.outputZ L_loc_shTwist1.tz;
    connectAttr L_shStretch_mdn1.outputY L_loc_shTwist2.ty;
    connectAttr L_shStretch_mdn1.outputZ L_loc_shTwist2.tz;
    
    createNode -n L_shStretch_mdn2 multiplyDivide;
    connectAttr L_jnt_elbow1.tx L_shStretch_mdn2.input1X;
    connectAttr L_jnt_elbow1.tx L_shStretch_mdn2.input1Y;
    connectAttr L_jnt_elbow1.tx L_shStretch_mdn2.input1Z;
    setAttr L_shStretch_mdn2.input2X .25;
    setAttr L_shStretch_mdn2.input2Y .5;
    setAttr L_shStretch_mdn2.input2Z .75;
    
    connectAttr L_shStretch_mdn2.outputX L_jnt_shTwist1.tx;
    connectAttr L_shStretch_mdn2.outputY L_jnt_shTwist2.tx;
    connectAttr L_shStretch_mdn2.outputZ L_jnt_shTwist3.tx;
    
    createNode -n L_shStretch_pma1 plusMinusAverage;
    setAttr L_shStretch_pma1.operation 2;
    connectAttr L_jnt_elbow1.tx L_shStretch_pma1.input1D[0];
    setAttr L_shStretch_pma1.input1D[1] `getAttr L_jnt_elbow1.tx`;
    createNode -n L_shStretch_mdn3 multiplyDivide;
    connectAttr L_shStretch_pma1.output1D L_shStretch_mdn3.input1X;
    connectAttr L_shStretch_pma1.output1D L_shStretch_mdn3.input1Y;
    setAttr L_shStretch_mdn3.input2X .25;
    setAttr L_shStretch_mdn3.input2Y .75;
    connectAttr L_shStretch_mdn3.outputX L_loc_shTwist1.tx;
    connectAttr L_shStretch_mdn3.outputY L_loc_shTwist2.tx;
    
    // left wrist
    float $off = `getAttr L_jnt_wrist1.tx` * .25;
    joint -n L_jnt_wrTwist1 -r -p $off 0 0 L_jnt_elbow1;
    $off = `getAttr L_jnt_wrist1.tx` * .5;
    joint -n L_jnt_wrTwist2 -r -p $off 0 0 L_jnt_elbow1;
    $off = `getAttr L_jnt_wrist1.tx` * .75;
    joint -n L_jnt_wrTwist3 -r -p $off 0 0 L_jnt_elbow1;
    
    spaceLocator -n L_loc_wrTwist1;
    snapObj ("L_loc_wrTwist1", "L_jnt_wrTwist1", 1);
    xform -os -r -t 0 5 0 L_loc_wrTwist1;
    snapObjXform ("L_loc_wrTwist1.rotatePivot", "L_jnt_wrTwist1", 1);
    parent L_loc_wrTwist1 L_jnt_elbow1;
    makeIdentity -a 1 -t 1 L_loc_wrTwist1;
    setAttr L_loc_wrTwist1.visibility 0;
    
    spaceLocator -n L_loc_wrTwist2;
    snapObj ("L_loc_wrTwist2", "L_jnt_wrTwist3", 1);
    xform -os -r -t 0 5 0 L_loc_wrTwist2;
    snapObjXform ("L_loc_wrTwist2.rotatePivot", "L_jnt_wrTwist3", 1);
    parent L_loc_wrTwist2 L_jnt_elbow1;
    makeIdentity -a 1 -t 1 L_loc_wrTwist2;
    setAttr L_loc_wrTwist2.visibility 0;
    
    createNode -n L_wrTwist_mdn1 multiplyDivide;
    connectAttr L_jnt_wrist1.rx L_wrTwist_mdn1.input1X;
    connectAttr L_jnt_wrist1.rx L_wrTwist_mdn1.input1Y;
    connectAttr L_jnt_wrist1.rx L_wrTwist_mdn1.input1Z;
    setAttr L_wrTwist_mdn1.input2X .25;
    setAttr L_wrTwist_mdn1.input2Y .5;
    setAttr L_wrTwist_mdn1.input2Z .75;
    
    connectAttr L_wrTwist_mdn1.outputX L_loc_wrTwist1.rx;
    connectAttr L_wrTwist_mdn1.outputY L_jnt_wrTwist2.rx;
    connectAttr L_wrTwist_mdn1.outputZ L_loc_wrTwist2.rx;
    
    aimConstraint -wut objectrotation -wuo L_loc_wrTwist1 L_jnt_wrTwist2 L_jnt_wrTwist1;
    aimConstraint -wut objectrotation -wuo L_loc_wrTwist2 L_jnt_wrist1 L_jnt_wrTwist3 ;
    
    createNode -n L_wrStretch_mdn1 multiplyDivide;
    connectAttr L_jnt_wrTwist2.t L_wrStretch_mdn1.input1;
    setAttr L_wrStretch_mdn1.input2X .5;
    setAttr L_wrStretch_mdn1.input2Y .5;
    setAttr L_wrStretch_mdn1.input2Z .5;
    
    connectAttr L_wrStretch_mdn1.outputY L_jnt_wrTwist1.ty;
    connectAttr L_wrStretch_mdn1.outputZ L_jnt_wrTwist1.tz;
    connectAttr L_wrStretch_mdn1.outputY L_jnt_wrTwist3.ty;
    connectAttr L_wrStretch_mdn1.outputZ L_jnt_wrTwist3.tz;
    
    connectAttr L_wrStretch_mdn1.outputY L_loc_wrTwist1.ty;
    connectAttr L_wrStretch_mdn1.outputZ L_loc_wrTwist1.tz;
    connectAttr L_wrStretch_mdn1.outputY L_loc_wrTwist2.ty;
    connectAttr L_wrStretch_mdn1.outputZ L_loc_wrTwist2.tz;
    
    createNode -n L_wrStretch_mdn2 multiplyDivide;
    connectAttr L_jnt_wrist1.tx L_wrStretch_mdn2.input1X;
    connectAttr L_jnt_wrist1.tx L_wrStretch_mdn2.input1Y;
    connectAttr L_jnt_wrist1.tx L_wrStretch_mdn2.input1Z;
    setAttr L_wrStretch_mdn2.input2X .25;
    setAttr L_wrStretch_mdn2.input2Y .5;
    setAttr L_wrStretch_mdn2.input2Z .75;
    
    connectAttr L_wrStretch_mdn2.outputX L_jnt_wrTwist1.tx;
    connectAttr L_wrStretch_mdn2.outputY L_jnt_wrTwist2.tx;
    connectAttr L_wrStretch_mdn2.outputZ L_jnt_wrTwist3.tx;
    
    createNode -n L_wrStretch_pma1 plusMinusAverage;
    setAttr L_wrStretch_pma1.operation 2;
    connectAttr L_jnt_wrist1.tx L_wrStretch_pma1.input1D[0];
    setAttr L_wrStretch_pma1.input1D[1] `getAttr L_jnt_wrist1.tx`;
    createNode -n L_wrStretch_mdn3 multiplyDivide;
    connectAttr L_wrStretch_pma1.output1D L_wrStretch_mdn3.input1X;
    connectAttr L_wrStretch_pma1.output1D L_wrStretch_mdn3.input1Y;
    setAttr L_wrStretch_mdn3.input2X .25;
    setAttr L_wrStretch_mdn3.input2Y .75;
    connectAttr L_wrStretch_mdn3.outputX L_loc_wrTwist1.tx;
    connectAttr L_wrStretch_mdn3.outputY L_loc_wrTwist2.tx;
    
    connectAttr L_drj_wrist1.tx L_jnt_wrist1.tx;
    
    // right wrist
    float $off = `getAttr R_jnt_wrist1.tx` * .25;
    joint -n R_jnt_wrTwist1 -r -p $off 0 0 R_jnt_elbow1;
    $off = `getAttr R_jnt_wrist1.tx` * .5;
    joint -n R_jnt_wrTwist2 -r -p $off 0 0 R_jnt_elbow1;
    $off = `getAttr R_jnt_wrist1.tx` * .75;
    joint -n R_jnt_wrTwist3 -r -p $off 0 0 R_jnt_elbow1;
    
    spaceLocator -n R_loc_wrTwist1;
    snapObj ("R_loc_wrTwist1", "R_jnt_wrTwist1", 1);
    xform -os -r -t 0 5 0 R_loc_wrTwist1;
    snapObjXform ("R_loc_wrTwist1.rotatePivot", "R_jnt_wrTwist1", 1);
    parent R_loc_wrTwist1 R_jnt_elbow1;
    makeIdentity -a 1 -t 1 R_loc_wrTwist1;
    setAttr R_loc_wrTwist1.visibility 0;
    
    spaceLocator -n R_loc_wrTwist2;
    snapObj ("R_loc_wrTwist2", "R_jnt_wrTwist3", 1);
    xform -os -r -t 0 5 0 R_loc_wrTwist2;
    snapObjXform ("R_loc_wrTwist2.rotatePivot", "R_jnt_wrTwist3", 1);
    parent R_loc_wrTwist2 R_jnt_elbow1;
    makeIdentity -a 1 -t 1 R_loc_wrTwist2;
    setAttr R_loc_wrTwist2.visibility 0;
    
    createNode -n R_wrTwist_mdn1 multiplyDivide;
    connectAttr R_jnt_wrist1.rx R_wrTwist_mdn1.input1X;
    connectAttr R_jnt_wrist1.rx R_wrTwist_mdn1.input1Y;
    connectAttr R_jnt_wrist1.rx R_wrTwist_mdn1.input1Z;
    setAttr R_wrTwist_mdn1.input2X .25;
    setAttr R_wrTwist_mdn1.input2Y .5;
    setAttr R_wrTwist_mdn1.input2Z .75;
    
    connectAttr R_wrTwist_mdn1.outputX R_loc_wrTwist1.rx;
    connectAttr R_wrTwist_mdn1.outputY R_jnt_wrTwist2.rx;
    connectAttr R_wrTwist_mdn1.outputZ R_loc_wrTwist2.rx;
    
    aimConstraint -aim -1 0 0 -wut objectrotation -wuo R_loc_wrTwist1 R_jnt_wrTwist2 R_jnt_wrTwist1;
    aimConstraint -aim -1 0 0 -wut objectrotation -wuo R_loc_wrTwist2 R_jnt_wrist1 R_jnt_wrTwist3 ;
    
    createNode -n R_wrStretch_mdn1 multiplyDivide;
    connectAttr R_jnt_wrTwist2.t R_wrStretch_mdn1.input1;
    setAttr R_wrStretch_mdn1.input2X .5;
    setAttr R_wrStretch_mdn1.input2Y .5;
    setAttr R_wrStretch_mdn1.input2Z .5;
    
    connectAttr R_wrStretch_mdn1.outputY R_jnt_wrTwist1.ty;
    connectAttr R_wrStretch_mdn1.outputZ R_jnt_wrTwist1.tz;
    connectAttr R_wrStretch_mdn1.outputY R_jnt_wrTwist3.ty;
    connectAttr R_wrStretch_mdn1.outputZ R_jnt_wrTwist3.tz;
    
    connectAttr R_wrStretch_mdn1.outputY R_loc_wrTwist1.ty;
    connectAttr R_wrStretch_mdn1.outputZ R_loc_wrTwist1.tz;
    connectAttr R_wrStretch_mdn1.outputY R_loc_wrTwist2.ty;
    connectAttr R_wrStretch_mdn1.outputZ R_loc_wrTwist2.tz;
    
    createNode -n R_wrStretch_mdn2 multiplyDivide;
    connectAttr R_jnt_wrist1.tx R_wrStretch_mdn2.input1X;
    connectAttr R_jnt_wrist1.tx R_wrStretch_mdn2.input1Y;
    connectAttr R_jnt_wrist1.tx R_wrStretch_mdn2.input1Z;
    setAttr R_wrStretch_mdn2.input2X .25;
    setAttr R_wrStretch_mdn2.input2Y .5;
    setAttr R_wrStretch_mdn2.input2Z .75;
    
    connectAttr R_wrStretch_mdn2.outputX R_jnt_wrTwist1.tx;
    connectAttr R_wrStretch_mdn2.outputY R_jnt_wrTwist2.tx;
    connectAttr R_wrStretch_mdn2.outputZ R_jnt_wrTwist3.tx;
    
    createNode -n R_wrStretch_pma1 plusMinusAverage;
    setAttr R_wrStretch_pma1.operation 2;
    connectAttr R_jnt_wrist1.tx R_wrStretch_pma1.input1D[0];
    setAttr R_wrStretch_pma1.input1D[1] `getAttr R_jnt_wrist1.tx`;
    createNode -n R_wrStretch_mdn3 multiplyDivide;
    connectAttr R_wrStretch_pma1.output1D R_wrStretch_mdn3.input1X;
    connectAttr R_wrStretch_pma1.output1D R_wrStretch_mdn3.input1Y;
    setAttr R_wrStretch_mdn3.input2X .25;
    setAttr R_wrStretch_mdn3.input2Y .75;
    connectAttr R_wrStretch_mdn3.outputX R_loc_wrTwist1.tx;
    connectAttr R_wrStretch_mdn3.outputY R_loc_wrTwist2.tx;
    
    connectAttr R_drj_wrist1.tx R_jnt_wrist1.tx;
    
    // right shoulder
    float $off = `getAttr R_jnt_elbow1.tx` * .25;
    joint -n R_jnt_shTwist1 -r -p $off 0 0 R_jnt_shoulder1;
    $off = `getAttr R_jnt_elbow1.tx` * .5;
    joint -n R_jnt_shTwist2 -r -p $off 0 0 R_jnt_shoulder1;
    $off = `getAttr R_jnt_elbow1.tx` * .75;
    joint -n R_jnt_shTwist3 -r -p $off 0 0 R_jnt_shoulder1;
    
    spaceLocator -n R_loc_shTwist1;
    snapObj ("R_loc_shTwist1", "R_jnt_shTwist1", 1);
    xform -os -r -t 0 5 0 R_loc_shTwist1;
    snapObjXform ("R_loc_shTwist1.rotatePivot", "R_jnt_shTwist1", 1);
    parent R_loc_shTwist1 R_jnt_shoulder1;
    makeIdentity -a 1 -t 1 R_loc_shTwist1;
    setAttr R_loc_shTwist1.visibility 0;
    
    spaceLocator -n R_loc_shTwist2;
    snapObj ("R_loc_shTwist2", "R_jnt_shTwist3", 1);
    xform -os -r -t 0 5 0 R_loc_shTwist2;
    snapObjXform ("R_loc_shTwist2.rotatePivot", "R_jnt_shTwist3", 1);
    parent R_loc_shTwist2 R_jnt_shoulder1;
    makeIdentity -a 1 -t 1 R_loc_shTwist2;
    setAttr R_loc_shTwist2.visibility 0;
    
    createNode -n R_shTwist_mdn1 multiplyDivide;
    connectAttr R_drj_shoulder1.rx R_shTwist_mdn1.input1X;
    connectAttr R_drj_shoulder1.rx R_shTwist_mdn1.input1Y;
    connectAttr R_drj_shoulder1.rx R_shTwist_mdn1.input1Z;
    setAttr R_shTwist_mdn1.input2X .25;
    setAttr R_shTwist_mdn1.input2Y .5;
    setAttr R_shTwist_mdn1.input2Z .75;
    
    connectAttr R_shTwist_mdn1.outputX R_loc_shTwist1.rx;
    connectAttr R_shTwist_mdn1.outputY R_jnt_shTwist2.rx;
    connectAttr R_shTwist_mdn1.outputZ R_loc_shTwist2.rx;
    
    aimConstraint -wut objectrotation -aim -1 0 0 -wuo R_loc_shTwist1 R_jnt_shTwist2 R_jnt_shTwist1;
    aimConstraint -wut objectrotation -aim -1 0 0 -wuo R_loc_shTwist2 R_jnt_elbow1 R_jnt_shTwist3 ;
    
    createNode -n R_shStretch_mdn1 multiplyDivide;
    connectAttr R_jnt_shTwist2.t R_shStretch_mdn1.input1;
    setAttr R_shStretch_mdn1.input2X .5;
    setAttr R_shStretch_mdn1.input2Y .5;
    setAttr R_shStretch_mdn1.input2Z .5;
    
    connectAttr R_shStretch_mdn1.outputY R_jnt_shTwist1.ty;
    connectAttr R_shStretch_mdn1.outputZ R_jnt_shTwist1.tz;
    connectAttr R_shStretch_mdn1.outputY R_jnt_shTwist3.ty;
    connectAttr R_shStretch_mdn1.outputZ R_jnt_shTwist3.tz;
    
    connectAttr R_shStretch_mdn1.outputY R_loc_shTwist1.ty;
    connectAttr R_shStretch_mdn1.outputZ R_loc_shTwist1.tz;
    connectAttr R_shStretch_mdn1.outputY R_loc_shTwist2.ty;
    connectAttr R_shStretch_mdn1.outputZ R_loc_shTwist2.tz;
    
    createNode -n R_shStretch_mdn2 multiplyDivide;
    connectAttr R_jnt_elbow1.tx R_shStretch_mdn2.input1X;
    connectAttr R_jnt_elbow1.tx R_shStretch_mdn2.input1Y;
    connectAttr R_jnt_elbow1.tx R_shStretch_mdn2.input1Z;
    setAttr R_shStretch_mdn2.input2X .25;
    setAttr R_shStretch_mdn2.input2Y .5;
    setAttr R_shStretch_mdn2.input2Z .75;
    
    connectAttr R_shStretch_mdn2.outputX R_jnt_shTwist1.tx;
    connectAttr R_shStretch_mdn2.outputY R_jnt_shTwist2.tx;
    connectAttr R_shStretch_mdn2.outputZ R_jnt_shTwist3.tx;
    
    createNode -n R_shStretch_pma1 plusMinusAverage;
    setAttr R_shStretch_pma1.operation 2;
    connectAttr R_jnt_elbow1.tx R_shStretch_pma1.input1D[0];
    setAttr R_shStretch_pma1.input1D[1] `getAttr R_jnt_elbow1.tx`;
    createNode -n R_shStretch_mdn3 multiplyDivide;
    connectAttr R_shStretch_pma1.output1D R_shStretch_mdn3.input1X;
    connectAttr R_shStretch_pma1.output1D R_shStretch_mdn3.input1Y;
    setAttr R_shStretch_mdn3.input2X .25;
    setAttr R_shStretch_mdn3.input2Y .75;
    connectAttr R_shStretch_mdn3.outputX R_loc_shTwist1.tx;
    connectAttr R_shStretch_mdn3.outputY R_loc_shTwist2.tx;
    
    // left hip
    float $off = `getAttr L_jnt_knee1.tx` * .25;
    joint -n L_jnt_hpTwist1 -r -p $off 0 0 L_jnt_hip1;
    $off = `getAttr L_jnt_knee1.tx` * .5;
    joint -n L_jnt_hpTwist2 -r -p $off 0 0 L_jnt_hip1;
    $off = `getAttr L_jnt_knee1.tx` * .75;
    joint -n L_jnt_hpTwist3 -r -p $off 0 0 L_jnt_hip1;
    
    spaceLocator -n L_loc_hpTwist1;
    snapObj ("L_loc_hpTwist1", "L_jnt_hpTwist1", 1);
    xform -os -r -t 0 0 5 L_loc_hpTwist1;
    snapObjXform ("L_loc_hpTwist1.rotatePivot", "L_jnt_hpTwist1", 1);
    parent L_loc_hpTwist1 L_jnt_hip1;
    makeIdentity -a 1 -t 1 L_loc_hpTwist1;
    setAttr L_loc_hpTwist1.visibility 0;
    
    spaceLocator -n L_loc_hpTwist2;
    snapObj ("L_loc_hpTwist2", "L_jnt_hpTwist3", 1);
    xform -os -r -t 0 0 5 L_loc_hpTwist2;
    snapObjXform ("L_loc_hpTwist2.rotatePivot", "L_jnt_hpTwist3", 1);
    parent L_loc_hpTwist2 L_jnt_hip1;
    makeIdentity -a 1 -t 1 L_loc_hpTwist2;
    setAttr L_loc_hpTwist2.visibility 0;
    
    createNode -n L_hpTwist_mdn1 multiplyDivide;
    connectAttr L_jnt_hip1.rx L_hpTwist_mdn1.input1X;
    connectAttr L_jnt_hip1.rx L_hpTwist_mdn1.input1Y;
    connectAttr L_jnt_hip1.rx L_hpTwist_mdn1.input1Z;
    setAttr L_hpTwist_mdn1.input2X -1;
    setAttr L_hpTwist_mdn1.input2Y -.5;
    setAttr L_hpTwist_mdn1.input2Z 1;
    
    aimConstraint -wut objectrotation -wuo L_loc_hpTwist1 L_jnt_hpTwist2 L_jnt_hpTwist1;
    aimConstraint -wut objectrotation -wuo L_loc_hpTwist2 L_jnt_knee1 L_jnt_hpTwist3 ;
    
    connectAttr L_hpTwist_mdn1.outputX L_loc_hpTwist1.rx;
    connectAttr L_hpTwist_mdn1.outputY L_jnt_hpTwist2.rx;
    
    createNode -n L_hpStretch_mdn1 multiplyDivide;
    connectAttr L_jnt_hpTwist2.t L_hpStretch_mdn1.input1;
    setAttr L_hpStretch_mdn1.input2X .5;
    setAttr L_hpStretch_mdn1.input2Y .5;
    setAttr L_hpStretch_mdn1.input2Z .5;
    
    connectAttr L_hpStretch_mdn1.outputY L_jnt_hpTwist1.ty;
    connectAttr L_hpStretch_mdn1.outputZ L_jnt_hpTwist1.tz;
    connectAttr L_hpStretch_mdn1.outputY L_jnt_hpTwist3.ty;
    connectAttr L_hpStretch_mdn1.outputZ L_jnt_hpTwist3.tz;
    
    connectAttr L_hpStretch_mdn1.outputY L_loc_hpTwist1.ty;
    connectAttr L_hpStretch_mdn1.outputZ L_loc_hpTwist1.tz;
    connectAttr L_hpStretch_mdn1.outputY L_loc_hpTwist2.ty;
    connectAttr L_hpStretch_mdn1.outputZ L_loc_hpTwist2.tz;
    
    createNode -n L_hpStretch_mdn2 multiplyDivide;
    connectAttr L_jnt_knee1.tx L_hpStretch_mdn2.input1X;
    connectAttr L_jnt_knee1.tx L_hpStretch_mdn2.input1Y;
    connectAttr L_jnt_knee1.tx L_hpStretch_mdn2.input1Z;
    setAttr L_hpStretch_mdn2.input2X .25;
    setAttr L_hpStretch_mdn2.input2Y .5;
    setAttr L_hpStretch_mdn2.input2Z .75;
    
    connectAttr L_hpStretch_mdn2.outputX L_jnt_hpTwist1.tx;
    connectAttr L_hpStretch_mdn2.outputY L_jnt_hpTwist2.tx;
    connectAttr L_hpStretch_mdn2.outputZ L_jnt_hpTwist3.tx;
    
    createNode -n L_hpStretch_pma1 plusMinusAverage;
    setAttr L_hpStretch_pma1.operation 2;
    connectAttr L_jnt_knee1.tx L_hpStretch_pma1.input1D[0];
    setAttr L_hpStretch_pma1.input1D[1] `getAttr L_jnt_knee1.tx`;
    createNode -n L_hpStretch_mdn3 multiplyDivide;
    connectAttr L_hpStretch_pma1.output1D L_hpStretch_mdn3.input1X;
    connectAttr L_hpStretch_pma1.output1D L_hpStretch_mdn3.input1Y;
    setAttr L_hpStretch_mdn3.input2X .25;
    setAttr L_hpStretch_mdn3.input2Y .75;
    connectAttr L_hpStretch_mdn3.outputX L_loc_hpTwist1.tx;
    connectAttr L_hpStretch_mdn3.outputY L_loc_hpTwist2.tx;
    
    // right hip
    float $off = `getAttr R_jnt_hip1|R_jnt_knee1.tx` * .25;
    joint -n R_jnt_hpTwist1 -r -p $off 0 0 R_jnt_hip1;
    $off = `getAttr R_jnt_hip1|R_jnt_knee1.tx` * .5;
    joint -n R_jnt_hpTwist2 -r -p $off 0 0 R_jnt_hip1;
    $off = `getAttr R_jnt_hip1|R_jnt_knee1.tx` * .75;
    joint -n R_jnt_hpTwist3 -r -p $off 0 0 R_jnt_hip1;
    
    spaceLocator -n R_loc_hpTwist1;
    snapObj ("R_loc_hpTwist1", "R_jnt_hpTwist1", 1);
    xform -os -r -t 0 0 5 R_loc_hpTwist1;
    snapObjXform ("R_loc_hpTwist1.rotatePivot", "R_jnt_hpTwist1", 1);
    parent R_loc_hpTwist1 R_jnt_hip1;
    makeIdentity -a 1 -t 1 R_loc_hpTwist1;
    setAttr R_loc_hpTwist1.visibility 0;
    
    spaceLocator -n R_loc_hpTwist2;
    snapObj ("R_loc_hpTwist2", "R_jnt_hpTwist3", 1);
    xform -os -r -t 0 0 5 R_loc_hpTwist2;
    snapObjXform ("R_loc_hpTwist2.rotatePivot", "R_jnt_hpTwist3", 1);
    parent R_loc_hpTwist2 R_jnt_hip1;
    makeIdentity -a 1 -t 1 R_loc_hpTwist2;
    setAttr R_loc_hpTwist2.visibility 0;
    
    createNode -n R_hpTwist_mdn1 multiplyDivide;
    connectAttr R_jnt_hip1.rx R_hpTwist_mdn1.input1X;
    connectAttr R_jnt_hip1.rx R_hpTwist_mdn1.input1Y;
    connectAttr R_jnt_hip1.rx R_hpTwist_mdn1.input1Z;
    setAttr R_hpTwist_mdn1.input2X -1;
    setAttr R_hpTwist_mdn1.input2Y -.5;
    setAttr R_hpTwist_mdn1.input2Z 1;
    
    aimConstraint -wut objectrotation -wuo R_loc_hpTwist1 R_jnt_hpTwist2 R_jnt_hpTwist1;
    aimConstraint -wut objectrotation -wuo R_loc_hpTwist2 R_jnt_knee1 R_jnt_hpTwist3 ;
    
    connectAttr R_hpTwist_mdn1.outputX R_loc_hpTwist1.rx;
    connectAttr R_hpTwist_mdn1.outputY R_jnt_hpTwist2.rx;
    
    createNode -n R_hpStretch_mdn1 multiplyDivide;
    connectAttr R_jnt_hpTwist2.t R_hpStretch_mdn1.input1;
    setAttr R_hpStretch_mdn1.input2X .5;
    setAttr R_hpStretch_mdn1.input2Y .5;
    setAttr R_hpStretch_mdn1.input2Z .5;
    
    connectAttr R_hpStretch_mdn1.outputY R_jnt_hpTwist1.ty;
    connectAttr R_hpStretch_mdn1.outputZ R_jnt_hpTwist1.tz;
    connectAttr R_hpStretch_mdn1.outputY R_jnt_hpTwist3.ty;
    connectAttr R_hpStretch_mdn1.outputZ R_jnt_hpTwist3.tz;
    
    connectAttr R_hpStretch_mdn1.outputY R_loc_hpTwist1.ty;
    connectAttr R_hpStretch_mdn1.outputZ R_loc_hpTwist1.tz;
    connectAttr R_hpStretch_mdn1.outputY R_loc_hpTwist2.ty;
    connectAttr R_hpStretch_mdn1.outputZ R_loc_hpTwist2.tz;
    
    createNode -n R_hpStretch_mdn2 multiplyDivide;
    connectAttr R_jnt_knee1.tx R_hpStretch_mdn2.input1X;
    connectAttr R_jnt_knee1.tx R_hpStretch_mdn2.input1Y;
    connectAttr R_jnt_knee1.tx R_hpStretch_mdn2.input1Z;
    setAttr R_hpStretch_mdn2.input2X .25;
    setAttr R_hpStretch_mdn2.input2Y .5;
    setAttr R_hpStretch_mdn2.input2Z .75;
    
    connectAttr R_hpStretch_mdn2.outputX R_jnt_hpTwist1.tx;
    connectAttr R_hpStretch_mdn2.outputY R_jnt_hpTwist2.tx;
    connectAttr R_hpStretch_mdn2.outputZ R_jnt_hpTwist3.tx;
    
    createNode -n R_hpStretch_pma1 plusMinusAverage;
    setAttr R_hpStretch_pma1.operation 2;
    connectAttr R_jnt_knee1.tx R_hpStretch_pma1.input1D[0];
    setAttr R_hpStretch_pma1.input1D[1] `getAttr R_jnt_knee1.tx`;
    createNode -n R_hpStretch_mdn3 multiplyDivide;
    connectAttr R_hpStretch_pma1.output1D R_hpStretch_mdn3.input1X;
    connectAttr R_hpStretch_pma1.output1D R_hpStretch_mdn3.input1Y;
    setAttr R_hpStretch_mdn3.input2X .25;
    setAttr R_hpStretch_mdn3.input2Y .75;
    connectAttr R_hpStretch_mdn3.outputX R_loc_hpTwist1.tx;
    connectAttr R_hpStretch_mdn3.outputY R_loc_hpTwist2.tx;
    
    // left shin
    float $off = `getAttr L_jnt_ankle1.tx` * .25;
    joint -n L_jnt_anTwist1 -r -p $off 0 0 L_jnt_knee1;
    $off = `getAttr L_jnt_ankle1.tx` * .5;
    joint -n L_jnt_anTwist2 -r -p $off 0 0 L_jnt_knee1;
    $off = `getAttr L_jnt_ankle1.tx` * .75;
    joint -n L_jnt_anTwist3 -r -p $off 0 0 L_jnt_knee1;
    
    spaceLocator -n L_loc_anTwist1;
    snapObj ("L_loc_anTwist1", "L_jnt_anTwist1", 1);
    xform -os -r -t 0 0 5 L_loc_anTwist1;
    snapObjXform ("L_loc_anTwist1.rotatePivot", "L_jnt_anTwist1", 1);
    parent L_loc_anTwist1 L_jnt_knee1;
    makeIdentity -a 1 -t 1 L_loc_anTwist1;
    setAttr L_loc_anTwist1.visibility 0;
    
    spaceLocator -n L_loc_anTwist2;
    snapObj ("L_loc_anTwist2", "L_jnt_anTwist3", 1);
    xform -os -r -t 0 0 5 L_loc_anTwist2;
    snapObjXform ("L_loc_anTwist2.rotatePivot", "L_jnt_anTwist3", 1);
    parent L_loc_anTwist2 L_jnt_knee1;
    makeIdentity -a 1 -t 1 L_loc_anTwist2;
    setAttr L_loc_anTwist2.visibility 0;
    
    createNode -n L_anTwist_mdn1 multiplyDivide;
    connectAttr L_jnt_knee1.rx L_anTwist_mdn1.input1X;
    connectAttr L_jnt_knee1.rx L_anTwist_mdn1.input1Y;
    connectAttr L_jnt_knee1.rx L_anTwist_mdn1.input1Z;
    setAttr L_anTwist_mdn1.input2X 1;
    setAttr L_anTwist_mdn1.input2Y 1;
    setAttr L_anTwist_mdn1.input2Z 1;
    
    connectAttr L_anTwist_mdn1.outputX L_loc_anTwist1.rx;
    connectAttr L_anTwist_mdn1.outputY L_jnt_anTwist2.rx;
    connectAttr L_anTwist_mdn1.outputZ L_loc_anTwist2.rx;
    
    aimConstraint -wut objectrotation -wuo L_loc_anTwist1 L_jnt_anTwist2 L_jnt_anTwist1;
    aimConstraint -wut objectrotation -wuo L_loc_anTwist2 L_jnt_ankle1 L_jnt_anTwist3 ;
    
    createNode -n L_anStretch_mdn1 multiplyDivide;
    connectAttr L_jnt_anTwist2.t L_anStretch_mdn1.input1;
    setAttr L_anStretch_mdn1.input2X .5;
    setAttr L_anStretch_mdn1.input2Y .5;
    setAttr L_anStretch_mdn1.input2Z .5;
    
    connectAttr L_anStretch_mdn1.outputY L_jnt_anTwist1.ty;
    connectAttr L_anStretch_mdn1.outputZ L_jnt_anTwist1.tz;
    connectAttr L_anStretch_mdn1.outputY L_jnt_anTwist3.ty;
    connectAttr L_anStretch_mdn1.outputZ L_jnt_anTwist3.tz;
    
    connectAttr L_anStretch_mdn1.outputY L_loc_anTwist1.ty;
    connectAttr L_anStretch_mdn1.outputZ L_loc_anTwist1.tz;
    connectAttr L_anStretch_mdn1.outputY L_loc_anTwist2.ty;
    connectAttr L_anStretch_mdn1.outputZ L_loc_anTwist2.tz;
    
    createNode -n L_anStretch_mdn2 multiplyDivide;
    connectAttr L_jnt_ankle1.tx L_anStretch_mdn2.input1X;
    connectAttr L_jnt_ankle1.tx L_anStretch_mdn2.input1Y;
    connectAttr L_jnt_ankle1.tx L_anStretch_mdn2.input1Z;
    setAttr L_anStretch_mdn2.input2X .25;
    setAttr L_anStretch_mdn2.input2Y .5;
    setAttr L_anStretch_mdn2.input2Z .75;
    
    connectAttr L_anStretch_mdn2.outputX L_jnt_anTwist1.tx;
    connectAttr L_anStretch_mdn2.outputY L_jnt_anTwist2.tx;
    connectAttr L_anStretch_mdn2.outputZ L_jnt_anTwist3.tx;
    
    createNode -n L_anStretch_pma1 plusMinusAverage;
    setAttr L_anStretch_pma1.operation 2;
    connectAttr L_jnt_ankle1.tx L_anStretch_pma1.input1D[0];
    setAttr L_anStretch_pma1.input1D[1] `getAttr L_jnt_ankle1.tx`;
    createNode -n L_anStretch_mdn3 multiplyDivide;
    connectAttr L_anStretch_pma1.output1D L_anStretch_mdn3.input1X;
    connectAttr L_anStretch_pma1.output1D L_anStretch_mdn3.input1Y;
    setAttr L_anStretch_mdn3.input2X .25;
    setAttr L_anStretch_mdn3.input2Y .75;
    connectAttr L_anStretch_mdn3.outputX L_loc_anTwist1.tx;
    connectAttr L_anStretch_mdn3.outputY L_loc_anTwist2.tx;
    
    // right shin
    float $off = `getAttr R_jnt_ankle1.tx` * .25;
    joint -n R_jnt_anTwist1 -r -p $off 0 0 R_jnt_knee1;
    $off = `getAttr R_jnt_ankle1.tx` * .5;
    joint -n R_jnt_anTwist2 -r -p $off 0 0 R_jnt_knee1;
    $off = `getAttr R_jnt_ankle1.tx` * .75;
    joint -n R_jnt_anTwist3 -r -p $off 0 0 R_jnt_knee1;
    
    spaceLocator -n R_loc_anTwist1;
    snapObj ("R_loc_anTwist1", "R_jnt_anTwist1", 1);
    xform -os -r -t 0 0 5 R_loc_anTwist1;
    snapObjXform ("R_loc_anTwist1.rotatePivot", "R_jnt_anTwist1", 1);
    parent R_loc_anTwist1 R_jnt_knee1;
    makeIdentity -a 1 -t 1 R_loc_anTwist1;
    setAttr R_loc_anTwist1.visibility 0;
    
    spaceLocator -n R_loc_anTwist2;
    snapObj ("R_loc_anTwist2", "R_jnt_anTwist3", 1);
    xform -os -r -t 0 0 5 R_loc_anTwist2;
    snapObjXform ("R_loc_anTwist2.rotatePivot", "R_jnt_anTwist3", 1);
    parent R_loc_anTwist2 R_jnt_knee1;
    makeIdentity -a 1 -t 1 R_loc_anTwist2;
    setAttr R_loc_anTwist2.visibility 0;
    
    createNode -n R_anTwist_mdn1 multiplyDivide;
    connectAttr R_jnt_knee1.rx R_anTwist_mdn1.input1X;
    connectAttr R_jnt_knee1.rx R_anTwist_mdn1.input1Y;
    connectAttr R_jnt_knee1.rx R_anTwist_mdn1.input1Z;
    setAttr R_anTwist_mdn1.input2X 1;
    setAttr R_anTwist_mdn1.input2Y 1;
    setAttr R_anTwist_mdn1.input2Z 1;
    
    connectAttr R_anTwist_mdn1.outputX R_loc_anTwist1.rx;
    connectAttr R_anTwist_mdn1.outputY R_jnt_anTwist2.rx;
    connectAttr R_anTwist_mdn1.outputZ R_loc_anTwist2.rx;
    
    aimConstraint -wut objectrotation -wuo R_loc_anTwist1 R_jnt_anTwist2 R_jnt_anTwist1;
    aimConstraint -wut objectrotation -wuo R_loc_anTwist2 R_jnt_ankle1 R_jnt_anTwist3 ;
    
    createNode -n R_anStretch_mdn1 multiplyDivide;
    connectAttr R_jnt_anTwist2.t R_anStretch_mdn1.input1;
    setAttr R_anStretch_mdn1.input2X .5;
    setAttr R_anStretch_mdn1.input2Y .5;
    setAttr R_anStretch_mdn1.input2Z .5;
    
    connectAttr R_anStretch_mdn1.outputY R_jnt_anTwist1.ty;
    connectAttr R_anStretch_mdn1.outputZ R_jnt_anTwist1.tz;
    connectAttr R_anStretch_mdn1.outputY R_jnt_anTwist3.ty;
    connectAttr R_anStretch_mdn1.outputZ R_jnt_anTwist3.tz;
    
    connectAttr R_anStretch_mdn1.outputY R_loc_anTwist1.ty;
    connectAttr R_anStretch_mdn1.outputZ R_loc_anTwist1.tz;
    connectAttr R_anStretch_mdn1.outputY R_loc_anTwist2.ty;
    connectAttr R_anStretch_mdn1.outputZ R_loc_anTwist2.tz;
    
    createNode -n R_anStretch_mdn2 multiplyDivide;
    connectAttr R_jnt_ankle1.tx R_anStretch_mdn2.input1X;
    connectAttr R_jnt_ankle1.tx R_anStretch_mdn2.input1Y;
    connectAttr R_jnt_ankle1.tx R_anStretch_mdn2.input1Z;
    setAttr R_anStretch_mdn2.input2X .25;
    setAttr R_anStretch_mdn2.input2Y .5;
    setAttr R_anStretch_mdn2.input2Z .75;
    
    connectAttr R_anStretch_mdn2.outputX R_jnt_anTwist1.tx;
    connectAttr R_anStretch_mdn2.outputY R_jnt_anTwist2.tx;
    connectAttr R_anStretch_mdn2.outputZ R_jnt_anTwist3.tx;
    
    createNode -n R_anStretch_pma1 plusMinusAverage;
    setAttr R_anStretch_pma1.operation 2;
    connectAttr R_jnt_ankle1.tx R_anStretch_pma1.input1D[0];
    setAttr R_anStretch_pma1.input1D[1] `getAttr R_jnt_ankle1.tx`;
    createNode -n R_anStretch_mdn3 multiplyDivide;
    connectAttr R_anStretch_pma1.output1D R_anStretch_mdn3.input1X;
    connectAttr R_anStretch_pma1.output1D R_anStretch_mdn3.input1Y;
    setAttr R_anStretch_mdn3.input2X .25;
    setAttr R_anStretch_mdn3.input2Y .75;
    connectAttr R_anStretch_mdn3.outputX R_loc_anTwist1.tx;
    connectAttr R_anStretch_mdn3.outputY R_loc_anTwist2.tx;
    
    // leaf joints
    
    // left bicep
    joint -n L_jnt_bicep1 L_jnt_shTwist1;
    joint -n L_jnt_bicep2 L_jnt_shTwist2;
    joint -n L_jnt_bicep3 L_jnt_shTwist3;
    
    createNode -n L_bicep_mdn1 multiplyDivide;
    setAttr L_bicep_mdn1.operation 2;
    connectAttr L_jnt_elbow1.rz L_bicep_mdn1.input1X;
    connectAttr L_jnt_elbow1.rz L_bicep_mdn1.input1Y;
    connectAttr L_jnt_elbow1.rz L_bicep_mdn1.input1Z;
    setAttr L_bicep_mdn1.input2X 90;
    setAttr L_bicep_mdn1.input2Y 120;
    setAttr L_bicep_mdn1.input2Z -360;
    
    createNode -n L_bicep_ble1 blendColors;
    connectAttr L_bicep_mdn1.outputX L_bicep_ble1.color1R;
    connectAttr L_bicep_mdn1.outputY L_bicep_ble1.color1G;
    connectAttr L_bicep_mdn1.outputZ L_bicep_ble1.color1B;
    setAttr L_bicep_ble1.color2R 0;
    setAttr L_bicep_ble1.color2G 0;
    setAttr L_bicep_ble1.color2B 0;
    
    connectAttr L_bicep_ble1.outputR L_jnt_bicep1.ty;
    connectAttr L_bicep_ble1.outputG L_jnt_bicep2.ty;
    connectAttr L_bicep_ble1.outputB L_jnt_bicep3.ty;
    
    connectAttr L_jnt_shTwist1.s L_jnt_bicep1.s;
    connectAttr L_jnt_shTwist2.s L_jnt_bicep2.s;
    connectAttr L_jnt_shTwist3.s L_jnt_bicep3.s;
    
    // right bicep
    joint -n R_jnt_bicep1 R_jnt_shTwist1;
    joint -n R_jnt_bicep2 R_jnt_shTwist2;
    joint -n R_jnt_bicep3 R_jnt_shTwist3;
    
    createNode -n R_bicep_mdn1 multiplyDivide;
    setAttr R_bicep_mdn1.operation 2;
    connectAttr R_jnt_elbow1.rz R_bicep_mdn1.input1X;
    connectAttr R_jnt_elbow1.rz R_bicep_mdn1.input1Y;
    connectAttr R_jnt_elbow1.rz R_bicep_mdn1.input1Z;
    setAttr R_bicep_mdn1.input2X -90;
    setAttr R_bicep_mdn1.input2Y -120;
    setAttr R_bicep_mdn1.input2Z 360;
    
    createNode -n R_bicep_ble1 blendColors;
    connectAttr R_bicep_mdn1.outputX R_bicep_ble1.color1R;
    connectAttr R_bicep_mdn1.outputY R_bicep_ble1.color1G;
    connectAttr R_bicep_mdn1.outputZ R_bicep_ble1.color1B;
    setAttr R_bicep_ble1.color2R 0;
    setAttr R_bicep_ble1.color2G 0;
    setAttr R_bicep_ble1.color2B 0;
    
    connectAttr R_bicep_ble1.outputR R_jnt_bicep1.ty;
    connectAttr R_bicep_ble1.outputG R_jnt_bicep2.ty;
    connectAttr R_bicep_ble1.outputB R_jnt_bicep3.ty;
    
    connectAttr R_jnt_shTwist1.s R_jnt_bicep1.s;
    connectAttr R_jnt_shTwist2.s R_jnt_bicep2.s;
    connectAttr R_jnt_shTwist3.s R_jnt_bicep3.s;
    
    // check if user wants facial rig
    if (`checkBox -q -v frCB`){
        parent L_jnt_brow1 jnt_neck2;
        parent L_jnt_brow2 jnt_neck2;
        parent L_jnt_brow3 jnt_neck2;
        parent L_jnt_nostril1 jnt_neck2;
        parent L_jnt_cheekBone1 jnt_neck2;
        parent L_jnt_cheek1 jnt_neck2;
        parent L_jnt_uppMouth1 jnt_neck2;
        parent L_jnt_cornerMouth1 jnt_neck2;
        parent L_jnt_lowMouth1 jnt_neck2;
        mirrorJoint -myz -sr "L" "R" L_jnt_brow1;
        mirrorJoint -myz -sr "L" "R" L_jnt_brow2;
        mirrorJoint -myz -sr "L" "R" L_jnt_brow3;
        mirrorJoint -myz -sr "L" "R" L_jnt_nostril1;
        mirrorJoint -myz -sr "L" "R" L_jnt_cheekBone1;
        mirrorJoint -myz -sr "L" "R" L_jnt_cheek1;
        mirrorJoint -myz -sr "L" "R" L_jnt_uppMouth1;
        mirrorJoint -myz -sr "L" "R" L_jnt_cornerMouth1;
        mirrorJoint -myz -sr "L" "R" L_jnt_lowMouth1;
        delete ctr_faceMover1;
    }
    
    // clean up
    parent -w enj_root1; 
} // end makeSkel ()

// makes a certain type of controller
global proc ctrType (string $name, string $parent, int $ori, int $type, int $rot[], float $scale[])
{
    // circle
    if ($type==1){
        circle -ch 0 -n $name;
        xform -ws -s $scale[0] $scale[1] $scale[2] $name;
    }
    // square
    if ($type==2){
        curve -n $name -d 1 -p -1 -1 0 -p -1 1 0 -p 1 1 0 -p 1 -1 0 -p -1 -1 0 -k 0 -k 1 -k 2 -k 3 -k 4;
        xform -ws -s $scale[0] $scale[1] $scale[2] $name;
    }
    // box
    if ($type==3){
        curve -n $name -d 1 -p 1.372552 1.372552 1.372552 -p 1.372552 1.372552 -1.372552 -p -1.372552 1.372552 -1.372552 -p -1.372552 1.372552 1.372552 -p -1.372552 -1.372552 1.372552 -p 1.372552 -1.372552 1.372552 -p 1.372552 1.372552 1.372552 -p -1.372552 1.372552 1.372552 -p -1.372552 1.372552 -1.372552 -p -1.372552 -1.372552 -1.372552 -p -1.372552 -1.372552 1.372552 -p 1.372552 -1.372552 1.372552 -p 1.372552 -1.372552 -1.372552 -p -1.372552 -1.372552 -1.372552 -p -1.372552 1.372552 -1.372552 -p 1.372552 1.372552 -1.372552 -p 1.372552 -1.372552 -1.372552 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16;
        xform -ws -s $scale[0] $scale[1] $scale[2] $name;
    }
    // sphere
    if ($type==4){
        circle -ch 0 -d 1 -n $name;
        xform -ws -s $scale[0] $scale[1] $scale[2] $name;
    }
    // locator
    if ($type==5){
        spaceLocator -n $name;
        xform -ws -s $scale[0] $scale[1] $scale[2] $name;
    }
    // diamond thing
    if ($type==6){
        curve -n $name -d 1 -p 0 0 0 -p 0 4 0 -p 0 6 -2 -p 0 8 0 -p 0 6 2 -p 0 4 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 ;
        xform -ws -s $scale[0] $scale[1] $scale[2] $name;
    }
    // make groups then snap to parent
    string $drv = `substitute "ctr" $name "drv"`;
    group -n $drv $name;
    string $off = `substitute "ctr" $name "off"`;
    group -n $off $drv;
    snapObj ($off, $parent, $ori);
    xform -os -r -ro $rot[0] $rot[1] $rot[2] $name;
    makeIdentity -a 1 -r 1 -s 1 $name;
} // end ctrType ()

global proc makeControls ()
{
    // lock button
    button -e-en 0 mcB;
    
    // get user input
    int $spineJnts = `intSliderGrp -q -v sjIS`;
    int $fingers   = `intSliderGrp -q -v fiIS`;
    
    // setup our skeleton first
    makeSkel ();
    float $ctrScale = `getAttr ctr_skelMover1.sy`;
    delete ctr_skelMover1;
    
    // cleanup scene
    for ($i=1; objExists(("transform"+$i)); $i++)
        makeIdentity -a 1 -s 1 ("transform"+$i);
    if (size(`listRelatives -p enj_root1`) > 0) 
        parent -w enj_root1;
    for ($i=1; objExists(("transform"+$i)); $i++)
        delete ("transform"+$i);
    
    // place control objects
    group -em -n sideCtr1;
    
    ctrType ("ctr_mover1","sideCtr1",0,2,{90,0,0},{20*$ctrScale,20*$ctrScale,20*$ctrScale});
    ctrType ("ctr_root1","enj_root1",1,3,{0,0,0},{1*$ctrScale,10*$ctrScale,10*$ctrScale});
    ctrType ("ctr_hips1","jnt_hips1",1,3,{0,0,0},{4*$ctrScale,8*$ctrScale,8*$ctrScale});
    for ($i=1; $i<$spineJnts+1; $i++)
        ctrType (("ctr_spineFK"+$i),("jnt_spine"+$i),1,1,{0,90,0},{4*$ctrScale,8*$ctrScale,8*$ctrScale});
    ctrType ("ctr_spineIK1",("jnt_spine"+$spineJnts),1,3,{0,0,0},{4*$ctrScale,8*$ctrScale,8*$ctrScale});
    ctrType ("ctr_head1","jnt_neck2",1,3,{0,0,0},{4*$ctrScale,4*$ctrScale,4*$ctrScale});
    
    ctrType ("L_ctr_legIK1","L_jnt_ankle1",0,3,{0,0,0},{4*$ctrScale,4*$ctrScale,8*$ctrScale});
    parent L_off_legIK1 sideCtr1;
    ctrType ("L_ctr_armIK1","L_jnt_wrist1",1,3,{0,0,0},{4*$ctrScale,4*$ctrScale,2*$ctrScale});
    parent L_off_armIK1 sideCtr1;
    ctrType ("L_ctr_clavicle1","L_jnt_clavicle1",1,1,{90,0,0},{4*$ctrScale,4*$ctrScale,4*$ctrScale});
    parent L_off_clavicle1 sideCtr1;
    ctrType ("L_ctr_shoulderFK1","L_drj_shoulder1",1,1,{90,0,0},{4*$ctrScale,4*$ctrScale,4*$ctrScale});
    parent L_off_shoulderFK1 sideCtr1;
    ctrType ("L_ctr_elbowFK1","L_jnt_elbow1",1,1,{90,0,0},{4*$ctrScale,4*$ctrScale,4*$ctrScale});
    parent L_off_elbowFK1 sideCtr1;
    ctrType ("L_ctr_wristFK1","L_jnt_wrist1",1,1,{90,0,0},{4*$ctrScale,4*$ctrScale,4*$ctrScale});
    parent L_off_wristFK1 sideCtr1;
    ctrType ("L_ctr_finger1","L_jnt_wrist1",1,6,{-90,0,0},{1*$ctrScale,1*$ctrScale,1*$ctrScale});
    snapObj ("L_ctr_finger1","L_jnt_wrist1",1);
    parent L_off_finger1 sideCtr1;
    
    // bendy controls
    ctrType ("L_ctr_armBend1","L_jnt_shTwist2",1,1,{0,90,0},{4*$ctrScale,4*$ctrScale,4*$ctrScale});
    parent L_off_armBend1 sideCtr1;
    ctrType ("L_ctr_armBend2","L_jnt_wrTwist2",1,1,{0,90,0},{4*$ctrScale,4*$ctrScale,4*$ctrScale});
    parent L_off_armBend2 sideCtr1;
    ctrType ("L_ctr_legBend1","L_jnt_hpTwist2",1,1,{0,90,0},{4*$ctrScale,4*$ctrScale,4*$ctrScale});
    parent L_off_legBend1 sideCtr1;
    ctrType ("L_ctr_legBend2","L_jnt_anTwist2",1,1,{0,90,0},{4*$ctrScale,4*$ctrScale,4*$ctrScale});
    parent L_off_legBend2 sideCtr1;
    ctrType ("ctr_neckBend1","jnt_neTwist2",1,1,{0,90,0},{4*$ctrScale,4*$ctrScale,4*$ctrScale});
    
    // check for facial rig
    if (`checkBox -q -v frCB`){
        ctrType ("ctr_jaw1","jnt_jaw1",1,1,{0,0,0},{1*$ctrScale,1*$ctrScale,1*$ctrScale});
        
        ctrType ("L_ctr_eyelid1","L_jnt_eyelid1",1,1,{0,0,0},{1*$ctrScale,1*$ctrScale,1*$ctrScale});
        snapObj ("L_off_eyelid1","L_jnt_eyelid1",1);
        parent L_off_eyelid1 sideCtr1;
        ctrType ("L_ctr_eyelid2","L_jnt_eyelid2",1,1,{0,0,0},{1*$ctrScale,1*$ctrScale,1*$ctrScale});
        snapObj ("L_off_eyelid2","L_jnt_eyelid2",1);
        parent L_off_eyelid2 sideCtr1;
        
        ctrType ("L_ctr_brow1","L_jnt_brow1",1,3,{0,0,0},{.25*$ctrScale,.25*$ctrScale,.25*$ctrScale});
        parent L_off_brow1 sideCtr1;
        ctrType ("L_ctr_brow2","L_jnt_brow2",1,3,{0,0,0},{.25*$ctrScale,.25*$ctrScale,.25*$ctrScale});
        parent L_off_brow2 sideCtr1;
        ctrType ("L_ctr_brow3","L_jnt_brow3",1,3,{0,0,0},{.25*$ctrScale,.25*$ctrScale,.25*$ctrScale});
        parent L_off_brow3 sideCtr1;
        ctrType ("L_ctr_nostril1","L_jnt_nostril1",1,3,{0,0,0},{.25*$ctrScale,.25*$ctrScale,.25*$ctrScale});
        parent L_off_nostril1 sideCtr1;
        ctrType ("L_ctr_cheekBone1","L_jnt_cheekBone1",1,3,{0,0,0},{.25*$ctrScale,.25*$ctrScale,.25*$ctrScale});
        parent L_off_cheekBone1 sideCtr1;
        ctrType ("L_ctr_cheek1","L_jnt_cheek1",1,3,{0,0,0},{.25*$ctrScale,.25*$ctrScale,.25*$ctrScale});
        parent L_off_cheek1 sideCtr1;
        ctrType ("L_ctr_uppMouth1","L_jnt_uppMouth1",1,3,{0,0,0},{.25*$ctrScale,.25*$ctrScale,.25*$ctrScale});
        parent L_off_uppMouth1 sideCtr1;
        ctrType ("L_ctr_cornerMouth1","L_jnt_cornerMouth1",1,3,{0,0,0},{.25*$ctrScale,.25*$ctrScale,.25*$ctrScale});
        parent L_off_cornerMouth1 sideCtr1;
        ctrType ("L_ctr_lowMouth1","L_jnt_lowMouth1",1,3,{0,0,0},{.25*$ctrScale,.25*$ctrScale,.25*$ctrScale});
        parent L_off_lowMouth1 sideCtr1;
        ctrType ("ctr_toung1","jnt_toung2",1,3,{0,0,0},{.75*$ctrScale,.75*$ctrScale,$ctrScale});
    }
       
    // add custom attributes
    addAttr -ln "options" -k 1 ctr_mover1;
    setAttr -lock 1 ctr_mover1.options;
    addAttr -ln "globalScale" -k 1 -dv 100 -min 0.01 ctr_mover1;
    addAttr -ln "controlVisibility" -k 1 -dv 1 -min 0 -max 1 ctr_mover1;
    // leg IK   
    addAttr -ln "options" -k 1 L_ctr_legIK1;
    setAttr -lock 1 L_ctr_legIK1.options;
    addAttr -ln "knee" -at "float" -k 1 L_ctr_legIK1;
    addAttr -ln "poleVector" -at "float" -min 0 -max 1 -dv 0 -k 1 L_ctr_legIK1;
    if (`checkBox -q -v stCB`){
        addAttr -ln stretch -k 1 -at double -min 0 -max 1 -dv 0 L_ctr_legIK1;
        addAttr -ln stretchAmt -k 1 -at double -min 0 -max 1 -dv 1 L_ctr_legIK1;
        }
    addAttr -ln "reverseFoot" -k 1 L_ctr_legIK1;
    setAttr -lock 1 L_ctr_legIK1.reverseFoot;
    addAttr -ln "ball" -at "float" -k 1 L_ctr_legIK1;
    addAttr -ln "bank" -at "float" -k 1 L_ctr_legIK1;
    addAttr -ln "sideBank" -at "float" -k 1 L_ctr_legIK1;
    addAttr -ln "toePivot" -at "float" -k 1 L_ctr_legIK1;
    addAttr -ln "heelPivot" -at "float" -k 1 L_ctr_legIK1;
    addAttr -ln "parents" -k 1 L_ctr_legIK1;
    setAttr -lock 1 L_ctr_legIK1.parents;
    addAttr -ln "hips" -at "float" -k 1 -dv 0 -min 0 -max 1 L_ctr_legIK1;
    // root
    addAttr -ln "ikFk" -k 1 ctr_root1;
    setAttr -lock 1 ctr_root1.ikFk;
    addAttr -ln "leftArm" -at "float" -k 1 -min 0 -max 1 ctr_root1;
    addAttr -ln "rightArm" -at "float" -k 1 -min 0 -max 1 ctr_root1;
    addAttr -ln "spine" -at "float" -k 1 -min 0 -max 1 ctr_root1;
    addAttr -ln "options" -k 1 ctr_root1;
    setAttr -lock 1 ctr_root1.options;
    addAttr -ln "bendy" -at "float" -k 1 -dv 0 -min 0 -max 1 ctr_root1;
    if (`checkBox -q -v frCB`){
        addAttr -ln "faceRig" -at "float" -k 1 -dv 1 -min 0 -max 1 ctr_root1;
        
        addAttr -ln "options" -k 1 ctr_jaw1;
        setAttr -lock 1 ctr_jaw1.options;
        addAttr -ln "stickyLips" -k 1 -dv 0 -min 0 -max 1 ctr_jaw1;
    }
    // head
    addAttr -ln "parents" -k 1 ctr_head1;
    setAttr -lock 1 ctr_head1.parents;
    addAttr -ln "chest" -at "float" -k 1 -dv 1 -min 0 -max 1 ctr_head1;
    // shoulder FK
    addAttr -ln "parents" -k 1 L_ctr_shoulderFK1;
    setAttr -lock 1 L_ctr_shoulderFK1.parents;
    addAttr -ln "chest" -at "float" -k 1 -dv 1 -min 0 -max 1 L_ctr_shoulderFK1;
    // arm IK
    addAttr -ln options L_ctr_armIK1;
    setAttr -e-channelBox 1 L_ctr_armIK1.options;
    setAttr -lock 1 L_ctr_armIK1.options;
    addAttr -ln elbow -k 1 L_ctr_armIK1;
    addAttr -ln "poleVector" -at "float" -min 0 -max 1 -dv 0 -k 1 L_ctr_armIK1;
    if (`checkBox -q -v stCB`){
        // on/off attr for stretchy
        addAttr -ln stretch -k 1 -at double -min 0 -max 1 -dv 0 L_ctr_armIK1;
        // stretch amount
        addAttr -ln stretchAmt -k 1 -at double -min 0 -max 1 -dv 1 L_ctr_armIK1;
        }
    addAttr -ln "parents" -k 1 L_ctr_armIK1;
    setAttr -lock 1 L_ctr_armIK1.parents;
    addAttr -ln "head" -at "float" -k 1 -dv 0 -min 0 -max 1 L_ctr_armIK1;
    addAttr -ln "chest" -at "float" -k 1 -dv 0 -min 0 -max 1 L_ctr_armIK1;
    addAttr -ln "hips" -at "float" -k 1 -dv 0 -min 0 -max 1 L_ctr_armIK1;
    addAttr -ln "leftFoot" -at "float" -k 1 -dv 0 -min 0 -max 1 L_ctr_armIK1;
    addAttr -ln "rightFoot" -at "float" -k 1 -dv 0 -min 0 -max 1 L_ctr_armIK1;
    
    // fingers
    addAttr -ln "base" -k 1 L_ctr_finger1;
    setAttr -lock 1 L_ctr_finger1.base;
    for ($i=1; $i<$fingers+1; $i++)
        addAttr -ln ("base"+$i) -at "float" -k 1 L_ctr_finger1;
    addAttr -ln "mid" -k 1 L_ctr_finger1;
    setAttr -lock 1 L_ctr_finger1.mid;
    for ($i=1; $i<$fingers+1; $i++)
        addAttr -ln ("mid"+$i) -at "float" -k 1 L_ctr_finger1;
    addAttr -ln "tip" -k 1 L_ctr_finger1;
    setAttr -lock 1 L_ctr_finger1.tip;
    for ($i=1; $i<$fingers+1; $i++)
        addAttr -ln ("tip"+$i) -at "float" -k 1 L_ctr_finger1;
    addAttr -ln "spread" -k 1 L_ctr_finger1;
    setAttr -lock 1 L_ctr_finger1.spread;
    for ($i=1; $i<$fingers+1; $i++)
        addAttr -ln ("spread"+$i) -at "float" -k 1 L_ctr_finger1;
    addAttr -ln "roll" -k 1 L_ctr_finger1;
    setAttr -lock 1 L_ctr_finger1.roll;
    for ($i=1; $i<$fingers+1; $i++)
        addAttr -ln ("roll"+$i) -at "float" -k 1 L_ctr_finger1;
    
    // leaf joint control
    addAttr -ln "options" -k 1 L_ctr_armBend1;
    setAttr -lock 1 L_ctr_armBend1.options;
    addAttr -ln "bicepAmt" -at "float" -k 1 -dv 0.5 -min 0 -max 1 L_ctr_armBend1;
    
} // end makeControls ()

global proc setupHierarchy (int $spineJnts, int $fingers)
{
    // mirror controls and drawing overrides
    duplicate sideCtr1;
    xform -ws -s -1 1 1 sideCtr2;
    string $sideGrpL[] = `listRelatives -ad -pa -typ "transform" sideCtr1`;
    string $sideGrpR[] = `listRelatives -ad -pa -typ "transform" sideCtr2`;
    string $newName[] = `listRelatives -ad -typ "transform" sideCtr2`;
    for ($i=0; $i<size($newName); $i++){
        setAttr ($sideGrpR[$i]+".overrideEnabled") 1;
        setAttr ($sideGrpR[$i]+".overrideColor") 13;
        rename $sideGrpR[$i] `substitute "L" $newName[$i] "R"`;
        setAttr ($sideGrpL[$i]+".overrideEnabled") 1;
        setAttr ($sideGrpL[$i]+".overrideColor") 6;
    }
    string $sideGrpL[] = `listRelatives -typ "transform" sideCtr1`;
    string $sideGrpR[] = `listRelatives -typ "transform" sideCtr2`;
    for ($i=0; $i<size($sideGrpL); $i++){
        parent -w $sideGrpL[$i]; parent -w $sideGrpR[$i];
        makeIdentity -a 1 -s 1 $sideGrpR[$i];
    }
    
    // snap mirrored controls into place
    snapObj ("R_off_clavicle1", "R_jnt_clavicle1", 1);
    xform -os -r -s -1 -1 1 R_ctr_clavicle1;
    makeIdentity -a 1 -s 1 R_ctr_clavicle1;
    snapObj ("R_off_shoulderFK1", "R_drj_shoulder1", 1);
    xform -os -r -s -1 -1 1 R_ctr_shoulderFK1;
    makeIdentity -a 1 -s 1 R_ctr_shoulderFK1;
    snapObj ("R_off_elbowFK1", "R_jnt_elbow1", 1);
    xform -os -r -s -1 -1 1 R_ctr_elbowFK1;
    makeIdentity -a 1 -s 1 R_ctr_elbowFK1;
    snapObj ("R_off_wristFK1", "R_jnt_wrist1", 1);
    xform -os -r -s -1 -1 1 R_ctr_wristFK1;
    makeIdentity -a 1 -s 1 R_ctr_wristFK1;
    snapObj ("R_off_armIK1", "R_jnt_wrist1", 1);
    xform -os -r -s -1 -1 1 R_ctr_armIK1;
    makeIdentity -a 1 -s 1 R_ctr_armIK1;
    
    xform -os -r -s -1 1 1 R_ctr_finger1;
    makeIdentity -a 1 -s 1 R_ctr_finger1;
    
    snapObj ("R_off_armBend1", "R_jnt_shTwist2", 1);
    xform -os -r -s -1 -1 1 R_ctr_armBend1;
    makeIdentity -a 1 -s 1 R_ctr_armBend1;
    snapObj ("R_off_armBend2", "R_jnt_wrTwist2", 1);
    xform -os -r -s -1 -1 1 R_ctr_armBend2;
    makeIdentity -a 1 -s 1 R_ctr_armBend2;
    snapObj ("R_off_legBend1", "R_jnt_hpTwist2", 1);
    xform -os -r -s -1 -1 1 R_ctr_legBend1;
    makeIdentity -a 1 -s 1 R_ctr_legBend1;
    snapObj ("R_off_legBend2", "R_jnt_anTwist2", 1);
    xform -os -r -s -1 -1 1 R_ctr_legBend2;
    makeIdentity -a 1 -s 1 R_ctr_legBend2;
    
    if (`checkBox -q -v frCB`){
        xform -os -r -s 1 1 -1 R_ctr_eyelid1;
        makeIdentity -a 1 -s 1 R_ctr_eyelid1;
        xform -os -r -s 1 1 -1 R_ctr_eyelid2;
        makeIdentity -a 1 -s 1 R_ctr_eyelid2;
        snapObj ("R_off_brow1","R_jnt_brow1", 1);
        xform -os -r -s -1 1 -1 R_ctr_brow1;
        makeIdentity -a 1 -s 1 R_ctr_brow1;
        snapObj ("R_off_brow2","R_jnt_brow2", 1);
        xform -os -r -s -1 1 -1 R_ctr_brow2;
        makeIdentity -a 1 -s 1 R_ctr_brow2;
        snapObj ("R_off_brow3","R_jnt_brow3", 1);
        xform -os -r -s -1 1 -1 R_ctr_brow3;
        makeIdentity -a 1 -s 1 R_ctr_brow3;
        snapObj ("R_off_cheekBone1","R_jnt_cheekBone1", 1);
        xform -os -r -s -1 1 -1 R_ctr_cheekBone1;
        makeIdentity -a 1 -s 1 R_ctr_cheekBone1;
        snapObj ("R_off_cheek1","R_jnt_cheek1", 1);
        xform -os -r -s -1 1 -1 R_ctr_cheek1;
        makeIdentity -a 1 -s 1 R_ctr_cheek1;
        snapObj ("R_off_nostril1","R_jnt_nostril1", 1);
        xform -os -r -s -1 1 -1 R_ctr_nostril1;
        makeIdentity -a 1 -s 1 R_ctr_nostril1;
        snapObj ("R_off_uppMouth1","R_jnt_uppMouth1", 1);
        xform -os -r -s -1 1 -1 R_ctr_uppMouth1;
        makeIdentity -a 1 -s 1 R_ctr_uppMouth1;
        snapObj ("R_off_cornerMouth1","R_jnt_cornerMouth1", 1);
        xform -os -r -s -1 1 -1 R_ctr_cornerMouth1;
        makeIdentity -a 1 -s 1 R_ctr_cornerMouth1;
        snapObj ("R_off_lowMouth1","R_jnt_lowMouth1", 1);
        xform -os -r -s -1 1 -1 R_ctr_lowMouth1;
        makeIdentity -a 1 -s 1 R_ctr_lowMouth1;
        setAttr ctr_jaw1.overrideEnabled 1;
        setAttr ctr_jaw1.overrideColor 14;
    }
    
    delete sideCtr1; delete sideCtr2;
    setAttr ctr_mover1.overrideEnabled 1;
    setAttr ctr_mover1.overrideColor 17;
    setAttr ctr_hips1.overrideEnabled 1;
    setAttr ctr_hips1.overrideColor 14;
    setAttr ctr_root1.overrideEnabled 1;
    setAttr ctr_root1.overrideColor 17;
    for ($i=1; $i<$spineJnts; $i++){
        setAttr ("ctr_spineFK"+$i+".overrideEnabled") 1;
        setAttr ("ctr_spineFK"+$i+".overrideColor") 14;
        }
    setAttr ctr_spineIK1.overrideEnabled 1;
    setAttr ctr_spineIK1.overrideColor 14;
    setAttr ctr_head1.overrideEnabled 1;
    setAttr ctr_head1.overrideColor 14;
    setAttr ctr_neckBend1.overrideEnabled 1;
    setAttr ctr_neckBend1.overrideColor 14;
    
    // setup hierarchy
    group -em -n grp_character1;
    parent ctr_mover1 grp_character1;
    delete off_mover1;
    group -em -n grp_IK1;
    group -em -n grp_FK1;
    group -em -n grp_bendy1;
    group -em -n grp_attr1;
    group -n grp_controls1 grp_IK1 grp_FK1 grp_bendy1 grp_attr1;
    parent grp_controls1 ctr_mover1;
    group -em -n grp_locators1;
    group -em -n grp_joints1;
    parent grp_locators1 ctr_mover1;
    parent grp_joints1 ctr_mover1;
    group -em -n grp_extraNodes1;
    group -em -n grp_hiddenNodes1;
    if (!`objExists grp_mesh1`){
        group -em -n grp_mesh1;
        parent grp_mesh1 grp_character1;
        }
    parent grp_extraNodes1 grp_hiddenNodes1 grp_character1;
    if (!`objExists grp_scaleGeo1`){
        group -em -n grp_scaleGeo1;
        parent grp_scaleGeo1 grp_mesh1;
        }
    scaleConstraint ctr_mover1 grp_scaleGeo1;
    
    setAttr grp_locators1.visibility 0;
    setAttr grp_hiddenNodes1.visibility 0;
    
    parent L_off_clavicle1 grp_FK1;
    parent L_off_shoulderFK1 grp_FK1;
    parent L_off_elbowFK1 L_ctr_shoulderFK1;
    parent L_off_wristFK1 L_ctr_elbowFK1;
    parent L_off_finger1 grp_attr1;
    parent R_off_clavicle1 grp_FK1;
    parent R_off_shoulderFK1 grp_FK1;
    parent R_off_elbowFK1 R_ctr_shoulderFK1;
    parent R_off_wristFK1 R_ctr_elbowFK1;
    parent R_off_finger1 grp_attr1;
    parent off_head1 grp_IK1;
    parent off_spineIK1 ctr_root1;
    parent off_spineFK1 ctr_root1;
    for ($i=$spineJnts; $i>1; $i=$i-1)
        parent ("off_spineFK"+$i) ("ctr_spineFK"+($i-1));
    parent off_hips1 ctr_root1;
    parent off_root1 grp_IK1;
    parent L_off_legIK1 grp_IK1;
    parent L_off_armIK1 grp_IK1;
    parent R_off_legIK1 grp_IK1;
    parent R_off_armIK1 grp_IK1;
    parent L_off_armBend1 grp_bendy1;
    parent L_off_armBend2 grp_bendy1;
    parent R_off_armBend1 grp_bendy1;
    parent R_off_armBend2 grp_bendy1;
    parent L_off_legBend1 grp_bendy1;
    parent L_off_legBend2 grp_bendy1;
    parent R_off_legBend1 grp_bendy1;
    parent R_off_legBend2 grp_bendy1;
    parent off_neckBend1 grp_bendy1;
    parent L_drv_rBank1 L_ctr_legIK1;
    parent R_drv_rBank1 R_ctr_legIK1;
    
    parent enj_root1 grp_joints1;
    setAttr grp_joints1.overrideEnabled 1;
    
    if (`checkBox -q -v frCB`){
        group -n grp_faceCtr1 L_off_eyelid1 L_off_eyelid2 R_off_eyelid1 R_off_eyelid2 off_jaw1;
        parent grp_faceCtr1 grp_FK1;
        parent off_toung1 ctr_jaw1;
        group -n grp_lowMouthCtr1 L_off_lowMouth1 R_off_lowMouth1;
        group -n grp_sideMouthCtr1 L_off_cornerMouth1 R_off_cornerMouth1;
        group -n grp_uppMouthCtr1 L_off_uppMouth1 R_off_uppMouth1;
        
        parent L_off_brow1 L_off_brow2 L_off_brow3 L_off_cheek1 L_off_cheekBone1 L_off_nostril1
               R_off_brow1 R_off_brow2 R_off_brow3 R_off_cheek1 R_off_cheekBone1 R_off_nostril1
               grp_lowMouthCtr1 grp_sideMouthCtr1 grp_uppMouthCtr1
               grp_faceCtr1;
        parentConstraint -mo ctr_jaw1 grp_lowMouthCtr1;
        parentConstraint -mo ctr_jaw1 grp_uppMouthCtr1;
        parentConstraint -mo grp_lowMouthCtr1 grp_uppMouthCtr1 grp_sideMouthCtr1;
    }

        
} // end setupHierarchy ()

global proc rigLocators (int $spineJnts)
{
    spaceLocator -n L_loc_foot1;
    parent L_loc_foot1 grp_locators1;
    parentConstraint L_jnt_ankle1 L_loc_foot1;
    
    spaceLocator -n R_loc_foot1;
    parent R_loc_foot1 grp_locators1;
    parentConstraint R_jnt_ankle1 R_loc_foot1;
    
    spaceLocator -n loc_hips1;
    parent loc_hips1 grp_locators1;
    parentConstraint jnt_hips1 loc_hips1;
    
    spaceLocator -n L_loc_hip1;
    parent L_loc_hip1 grp_locators1;
    parentConstraint L_jnt_hip1 L_loc_hip1;
    
    spaceLocator -n R_loc_hip1;
    parent R_loc_hip1 grp_locators1;
    parentConstraint R_jnt_hip1 R_loc_hip1;
    
    spaceLocator -n loc_chest1;
    parent loc_chest1 grp_locators1;
    parentConstraint ("jnt_spine"+$spineJnts) loc_chest1;
    
    spaceLocator -n L_loc_shoulder1;
    parent L_loc_shoulder1 grp_locators1;
    parentConstraint L_jnt_shoulder1 L_loc_shoulder1;
    
    spaceLocator -n R_loc_shoulder1;
    parent R_loc_shoulder1 grp_locators1;
    parentConstraint R_jnt_shoulder1 R_loc_shoulder1;
    
    spaceLocator -n L_loc_wrist1;
    parent L_loc_wrist1 grp_locators1;
    parentConstraint L_jnt_wrist1 L_loc_wrist1;
    
    spaceLocator -n R_loc_wrist1;
    parent R_loc_wrist1 grp_locators1;
    parentConstraint R_jnt_wrist1 R_loc_wrist1;
    
    spaceLocator -n loc_head1;
    parent loc_head1 grp_locators1;
    parentConstraint jnt_neck2 loc_head1;
} // end rigLocators ()

global proc constrainControls (int $spineJnts, int $fingers)
{
    // get user input
    int $spineJnts = `intSliderGrp -q -v sjIS`;
    
    parentConstraint ctr_root1 enj_root1;
    orientConstraint ctr_head1 jnt_neck2;
    orientConstraint ctr_spineIK1 ("jnt_spine"+$spineJnts);
    for($i=1; $i<$spineJnts+1; $i++)
        orientConstraint ("ctr_spineFK"+$i) ("jnt_spine"+$i);
    orientConstraint ctr_hips1 jnt_hips1;
    
    parentConstraint -mo L_jnt_wrist1 L_drv_finger1;
    orientConstraint L_ctr_wristFK1 L_ctr_armIK1 L_jnt_wrist1;
    orientConstraint L_ctr_elbowFK1 L_jnt_elbow1;
    orientConstraint L_ctr_shoulderFK1 L_drj_shoulder1;
    orientConstraint L_ctr_clavicle1 L_jnt_clavicle1;
    pointConstraint L_jnt_shoulder1 L_drv_shoulderFK1;
    parentConstraint -mo loc_chest1 L_drv_clavicle1;
    
    parentConstraint -mo R_jnt_wrist1 R_drv_finger1;
    orientConstraint R_ctr_wristFK1 R_ctr_armIK1 R_jnt_wrist1;
    orientConstraint R_ctr_elbowFK1 R_jnt_elbow1;
    orientConstraint R_ctr_shoulderFK1 R_drj_shoulder1;
    orientConstraint R_ctr_clavicle1 R_jnt_clavicle1;
    pointConstraint R_jnt_shoulder1 R_drv_shoulderFK1;
    parentConstraint -mo loc_chest1 R_drv_clavicle1;
    
    // bendy
    pointConstraint L_drj_shoulder1 L_jnt_elbow1 L_drv_armBend1;
    orientConstraint L_jnt_shTwist2 L_drv_armBend1;
    pointConstraint L_jnt_elbow1 L_jnt_wrist1 L_drv_armBend2;
    orientConstraint L_jnt_wrTwist2 L_drv_armBend2;
    pointConstraint R_drj_shoulder1 R_jnt_elbow1 R_drv_armBend1;
    orientConstraint R_jnt_shTwist2 R_drv_armBend1;
    pointConstraint R_jnt_elbow1 R_jnt_wrist1 R_drv_armBend2;
    orientConstraint R_jnt_wrTwist2 R_drv_armBend2;
    
    pointConstraint L_jnt_hip1 L_jnt_knee1 L_drv_legBend1;
    orientConstraint L_jnt_hpTwist2 L_drv_legBend1;
    pointConstraint L_jnt_knee1 L_jnt_ankle1 L_drv_legBend2;
    orientConstraint L_jnt_anTwist2 L_drv_legBend2;
    pointConstraint R_jnt_hip1 R_jnt_knee1 R_drv_legBend1;
    orientConstraint R_jnt_hpTwist2 R_drv_legBend1;
    pointConstraint R_jnt_knee1 R_jnt_ankle1 R_drv_legBend2;
    orientConstraint R_jnt_anTwist2 R_drv_legBend2;
    
    pointConstraint drj_neck1 jnt_neck2 off_neckBend1;
    orientConstraint jnt_neTwist2 drv_neckBend1;
    
    if (`checkBox -q -v frCB`){
        parentConstraint -mo loc_head1 grp_faceCtr1;
        parentConstraint ctr_jaw1 jnt_jaw1;
        parentConstraint ctr_toung1 jnt_toung2;
        orientConstraint L_ctr_eyelid1 L_jnt_eyelid1;
        orientConstraint L_ctr_eyelid2 L_jnt_eyelid2;
        orientConstraint R_ctr_eyelid1 R_jnt_eyelid1;
        orientConstraint R_ctr_eyelid2 R_jnt_eyelid2;
    
        parentConstraint L_ctr_brow1 L_jnt_brow1;
        parentConstraint L_ctr_brow2 L_jnt_brow2;
        parentConstraint L_ctr_brow3 L_jnt_brow3;
        parentConstraint L_ctr_cheek1 L_jnt_cheek1;
        parentConstraint L_ctr_cheekBone1 L_jnt_cheekBone1;
        parentConstraint L_ctr_nostril1 L_jnt_nostril1;
        parentConstraint L_ctr_uppMouth1 L_jnt_uppMouth1;
        parentConstraint L_ctr_cornerMouth1 L_jnt_cornerMouth1;
        parentConstraint L_ctr_lowMouth1 L_jnt_lowMouth1;
        parentConstraint R_ctr_brow1 R_jnt_brow1;
        parentConstraint R_ctr_brow2 R_jnt_brow2;
        parentConstraint R_ctr_brow3 R_jnt_brow3;
        parentConstraint R_ctr_cheek1 R_jnt_cheek1;
        parentConstraint R_ctr_cheekBone1 R_jnt_cheekBone1;
        parentConstraint R_ctr_nostril1 R_jnt_nostril1;
        parentConstraint R_ctr_uppMouth1 R_jnt_uppMouth1;
        parentConstraint R_ctr_cornerMouth1 R_jnt_cornerMouth1;
        parentConstraint R_ctr_lowMouth1 R_jnt_lowMouth1;
        
        scaleConstraint L_ctr_brow1 L_jnt_brow1;
        scaleConstraint L_ctr_brow2 L_jnt_brow2;
        scaleConstraint L_ctr_brow3 L_jnt_brow3;
        scaleConstraint L_ctr_cheek1 L_jnt_cheek1;
        scaleConstraint L_ctr_cheekBone1 L_jnt_cheekBone1;
        scaleConstraint L_ctr_nostril1 L_jnt_nostril1;
        scaleConstraint L_ctr_uppMouth1 L_jnt_uppMouth1;
        scaleConstraint L_ctr_cornerMouth1 L_jnt_cornerMouth1;
        scaleConstraint L_ctr_lowMouth1 L_jnt_lowMouth1;
        scaleConstraint R_ctr_brow1 R_jnt_brow1;
        scaleConstraint R_ctr_brow2 R_jnt_brow2;
        scaleConstraint R_ctr_brow3 R_jnt_brow3;
        scaleConstraint R_ctr_cheek1 R_jnt_cheek1;
        scaleConstraint R_ctr_cheekBone1 R_jnt_cheekBone1;
        scaleConstraint R_ctr_nostril1 R_jnt_nostril1;
        scaleConstraint R_ctr_uppMouth1 R_jnt_uppMouth1;
        scaleConstraint R_ctr_cornerMouth1 R_jnt_cornerMouth1;
        scaleConstraint R_ctr_lowMouth1 R_jnt_lowMouth1;
    }
    
    // dynamic constraints
    parentConstraint -mo loc_chest1 off_head1;
    connectAttr ctr_head1.chest off_head1_parentConstraint1.loc_chest1W0;
    
    parentConstraint -mo L_loc_foot1 R_loc_foot1 loc_hips1 loc_chest1 loc_head1 L_drv_armIK1;
    connectAttr L_ctr_armIK1.leftFoot  L_drv_armIK1_parentConstraint1.L_loc_foot1W0;
    connectAttr L_ctr_armIK1.rightFoot  L_drv_armIK1_parentConstraint1.R_loc_foot1W1;
    connectAttr L_ctr_armIK1.hips  L_drv_armIK1_parentConstraint1.loc_hips1W2;
    connectAttr L_ctr_armIK1.chest  L_drv_armIK1_parentConstraint1.loc_chest1W3;
    connectAttr L_ctr_armIK1.head  L_drv_armIK1_parentConstraint1.loc_head1W4;
    
    parentConstraint -mo L_loc_foot1 R_loc_foot1 loc_hips1 loc_chest1 loc_head1 R_drv_armIK1;
    connectAttr R_ctr_armIK1.leftFoot  R_drv_armIK1_parentConstraint1.L_loc_foot1W0;
    connectAttr R_ctr_armIK1.rightFoot  R_drv_armIK1_parentConstraint1.R_loc_foot1W1;
    connectAttr R_ctr_armIK1.hips  R_drv_armIK1_parentConstraint1.loc_hips1W2;
    connectAttr R_ctr_armIK1.chest  R_drv_armIK1_parentConstraint1.loc_chest1W3;
    connectAttr R_ctr_armIK1.head  R_drv_armIK1_parentConstraint1.loc_head1W4;
    
    parentConstraint -mo loc_hips1 L_drv_legIK1;
    connectAttr L_ctr_legIK1.hips L_drv_legIK1_parentConstraint1.loc_hips1W0;
    
    parentConstraint -mo loc_hips1 R_drv_legIK1;
    connectAttr R_ctr_legIK1.hips R_drv_legIK1_parentConstraint1.loc_hips1W0;
    
    orientConstraint -mo L_ctr_clavicle1 L_drv_shoulderFK1;
    connectAttr L_ctr_shoulderFK1.chest L_drv_shoulderFK1_orientConstraint1.L_ctr_clavicle1W0;
    
    orientConstraint -mo R_ctr_clavicle1 R_drv_shoulderFK1;
    connectAttr R_ctr_shoulderFK1.chest R_drv_shoulderFK1_orientConstraint1.R_ctr_clavicle1W0;
} // end constrainControls ()

global proc makeIK (int $spineJnts)
{  
    // IK chainz
    string $renamer[];
    
    // leg pv driver joints
    joint -n L_drj_hipPV1 jnt_hips1;
    snapObj("L_drj_hipPV1", "L_jnt_hip1",1);
    joint -n L_drj_anklePV1 L_drj_hipPV1;
    snapObj("L_drj_anklePV1", "L_jnt_ankle1",1);

    makeIdentity -a 1 -t 1 -r 1 L_drj_hipPV1;
    mirrorJoint -mb -myz -sr "L" "R" L_drj_hipPV1;
    
    $renamer = `ikHandle -n L_pIK_legPV1 -sol ikRPsolver -sj L_drj_hipPV1 -ee L_drj_anklePV1`;
    rename $renamer[1] L_eff_legPV1;
    parent L_pIK_legPV1 L_ctr_legIK1;
    setAttr L_pIK_legPV1.visibility 0;
    
    spaceLocator -n L_drv_legPV1;
    snapObj("L_drv_legPV1","L_jnt_ankle1",0);
    xform -r -os -t 1 0 0 L_drv_legPV1;
    parent L_drv_legPV1 L_ctr_legIK1;
    poleVectorConstraint L_drv_legPV1 L_pIK_legPV1;
    
    ctrType ("L_ctr_kneeIK1","L_jnt_knee2",0,5,{0,0,0},{1,1,1});
    setAttr L_ctr_kneeIK1.overrideEnabled 1;
    setAttr L_ctr_kneeIK1.overrideColor 6;
    setAttr L_ctr_kneeIK1.localScale 6 6 6;
    snapObj ("L_ctr_kneeIK1","L_jnt_knee2",0);
    xform -r -os -t 0 0 40 L_off_kneeIK1;
    
    parentConstraint -mo L_drj_anklePV1 L_off_kneeIK1;
    setAttr L_drv_legPV1.visibility 0;
    connectAttr L_ctr_legIK1.poleVector L_drv_kneeIK1.visibility;
    createNode -n L_kneePVdisplay_rev1 reverse;
    connectAttr L_ctr_legIK1.poleVector L_kneePVdisplay_rev1.inputX;
    connectAttr L_kneePVdisplay_rev1.outputX L_off_kneeIK1_parentConstraint1.L_drj_anklePV1W0;
    parent L_off_kneeIK1 grp_IK1;
    
    $renamer = `ikHandle -n R_pIK_legPV1 -sol ikRPsolver -sj R_drj_hipPV1 -ee R_drj_anklePV1`;
    rename $renamer[1] R_eff_legPV1;
    parent R_pIK_legPV1 R_ctr_legIK1;
    setAttr R_pIK_legPV1.visibility 0;
    
    spaceLocator -n R_drv_legPV1;
    snapObj("R_drv_legPV1","R_jnt_ankle1",0);
    xform -r -os -t 1 0 0 R_drv_legPV1;
    parent R_drv_legPV1 R_ctr_legIK1;
    poleVectorConstraint R_drv_legPV1 R_pIK_legPV1;
    
    ctrType ("R_ctr_kneeIK1","R_jnt_knee2",0,5,{0,0,0},{1,1,1});
    setAttr R_ctr_kneeIK1.overrideEnabled 1;
    setAttr R_ctr_kneeIK1.overrideColor 13;
    setAttr R_ctr_kneeIK1.localScale 6 6 6;
    snapObj ("R_ctr_kneeIK1","R_jnt_knee2",0);
    xform -r -os -t 0 0 40 R_off_kneeIK1;
    
    parentConstraint -mo R_drj_anklePV1 R_off_kneeIK1;
    setAttr R_drv_legPV1.visibility 0;
    connectAttr R_ctr_legIK1.poleVector R_drv_kneeIK1.visibility;
    createNode -n R_kneePVdisplay_rev1 reverse;
    connectAttr R_ctr_legIK1.poleVector R_kneePVdisplay_rev1.inputX;
    connectAttr R_kneePVdisplay_rev1.outputX R_off_kneeIK1_parentConstraint1.R_drj_anklePV1W0;
    parent R_off_kneeIK1 grp_IK1;
    
    // arm pv driver joints
    joint -n L_drj_shoulderPV1 L_jnt_clavicle1;
    snapObj ("L_drj_shoulderPV1","L_jnt_shoulder1",1);
    joint -n L_drj_wristPV1 L_drj_shoulderPV1;
    snapObj ("L_drj_wristPV1","L_jnt_wrist1",1);
    makeIdentity -a 1 -t 1 -r 1 L_drj_shoulderPV1;
    
    spaceLocator -n L_drv_armPV1;
    pointConstraint -o 0 5 0 L_ctr_armIK1 L_drv_armPV1;
    
    $renamer = `ikHandle -n L_pIK_armPV1 -sol ikRPsolver -sj L_drj_shoulderPV1 -ee L_drj_wristPV1`;
    poleVectorConstraint L_drv_armPV1 L_pIK_armPV1;
    parent L_drv_armPV1 L_ctr_clavicle1;
    pointConstraint -mo L_ctr_armIK1 L_pIK_armPV1;
    
    joint -n R_drj_shoulderPV1 R_jnt_clavicle1;
    snapObj ("R_drj_shoulderPV1","R_jnt_shoulder1",1);
    joint -n R_drj_wristPV1 R_drj_shoulderPV1;
    snapObj ("R_drj_wristPV1","R_jnt_wrist1",1);
    makeIdentity -a 1 -t 1 -r 1 R_drj_shoulderPV1;
    
    spaceLocator -n R_drv_armPV1;
    pointConstraint -o 0 5 0  R_ctr_armIK1 R_drv_armPV1;
    
    $renamer = `ikHandle -n R_pIK_armPV1 -sol ikRPsolver -sj R_drj_shoulderPV1 -ee R_drj_wristPV1`;
    poleVectorConstraint R_drv_armPV1 R_pIK_armPV1;
    parent R_drv_armPV1 R_ctr_clavicle1;
    pointConstraint -mo R_ctr_armIK1 R_pIK_armPV1;
    
    // arm pv
    ctrType ("L_ctr_elbowIK1","L_jnt_elbow1",1,5,{0,0,0},{1,1,1});
    setAttr L_ctr_elbowIK1.overrideEnabled 1;
    setAttr L_ctr_elbowIK1.overrideColor 6;
    setAttr L_ctr_elbowIK1.localScale 6 6 6;
    snapObj ("L_ctr_elbowIK1","L_jnt_elbow1",1);
    xform -r -os -t 0 -40 0 L_off_elbowIK1;
    
    connectAttr L_ctr_armIK1.elbow L_drj_wristPV1.rx;
    parentConstraint -mo L_drj_wristPV1 L_off_elbowIK1;
    connectAttr L_ctr_armIK1.poleVector L_drv_elbowIK1.visibility;
    createNode -n L_elbowPVdisplay_rev1 reverse;
    connectAttr L_ctr_armIK1.poleVector L_elbowPVdisplay_rev1.inputX;
    connectAttr L_elbowPVdisplay_rev1.outputX L_off_elbowIK1_parentConstraint1.L_drj_wristPV1W0;
    
    parent L_off_elbowIK1 L_drv_armPV1 L_pIK_armPV1 grp_IK1;
    setAttr L_drv_armPV1.visibility 0;
    setAttr L_pIK_armPV1.visibility 0;
    
    ctrType ("R_ctr_elbowIK1","R_jnt_elbow1",1,5,{0,0,0},{1,1,1});
    setAttr R_ctr_elbowIK1.overrideEnabled 1;
    setAttr R_ctr_elbowIK1.overrideColor 13;
    setAttr R_ctr_elbowIK1.localScale 6 6 6;
    snapObj ("R_ctr_elbowIK1","R_jnt_elbow1",1);
    xform -r -os -t 0 40 0 R_off_elbowIK1;
    
    connectAttr R_ctr_armIK1.elbow R_drj_wristPV1.rx;
    parentConstraint -mo R_drj_wristPV1 R_off_elbowIK1;
    connectAttr R_ctr_armIK1.poleVector R_drv_elbowIK1.visibility;
    createNode -n R_elbowPVdisplay_rev1 reverse;
    connectAttr R_ctr_armIK1.poleVector R_elbowPVdisplay_rev1.inputX;
    connectAttr R_elbowPVdisplay_rev1.outputX R_off_elbowIK1_parentConstraint1.R_drj_wristPV1W0;
    
    parent R_off_elbowIK1 R_drv_armPV1 R_pIK_armPV1 grp_IK1;
    setAttr R_drv_armPV1.visibility 0;
    setAttr R_pIK_armPV1.visibility 0;
 
    // make IK curves
    float $locA[] = `xform -q -ws -t L_jnt_elbow1`;
    float $locB[] = `xform -q -ws -t L_ctr_elbowIK1`;
    
    curve -n L_crv_armIK1 -d 1 -p $locA[0] $locA[1] $locA[2] -p $locB[0] $locB[1] $locB[2];
    cluster -n L_cst_armIK1 L_crv_armIK1.cv[0];
    cluster -n L_cst_armIK2 L_crv_armIK1.cv[1];
    parentConstraint L_jnt_elbow1 L_cst_armIK1Handle;
    parentConstraint L_ctr_elbowIK1 L_cst_armIK2Handle;
    setAttr L_crv_armIK1.template 1;
    
    group -n grp_PVclusters1 L_cst_armIK1Handle L_cst_armIK2Handle;
    parent grp_PVclusters1 grp_hiddenNodes1;
    parent L_crv_armIK1 grp_extraNodes1;
    
    $locA = `xform -q -ws -t R_jnt_elbow1`;
    $locB = `xform -q -ws -t R_ctr_elbowIK1`;
    
    curve -n R_crv_armIK1 -d 1 -p $locA[0] $locA[1] $locA[2] -p $locB[0] $locB[1] $locB[2];
    cluster -n R_cst_armIK1 R_crv_armIK1.cv[0];
    cluster -n R_cst_armIK2 R_crv_armIK1.cv[1];
    parentConstraint R_jnt_elbow1 R_cst_armIK1Handle;
    parentConstraint R_ctr_elbowIK1 R_cst_armIK2Handle;
    setAttr R_crv_armIK1.template 1;
    
    parent R_cst_armIK1Handle R_cst_armIK2Handle grp_PVclusters1;
    parent R_crv_armIK1 grp_extraNodes1;
    
    $locA = `xform -q -ws -t L_jnt_knee1`;
    $locB = `xform -q -ws -t L_ctr_kneeIK1`;
    
    curve -n L_crv_legIK1 -d 1 -p $locA[0] $locA[1] $locA[2] -p $locB[0] $locB[1] $locB[2];
    cluster -n L_cst_legIK1 L_crv_legIK1.cv[0];
    cluster -n L_cst_legIK2 L_crv_legIK1.cv[1];
    parentConstraint L_jnt_knee1 L_cst_legIK1Handle;
    parentConstraint L_ctr_kneeIK1 L_cst_legIK2Handle;
    setAttr L_crv_legIK1.template 1;
    
    parent L_cst_legIK1Handle L_cst_legIK2Handle grp_PVclusters1;
    parent L_crv_legIK1 grp_extraNodes1;
    
    $locA = `xform -q -ws -t R_jnt_knee1`;
    $locB = `xform -q -ws -t R_ctr_kneeIK1`;
    
    curve -n R_crv_legIK1 -d 1 -p $locA[0] $locA[1] $locA[2] -p $locB[0] $locB[1] $locB[2];
    cluster -n R_cst_legIK1 R_crv_legIK1.cv[0];
    cluster -n R_cst_legIK2 R_crv_legIK1.cv[1];
    parentConstraint R_jnt_knee1 R_cst_legIK1Handle;
    parentConstraint R_ctr_kneeIK1 R_cst_legIK2Handle;
    setAttr R_crv_legIK1.template 1;
    
    parent R_cst_legIK1Handle R_cst_legIK2Handle grp_PVclusters1;
    parent R_crv_legIK1 grp_extraNodes1;
    
    connectAttr ctr_mover1.controlVisibility grp_extraNodes1.visibility;
    connectAttr ctr_root1.leftArm L_crv_armIK1.visibility;
    connectAttr ctr_root1.rightArm R_crv_armIK1.visibility;
    
    // arms
    $renamer = `ikHandle -n L_pIK_arm1 -sol ikRPsolver -sj L_drj_shoulder1 -ee L_drj_wrist1`;
    rename $renamer[1] L_eff_arm1;
    parent L_pIK_arm1 L_ctr_armIK1;
    setAttr L_pIK_arm1.t 0 0 0;
    poleVectorConstraint L_ctr_elbowIK1 L_pIK_arm1;
    
    $renamer = `ikHandle -n R_pIK_arm1 -sol ikRPsolver -sj R_drj_shoulder1 -ee R_drj_wrist1`;
    rename $renamer[1] R_eff_arm1;
    parent R_pIK_arm1 R_ctr_armIK1;
    setAttr R_pIK_arm1.t 0 0 0;
    poleVectorConstraint R_ctr_elbowIK1 R_pIK_arm1;
    
    // legs
    joint -e -dof y L_jnt_knee1;
    joint -e -dof y L_jnt_knee2;
    joint -e -dof y R_jnt_knee1;
    joint -e -dof y R_jnt_knee2;
    $renamer = `ikHandle -n L_pIK_leg1 -sol ikRPsolver -sj L_jnt_hip1 -ee L_jnt_ankle1`;
    rename $renamer[1] L_eff_leg1;
    parent L_pIK_leg1 L_drv_ballRot1;
    $renamer = `ikHandle -n L_cIK_leg1 -sol ikSCsolver -sj L_jnt_ankle1 -ee L_jnt_ball1`;
    parent L_cIK_leg1 L_drv_toeTap1;
    $renamer = `ikHandle -n L_cIK_leg2 -sol ikSCsolver -sj L_jnt_ball1 -ee L_enj_toe1`;
    parent L_cIK_leg2 L_drv_toeTap1;
    poleVectorConstraint L_ctr_kneeIK1 L_pIK_leg1;
    connectAttr L_ctr_legIK1.knee L_drj_anklePV1.rz;
    
    $renamer = `ikHandle -n R_pIK_leg1 -sol ikRPsolver -sj R_jnt_hip1 -ee R_jnt_ankle1`;
    rename $renamer[1] R_eff_leg1;
    parent R_pIK_leg1 R_drv_ballRot1;
    $renamer = `ikHandle -n R_cIK_leg1 -sol ikSCsolver -sj R_jnt_ankle1 -ee R_jnt_ball1`;
    parent R_cIK_leg1 R_drv_toeTap1;
    $renamer = `ikHandle -n R_cIK_leg2 -sol ikSCsolver -sj R_jnt_ball1 -ee R_enj_toe1`;
    parent R_cIK_leg2 R_drv_toeTap1;
    poleVectorConstraint R_ctr_kneeIK1 R_pIK_leg1;
    connectAttr R_ctr_legIK1.knee R_drj_anklePV1.rz;
    
    // neck
    $renamer = `ikHandle -n pIK_neck1 -sol ikRPsolver -sj drj_neck1 -ee jnt_neck2`;
    rename $renamer[1] eff_neck1;
    parent pIK_neck1 ctr_head1;
    
    // spine    
    $renamer = `ikHandle -n sIK_spine1 -sol ikSplineSolver -sj enj_root1 -ee ("jnt_spine"+$spineJnts) -ccv 1 -scv 0 -tws "linear" -pcv 0 -rtm 0`;
    rename $renamer[1] eff_spine1;
    rename $renamer[2] crv_spine1;
    
    joint -n enj_lowSpine1 -rad 2;
    joint -n enj_uppSpine1 -rad 2;
    
    parent enj_uppSpine1 ctr_spineIK1;
    parent enj_lowSpine1 ctr_hips1;
    
    snapObj ("enj_lowSpine1", "jnt_hips1", 1);
    snapObj ("enj_uppSpine1", ("jnt_spine"+$spineJnts), 1);
    
    skinCluster -n splineSkin1 enj_lowSpine1 enj_uppSpine1 crv_spine1;
    group -n grp_sIKspine1 sIK_spine1 crv_spine1;
    parent grp_sIKspine1 grp_hiddenNodes1;
    
    createNode -n spineTwist_pma1 plusMinusAverage;
    connectAttr ctr_spineIK1.rx spineTwist_pma1.input1D[0];
    connectAttr drv_spineIK1.rx spineTwist_pma1.input1D[1];
    connectAttr spineTwist_pma1.output1D sIK_spine1.twist;
    createNode -n spineRoll_pma1 plusMinusAverage;
    connectAttr ctr_root1.rx spineRoll_pma1.input1D[0];
    connectAttr drv_root1.rx spineRoll_pma1.input1D[1];
    connectAttr spineRoll_pma1.output1D sIK_spine1.roll;
} // end makeIK ()

global proc connectNodes (int $fingers)
{
    // get user input
    int $spineJnts = `intSliderGrp -q -v sjIS`;
    
    // visibility
    connectAttr ctr_mover1.controlVisibility grp_controls1.visibility;
    if (`checkBox -q -v frCB`)
        connectAttr ctr_root1.faceRig grp_faceCtr1.visibility;
    
    // ik fk switch
    connectAttr ctr_root1.leftArm L_pIK_arm1.ikBlend;
    connectAttr ctr_root1.leftArm L_ctr_armIK1.visibility;
    connectAttr ctr_root1.leftArm L_ctr_elbowIK1.visibility;
    connectAttr ctr_root1.leftArm L_jnt_wrist1_orientConstraint1.L_ctr_armIK1W1;
    
    createNode -n L_ikSwitch_bta1 blendTwoAttr;
    setAttr L_ikSwitch_bta1.input[0] 1;
    setAttr L_ikSwitch_bta1.input[1] 0;
    connectAttr ctr_root1.leftArm L_ikSwitch_bta1.attributesBlender;
    
    connectAttr L_ikSwitch_bta1.output L_drj_shoulder1_orientConstraint1.L_ctr_shoulderFK1W0;
    connectAttr L_ikSwitch_bta1.output L_jnt_elbow1_orientConstraint1.L_ctr_elbowFK1W0;
    connectAttr L_ikSwitch_bta1.output L_jnt_wrist1_orientConstraint1.L_ctr_wristFK1W0;
    connectAttr L_ikSwitch_bta1.output L_ctr_shoulderFK1.visibility;
    
    connectAttr ctr_root1.rightArm R_pIK_arm1.ikBlend;
    connectAttr ctr_root1.rightArm R_ctr_armIK1.visibility;
    connectAttr ctr_root1.rightArm R_ctr_elbowIK1.visibility;
    connectAttr ctr_root1.rightArm R_jnt_wrist1_orientConstraint1.R_ctr_armIK1W1;
    
    createNode -n R_ikSwitch_bta1 blendTwoAttr;
    setAttr R_ikSwitch_bta1.input[0] 1;
    setAttr R_ikSwitch_bta1.input[1] 0;
    connectAttr ctr_root1.rightArm R_ikSwitch_bta1.attributesBlender;
    
    connectAttr R_ikSwitch_bta1.output R_drj_shoulder1_orientConstraint1.R_ctr_shoulderFK1W0;
    connectAttr R_ikSwitch_bta1.output R_jnt_elbow1_orientConstraint1.R_ctr_elbowFK1W0;
    connectAttr R_ikSwitch_bta1.output R_jnt_wrist1_orientConstraint1.R_ctr_wristFK1W0;
    connectAttr R_ikSwitch_bta1.output R_ctr_shoulderFK1.visibility;
    
    connectAttr ctr_root1.spine ctr_spineFK1.visibility;
    connectAttr ctr_root1.spine ("jnt_spine"+$spineJnts+"_orientConstraint1.ctr_spineFK"+$spineJnts+"W1");
    
    createNode -n spineIKFK_rev1 reverse;
    connectAttr ctr_root1.spine spineIKFK_rev1.inputX;
    connectAttr spineIKFK_rev1.outputX ("jnt_spine"+$spineJnts+"_orientConstraint1.ctr_spineIK1W0");
    connectAttr spineIKFK_rev1.outputX ctr_spineIK1.visibility;
    connectAttr spineIKFK_rev1.outputX sIK_spine1.ikBlend;
    
    // reverse foot
    
    // left
    // ball
    createNode -n L_ball_cla1 clamp;
    
    connectAttr L_ctr_legIK1.ball L_ball_cla1.inputR;
    setAttr L_ball_cla1.maxR 360;
    connectAttr L_ctr_legIK1.ball L_ball_cla1.inputG;
    setAttr L_ball_cla1.minG -360;
    
    connectAttr -f L_ball_cla1.outputR L_drv_ballRot1.ry;
    connectAttr -f L_ball_cla1.outputG L_drv_toeTap1.ry;
    // bank
    createNode -n L_bank_cla1 clamp;
    
    connectAttr L_ctr_legIK1.bank L_bank_cla1.inputR;
    setAttr L_bank_cla1.maxR 360;
    connectAttr L_ctr_legIK1.bank L_bank_cla1.inputG;
    setAttr L_bank_cla1.minG -360;
    
    connectAttr -f L_bank_cla1.outputR L_drv_tipToe1.ry;
    connectAttr -f L_bank_cla1.outputG L_drv_heelRot1.ry;
    // side bank
    createNode -n L_sideBank_cla1 clamp;
    
    connectAttr L_ctr_legIK1.sideBank L_sideBank_cla1.inputR;
    setAttr L_sideBank_cla1.minR -360;
    connectAttr L_ctr_legIK1.sideBank L_sideBank_cla1.inputG;
    setAttr L_sideBank_cla1.maxG 360;
    
    connectAttr -f L_sideBank_cla1.outputR L_drv_lBank1.rx;
    connectAttr -f L_sideBank_cla1.outputG L_drv_rBank1.rx;
    // toe pivot
    connectAttr L_ctr_legIK1.toePivot L_drv_toePiv1.rz;
    // heel pivot
    connectAttr L_ctr_legIK1.heelPivot L_drv_heelPiv1.rz;
    
    // right
    // ball
    createNode -n R_ball_cla1 clamp;
    
    connectAttr R_ctr_legIK1.ball R_ball_cla1.inputR;
    setAttr R_ball_cla1.maxR 360;
    connectAttr R_ctr_legIK1.ball R_ball_cla1.inputG;
    setAttr R_ball_cla1.minG -360;
    
    connectAttr -f R_ball_cla1.outputR R_drv_ballRot1.ry;
    connectAttr -f R_ball_cla1.outputG R_drv_toeTap1.ry;
    // bank
    createNode -n R_bank_cla1 clamp;
    
    connectAttr R_ctr_legIK1.bank R_bank_cla1.inputR;
    setAttr R_bank_cla1.maxR 360;
    connectAttr R_ctr_legIK1.bank R_bank_cla1.inputG;
    setAttr R_bank_cla1.minG -360;
    
    connectAttr -f R_bank_cla1.outputR R_drv_tipToe1.ry;
    connectAttr -f R_bank_cla1.outputG R_drv_heelRot1.ry;
    // side bank
    createNode -n R_sideBank_cla1 clamp;
    
    connectAttr R_ctr_legIK1.sideBank R_sideBank_cla1.inputR;
    setAttr R_sideBank_cla1.minR -360;
    connectAttr R_ctr_legIK1.sideBank R_sideBank_cla1.inputG;
    setAttr R_sideBank_cla1.maxG 360;
    
    connectAttr -f R_sideBank_cla1.outputR R_drv_lBank1.rx;
    connectAttr -f R_sideBank_cla1.outputG R_drv_rBank1.rx;
    // toe pivot
    connectAttr R_ctr_legIK1.toePivot R_drv_toePiv1.rz;
    // heel pivot
    connectAttr R_ctr_legIK1.heelPivot R_drv_heelPiv1.rz;

    // global scale
    createNode -n globalScale_mdn1 multiplyDivide;
    connectAttr ctr_mover1.globalScale globalScale_mdn1.input1X;
    setAttr globalScale_mdn1.input2X .01;
    connectAttr globalScale_mdn1.outputX ctr_mover1.sx;
    connectAttr globalScale_mdn1.outputX ctr_mover1.sy;
    connectAttr globalScale_mdn1.outputX ctr_mover1.sz;    
    
    // finger controllers
    for ($i=1; $i<$fingers+1; $i++){
        createNode -n ("L_finger_mdn"+$i) multiplyDivide;
        connectAttr ("L_ctr_finger1.base"+$i) ("L_finger_mdn"+$i+".input1X");
        setAttr ("L_finger_mdn"+$i+".input2X") -1;
        connectAttr ("L_ctr_finger1.mid"+$i) ("L_finger_mdn"+$i+".input1Y");
        setAttr ("L_finger_mdn"+$i+".input2Y") -1;
        connectAttr ("L_ctr_finger1.tip"+$i) ("L_finger_mdn"+$i+".input1Z");
        setAttr ("L_finger_mdn"+$i+".input2Z") -1;
        
        connectAttr ("L_finger_mdn"+$i+".outputX") ("L_jnt_Afinger"+$i+".rz");
        connectAttr ("L_finger_mdn"+$i+".outputY") ("L_jnt_Bfinger"+$i+".rz");
        connectAttr ("L_finger_mdn"+$i+".outputZ") ("L_jnt_Cfinger"+$i+".rz");
        connectAttr ("L_ctr_finger1.spread"+$i) ("L_jnt_Afinger"+$i+".ry");
        connectAttr ("L_ctr_finger1.roll"+$i) ("L_jnt_Afinger"+$i+".rx");
    }
    
    for ($i=1; $i<$fingers+1; $i++){
        createNode -n ("R_finger_mdn"+$i) multiplyDivide;
        connectAttr ("R_ctr_finger1.base"+$i) ("R_finger_mdn"+$i+".input1X");
        setAttr ("R_finger_mdn"+$i+".input2X") -1;
        connectAttr ("R_ctr_finger1.mid"+$i) ("R_finger_mdn"+$i+".input1Y");
        setAttr ("R_finger_mdn"+$i+".input2Y") -1;
        connectAttr ("R_ctr_finger1.tip"+$i) ("R_finger_mdn"+$i+".input1Z");
        setAttr ("R_finger_mdn"+$i+".input2Z") -1;
        
        connectAttr ("R_finger_mdn"+$i+".outputX") ("R_jnt_Afinger"+$i+".rz");
        connectAttr ("R_finger_mdn"+$i+".outputY") ("R_jnt_Bfinger"+$i+".rz");
        connectAttr ("R_finger_mdn"+$i+".outputZ") ("R_jnt_Cfinger"+$i+".rz");
        connectAttr ("R_ctr_finger1.spread"+$i) ("R_jnt_Afinger"+$i+".ry");
        connectAttr ("R_ctr_finger1.roll"+$i) ("R_jnt_Afinger"+$i+".rx");
    }
    
    // bendy
    connectAttr L_ctr_armBend1.ty L_jnt_shTwist2.ty;
    connectAttr L_ctr_armBend1.tz L_jnt_shTwist2.tz;
    connectAttr L_ctr_armBend2.ty L_jnt_wrTwist2.ty;
    connectAttr L_ctr_armBend2.tz L_jnt_wrTwist2.tz;
    connectAttr R_ctr_armBend1.ty R_jnt_shTwist2.ty;
    connectAttr R_ctr_armBend1.tz R_jnt_shTwist2.tz;
    connectAttr R_ctr_armBend2.ty R_jnt_wrTwist2.ty;
    connectAttr R_ctr_armBend2.tz R_jnt_wrTwist2.tz;
    
    connectAttr L_ctr_legBend1.ty L_jnt_hpTwist2.ty;
    connectAttr L_ctr_legBend1.tz L_jnt_hpTwist2.tz;
    connectAttr L_ctr_legBend2.ty L_jnt_anTwist2.ty;
    connectAttr L_ctr_legBend2.tz L_jnt_anTwist2.tz;
    connectAttr R_ctr_legBend1.ty R_jnt_hpTwist2.ty;
    connectAttr R_ctr_legBend1.tz R_jnt_hpTwist2.tz;
    connectAttr R_ctr_legBend2.ty R_jnt_anTwist2.ty;
    connectAttr R_ctr_legBend2.tz R_jnt_anTwist2.tz;
    
    connectAttr ctr_neckBend1.ty jnt_neTwist2.ty;
    connectAttr ctr_neckBend1.tz jnt_neTwist2.tz;
    
    connectAttr ctr_root1.bendy grp_bendy1.visibility;
    
    // knee scale
    connectAttr L_jnt_knee1.sy L_jnt_knee2.sy;
    connectAttr L_jnt_knee1.sz L_jnt_knee2.sz;
    connectAttr R_jnt_knee1.sy R_jnt_knee2.sy;
    connectAttr R_jnt_knee1.sz R_jnt_knee2.sz;
    
    // leaf joints
    connectAttr L_ctr_armBend1.bicepAmt L_bicep_ble1.blender;
    connectAttr R_ctr_armBend1.bicepAmt R_bicep_ble1.blender;
    
    // face rig
    if (`checkBox -q -v frCB`){
        connectAttr ctr_jaw1.stickyLips grp_uppMouthCtr1_parentConstraint1.ctr_jaw1W0;
    }
} // end connectNodes ()

global proc stretchy (int $spineJnts)
{    
    // neck
    
    addAttr -ln options ctr_head1;
    setAttr -e-channelBox 1 ctr_head1.options;
    setAttr -lock 1 ctr_head1.options;
    
    addAttr -ln squashStretch -k 1 -at double -min 0 -max 1 -dv 0 ctr_head1;
    addAttr -ln ssAmt -k 1 -at double -min 0 -max 1 -dv 1 ctr_head1;
    
    distanceDimension -sp 0 0 0 -ep 1 0 0;
    rename distanceDimension1 dis_neck1;
    rename locator1 loc_neck1;
    rename locator2 loc_neck2;
    pointConstraint drj_neck1 loc_neck1;
    pointConstraint ctr_head1 loc_neck2;
    
    createNode -n scaleNeck_mdn1 multiplyDivide;
    setAttr scaleNeck_mdn1.operation 2;
    connectAttr dis_neckShape1.distance scaleNeck_mdn1.input1X;
    connectAttr ctr_mover1.sy scaleNeck_mdn1.input2X;
    
    createNode -n neckStretch_bta1 blendTwoAttr;
    setAttr neckStretch_bta1.input[0] `getAttr jnt_neck2.tx`;
    connectAttr scaleNeck_mdn1.outputX neckStretch_bta1.input[1];
    
    connectAttr ctr_head1.squashStretch neckStretch_bta1.attributesBlender;
    connectAttr neckStretch_bta1.output jnt_neck2.tx;
    
    // scale
    createNode -n neckStrSq_mdn1 multiplyDivide;
    setAttr neckStrSq_mdn1.operation 2;
    setAttr neckStrSq_mdn1.input1X `getAttr jnt_neck2.tx`;
    connectAttr jnt_neck2.tx neckStrSq_mdn1.input2X;
    
    createNode -n neckStrSq_bta1 blendTwoAttr;
    setAttr neckStrSq_bta1.input[0] 1;
    connectAttr neckStrSq_mdn1.outputX neckStrSq_bta1.input[1];
    connectAttr ctr_head1.squashStretch neckStrSq_bta1.attributesBlender;
    
    createNode -n neckStrSq_bta2 blendTwoAttr;
    setAttr neckStrSq_bta2.input[0] 1;
    connectAttr neckStrSq_bta1.output neckStrSq_bta2.input[1];
    connectAttr ctr_head1.ssAmt neckStrSq_bta2.attributesBlender;
    
    connectAttr neckStrSq_bta2.output drj_neck1.sy;
    connectAttr neckStrSq_bta2.output drj_neck1.sz;
    
    connectAttr drj_neck1.s jnt_neTwist1.s;
    connectAttr drj_neck1.s jnt_neTwist2.s;
    connectAttr drj_neck1.s jnt_neTwist3.s;
    
    // clean up
    group -n grp_neckStretch1 loc_neck1 loc_neck2 dis_neck1;
    parent grp_neckStretch1 grp_hiddenNodes1;
    
    // spine
    
    // add attributes
    addAttr -ln options ctr_spineIK1;
    setAttr -e-channelBox 1 ctr_spineIK1.options;
    setAttr -lock 1 ctr_spineIK1.options;
    
    addAttr -ln squashStretch -k 1 -at double -min 0 -max 1 -dv 0 ctr_spineIK1;
    addAttr -ln ssAmt -k 1 -at double -min 0 -max 1 -dv 1 ctr_spineIK1;
    
    // curve length
    rename `arclen -ch 1 crv_spine1` spineLen_icr1;
    
    // global scale correction
    createNode -n scaleSpine_mdn1 multiplyDivide;
    setAttr scaleSpine_mdn1.operation 2;
    connectAttr spineLen_icr1.arcLength scaleSpine_mdn1.input1X;
    connectAttr ctr_mover1.sy scaleSpine_mdn1.input2X;
    
    for ($i=1; $i<$spineJnts+1; $i++){
        float $ratio = `getAttr ("jnt_spine"+$i+".tx")` / `getAttr scaleSpine_mdn1.outputX`;
        
        // stretch
        createNode -n ("spineStr_mdn"+$i) multiplyDivide;
        connectAttr scaleSpine_mdn1.outputX ("spineStr_mdn"+$i+".input1X");
        setAttr ("spineStr_mdn"+$i+".input2X") $ratio;
        
        // on/off translate
        createNode -n ("spineSSOn_bta"+$i) blendTwoAttr;
        setAttr ("spineSSOn_bta"+$i+".input[0]") `getAttr ("jnt_spine"+$i+".tx")`;
        connectAttr ("spineStr_mdn"+$i+".outputX") ("spineSSOn_bta"+$i+".input[1]");
        connectAttr ctr_spineIK1.squashStretch ("spineSSOn_bta"+$i+".attributesBlender");
        
        createNode -n ("spineStrFK_pma"+$i) plusMinusAverage;
        setAttr ("spineStrFK_pma"+$i+".input1D[0]") `getAttr ("jnt_spine"+$i+".tx")`;
        connectAttr ("ctr_spineFK"+$i+".tx") ("spineStrFK_pma"+$i+".input1D[1]");
        
        createNode -n ("spineStr_bta"+$i) blendTwoAttr;
        connectAttr ("spineSSOn_bta"+$i+".output") ("spineStr_bta"+$i+".input[0]");
        connectAttr ("spineStrFK_pma"+$i+".output1D") ("spineStr_bta"+$i+".input[1]");
        connectAttr ctr_root1.spine ("spineStr_bta"+$i+".attributesBlender");
        
        connectAttr ("spineStr_bta"+$i+".output") ("jnt_spine"+$i+".tx");
        
        // squash/stretch amount
        createNode -n ("spineStrSq_mdn"+$i) multiplyDivide;
        setAttr ("spineStrSq_mdn"+$i+".operation") 2;
        setAttr ("spineStrSq_mdn"+$i+".input1X") `getAttr scaleSpine_mdn1.outputX`;
        connectAttr scaleSpine_mdn1.outputX ("spineStrSq_mdn"+$i+".input2X");

        createNode -n ("spineStrSq_bta"+$i) blendTwoAttr;
        setAttr ("spineStrSq_bta"+$i+".input[0]") 1;
        connectAttr ("spineStrSq_mdn"+$i+".outputX") ("spineStrSq_bta"+$i+".input[1]");
        connectAttr ctr_spineIK1.ssAmt ("spineStrSq_bta"+$i+".attributesBlender");
        
        // on/off scale
        createNode -n ("spineStrSqOn_bta"+$i) blendTwoAttr;
        setAttr ("spineStrSqOn_bta"+$i+".input[0]") 1;
        connectAttr ("spineStrSq_bta"+$i+".output") ("spineStrSqOn_bta"+$i+".input[1]");
        connectAttr ctr_spineIK1.squashStretch ("spineStrSqOn_bta"+$i+".attributesBlender");
        
        if ($i != $spineJnts){
            connectAttr ("spineStrSqOn_bta"+$i+".output") ("jnt_spine"+$i+".sy");
            connectAttr ("spineStrSqOn_bta"+$i+".output") ("jnt_spine"+$i+".sz");
        }
    }
    
    // left arm
    setAttr ctr_root1.leftArm 1;
    setAttr L_ctr_elbowIK1.t 0 0 0;
    // on/off attr for elbow locking
    addAttr -ln options L_ctr_elbowIK1;
    setAttr -e-channelBox 1 L_ctr_elbowIK1.options;
    setAttr -lock 1 L_ctr_elbowIK1.options;
    addAttr -ln elbowLocking -k 1 -at double -min 0 -max 1 -dv 0 L_ctr_elbowIK1;
    
    string $renamer[];
    // distance tools
    $renamer[0] = `distanceDimension -sp 0 0 0 -ep 2 0 0`;
    rename $renamer[0] L_dis_arm1;
    $renamer[0] = `distanceDimension -sp 0 0 0 -ep 1 0 0`;
    rename $renamer[0] L_dis_arm2;
    $renamer[0] = `distanceDimension -sp 1 0 0 -ep 2 0 0`;
    rename $renamer[0] L_dis_arm3;
    
    rename distanceDimension1 L_dis_armStr1;
    rename distanceDimension2 L_dis_armStr2;
    rename distanceDimension3 L_dis_armStr3;
    rename locator1 L_loc_armStr1;
    rename locator2 L_loc_armStr2;
    rename locator3 L_loc_armStr3;
    
    pointConstraint L_drj_shoulder1 L_loc_armStr1;
    pointConstraint L_ctr_elbowIK1 L_loc_armStr2;
    pointConstraint L_ctr_armIK1 L_loc_armStr3;
    
    // stretch calculation
    float $armLen = `getAttr L_jnt_elbow1.tx` + `getAttr L_jnt_wrist1.tx`;
    
    // global scale correction
    createNode -n L_armStrScale_mdn1 multiplyDivide;
    setAttr L_armStrScale_mdn1.operation 2;
    connectAttr L_dis_arm2.distance L_armStrScale_mdn1.input1X;
    connectAttr ctr_mover1.sy L_armStrScale_mdn1.input2X;
    
    // stretch distance conversion
    createNode -n L_armDistMult_mdn1 multiplyDivide;
    setAttr L_armDistMult_mdn1.operation 2;
    connectAttr L_armStrScale_mdn1.outputX L_armDistMult_mdn1.input1X;
    setAttr L_armDistMult_mdn1.input2X $armLen;
    
    // individual distance calculations
    createNode -n L_armDist_mdn1 multiplyDivide;
    connectAttr L_armDistMult_mdn1.outputX L_armDist_mdn1.input1X;
    connectAttr L_armDistMult_mdn1.outputX L_armDist_mdn1.input1Y;
    setAttr L_armDist_mdn1.input2X `getAttr L_jnt_elbow1.tx`;
    setAttr L_armDist_mdn1.input2Y `getAttr L_jnt_wrist1.tx`;
    
    // condition node
    createNode -n L_armStr_con1 condition;
    setAttr L_armStr_con1.operation 2;
    connectAttr L_armStrScale_mdn1.outputX L_armStr_con1.firstTerm;
    setAttr L_armStr_con1.secondTerm $armLen;
    
    connectAttr L_armDist_mdn1.outputX L_armStr_con1.colorIfTrueR;
    setAttr L_armStr_con1.colorIfFalseR `getAttr L_jnt_elbow1.tx`;
    
    connectAttr L_armDist_mdn1.outputY L_armStr_con1.colorIfTrueG;
    setAttr L_armStr_con1.colorIfFalseG `getAttr L_jnt_wrist1.tx`;
    
    // blend nodes for stretchy switch
    createNode -n L_armStr_ble1 blendColors;
    connectAttr L_ctr_armIK1.stretch L_armStr_ble1.blender;
    connectAttr L_armStr_con1.outColorR L_armStr_ble1.color1R;
    connectAttr L_armStr_con1.outColorG L_armStr_ble1.color1G;
    setAttr L_armStr_ble1.color2R `getAttr L_jnt_elbow1.tx`;
    setAttr L_armStr_ble1.color2G `getAttr L_jnt_wrist1.tx`;
    
    // elbow locking
    // global scale correction
    createNode -n L_elbLockScale_mdn1 multiplyDivide;
    setAttr L_elbLockScale_mdn1.operation 2;
    connectAttr L_dis_arm1.distance L_elbLockScale_mdn1.input1X;
    connectAttr L_dis_arm3.distance L_elbLockScale_mdn1.input1Y;
    connectAttr ctr_mover1.sy L_elbLockScale_mdn1.input2X;
    connectAttr ctr_mover1.sy L_elbLockScale_mdn1.input2Y;
    
    // blend between elbow lock and stretch
    createNode -n L_elbowLock_bta1 blendTwoAttr;
    connectAttr L_armStr_ble1.outputR L_elbowLock_bta1.input[0];
    connectAttr L_elbLockScale_mdn1.outputX L_elbowLock_bta1.input[1];
    
    createNode -n L_elbowLock_bta2 blendTwoAttr;
    connectAttr L_armStr_ble1.outputG L_elbowLock_bta2.input[0];
    connectAttr L_elbLockScale_mdn1.outputY L_elbowLock_bta2.input[1];
    
    connectAttr L_ctr_elbowIK1.elbowLocking L_elbowLock_bta1.attributesBlender;
    connectAttr L_ctr_elbowIK1.elbowLocking L_elbowLock_bta2.attributesBlender;
    
    // blend between FK and IK
    createNode -n L_armStr_pma1 plusMinusAverage;
    connectAttr L_ctr_elbowFK1.tx L_armStr_pma1.input1D[0];
    setAttr L_armStr_pma1.input1D[1] `getAttr L_jnt_elbow1.tx`;
    
    createNode -n L_armStr_pma2 plusMinusAverage;
    connectAttr L_ctr_wristFK1.tx L_armStr_pma2.input1D[0];
    setAttr L_armStr_pma2.input1D[1] `getAttr L_jnt_wrist1.tx`;
    
    createNode -n L_fkik_bta1 blendTwoAttr;
    connectAttr L_armStr_pma1.output1D L_fkik_bta1.input[0];
    connectAttr L_elbowLock_bta1.output L_fkik_bta1.input[1];
    
    createNode -n L_fkik_bta2 blendTwoAttr;
    connectAttr L_armStr_pma2.output1D L_fkik_bta2.input[0];
    connectAttr L_elbowLock_bta2.output L_fkik_bta2.input[1];
    
    connectAttr ctr_root1.leftArm L_fkik_bta1.attributesBlender;
    connectAttr ctr_root1.leftArm L_fkik_bta2.attributesBlender;
    
    connectAttr L_fkik_bta1.output L_jnt_elbow1.tx;
    connectAttr L_fkik_bta2.output L_drj_wrist1.tx;
    
    // stretch
    createNode -n L_strAmt_pma1 plusMinusAverage;
    connectAttr L_jnt_elbow1.tx L_strAmt_pma1.input1D[0];
    connectAttr L_jnt_wrist1.tx L_strAmt_pma1.input1D[1];
    
    createNode -n L_strAmt_mdn1 multiplyDivide;
    setAttr L_strAmt_mdn1.operation 2;
    setAttr L_strAmt_mdn1.input1X `getAttr L_dis_armStr2.distance`;
    connectAttr L_strAmt_pma1.output1D L_strAmt_mdn1.input2X;
    
    createNode -n L_strAmt_cla1 clamp;
    setAttr L_strAmt_cla1.maxR 1;
    connectAttr L_strAmt_mdn1.outputX L_strAmt_cla1.inputR;
    
    // stretch amount blend
    createNode -n L_strAmt_bta1 blendTwoAttr;
    setAttr L_strAmt_bta1.input[0] 1;
    connectAttr L_strAmt_cla1.outputR L_strAmt_bta1.input[1];
    connectAttr L_ctr_armIK1.stretchAmt L_strAmt_bta1.attributesBlender;    
    
    // on / off
    createNode -n L_strAmt_bta2 blendTwoAttr;
    setAttr L_strAmt_bta2.input[0] 1;
    connectAttr L_strAmt_bta1.output L_strAmt_bta2.input[1];
    connectAttr L_ctr_armIK1.stretch L_strAmt_bta2.attributesBlender;
    
    // connect scales
    connectAttr L_strAmt_bta2.output L_jnt_elbow1.sy;
    connectAttr L_strAmt_bta2.output L_jnt_elbow1.sz;
    
    connectAttr L_jnt_elbow1.s L_jnt_shTwist1.s;
    connectAttr L_jnt_elbow1.s L_jnt_shTwist2.s;
    connectAttr L_jnt_elbow1.s L_jnt_shTwist3.s;
    connectAttr L_jnt_elbow1.s L_jnt_wrTwist1.s;
    connectAttr L_jnt_elbow1.s L_jnt_wrTwist2.s;
    connectAttr L_jnt_elbow1.s L_jnt_wrTwist3.s;
    
    // cleanup
    group -n L_grp_armStr1 L_loc_armStr1 L_loc_armStr2 L_loc_armStr3 L_dis_armStr1 L_dis_armStr2 L_dis_armStr3;
    parent L_grp_armStr1 grp_hiddenNodes1;
    
    // right arm
    setAttr ctr_root1.rightArm 1;
    setAttr R_ctr_elbowIK1.t 0 0 0;
    // on/off attr for elbow locking
    addAttr -ln options R_ctr_elbowIK1;
    setAttr -e-channelBox 1 R_ctr_elbowIK1.options;
    setAttr -lock 1 R_ctr_elbowIK1.options;
    addAttr -ln elbowLocking -k 1 -at double -min 0 -max 1 -dv 0 R_ctr_elbowIK1;
    
    string $renamer[];
    // distance tools
    $renamer[0] = `distanceDimension -sp 0 0 0 -ep 2 0 0`;
    rename $renamer[0] R_dis_arm1;
    $renamer[0] = `distanceDimension -sp 0 0 0 -ep 1 0 0`;
    rename $renamer[0] R_dis_arm2;
    $renamer[0] = `distanceDimension -sp 1 0 0 -ep 2 0 0`;
    rename $renamer[0] R_dis_arm3;
    
    rename distanceDimension1 R_dis_armStr1;
    rename distanceDimension2 R_dis_armStr2;
    rename distanceDimension3 R_dis_armStr3;
    
    rename locator1 R_loc_armStr1;
    rename locator2 R_loc_armStr2;
    rename locator3 R_loc_armStr3;
    
    pointConstraint R_drj_shoulder1 R_loc_armStr1;
    pointConstraint R_ctr_elbowIK1 R_loc_armStr2;
    pointConstraint R_ctr_armIK1 R_loc_armStr3;
    
    // stretch calculation
    float $armLen = `getAttr R_jnt_elbow1.tx` + `getAttr R_jnt_wrist1.tx`;
    $armLen *= -1;
    
    // global scale correction
    createNode -n R_armStrScale_mdn1 multiplyDivide;
    setAttr R_armStrScale_mdn1.operation 2;
    connectAttr R_dis_arm2.distance R_armStrScale_mdn1.input1X;
    connectAttr ctr_mover1.sy R_armStrScale_mdn1.input2X;
    
    // stretch distance conversion
    createNode -n R_armDistMult_mdn1 multiplyDivide;
    setAttr R_armDistMult_mdn1.operation 2;
    connectAttr R_armStrScale_mdn1.outputX R_armDistMult_mdn1.input1X;
    setAttr R_armDistMult_mdn1.input2X $armLen;
    
    // individual distance calculations
    createNode -n R_armDist_mdn1 multiplyDivide;
    connectAttr R_armDistMult_mdn1.outputX R_armDist_mdn1.input1X;
    connectAttr R_armDistMult_mdn1.outputX R_armDist_mdn1.input1Y;
    setAttr R_armDist_mdn1.input2X `getAttr R_jnt_elbow1.tx`;
    setAttr R_armDist_mdn1.input2Y `getAttr R_jnt_wrist1.tx`;
    
    // condition node
    createNode -n R_armStr_con1 condition;
    setAttr R_armStr_con1.operation 2;
    connectAttr R_armStrScale_mdn1.outputX R_armStr_con1.firstTerm;
    setAttr R_armStr_con1.secondTerm $armLen;
    
    connectAttr R_armDist_mdn1.outputX R_armStr_con1.colorIfTrueR;
    setAttr R_armStr_con1.colorIfFalseR `getAttr R_jnt_elbow1.tx`;
    
    connectAttr R_armDist_mdn1.outputY R_armStr_con1.colorIfTrueG;
    setAttr R_armStr_con1.colorIfFalseG `getAttr R_jnt_wrist1.tx`;
    
    // blend nodes for stretchy switch
    createNode -n R_armStr_ble1 blendColors;
    connectAttr R_ctr_armIK1.stretch R_armStr_ble1.blender;
    connectAttr R_armStr_con1.outColorR R_armStr_ble1.color1R;
    connectAttr R_armStr_con1.outColorG R_armStr_ble1.color1G;
    setAttr R_armStr_ble1.color2R `getAttr R_jnt_elbow1.tx`;
    setAttr R_armStr_ble1.color2G `getAttr R_jnt_wrist1.tx`;
    
    // elbow locking
    // global scale correction
    createNode -n R_elbLockScale_mdn1 multiplyDivide;
    setAttr R_elbLockScale_mdn1.operation 2;
    connectAttr R_dis_arm1.distance R_elbLockScale_mdn1.input1X;
    connectAttr R_dis_arm3.distance R_elbLockScale_mdn1.input1Y;
    connectAttr ctr_mover1.sy R_elbLockScale_mdn1.input2X;
    connectAttr ctr_mover1.sy R_elbLockScale_mdn1.input2Y;
    
    // create reverse node for right side case
    createNode -n L_armRev_mdn1 multiplyDivide;
    connectAttr R_elbLockScale_mdn1.outputX L_armRev_mdn1.input1X;
    connectAttr R_elbLockScale_mdn1.outputY L_armRev_mdn1.input1Y;
    setAttr L_armRev_mdn1.input2X -1;
    setAttr L_armRev_mdn1.input2Y -1;
    
    // blend between elbow lock and stretch
    createNode -n R_elbowLock_bta1 blendTwoAttr;
    connectAttr R_armStr_ble1.outputR R_elbowLock_bta1.input[0];
    connectAttr L_armRev_mdn1.outputX R_elbowLock_bta1.input[1];
    
    createNode -n R_elbowLock_bta2 blendTwoAttr;
    connectAttr R_armStr_ble1.outputG R_elbowLock_bta2.input[0];
    connectAttr L_armRev_mdn1.outputY R_elbowLock_bta2.input[1];
    
    connectAttr R_ctr_elbowIK1.elbowLocking R_elbowLock_bta1.attributesBlender;
    connectAttr R_ctr_elbowIK1.elbowLocking R_elbowLock_bta2.attributesBlender;
    
    // blend between FK and IK
    createNode -n R_armStr_pma1 plusMinusAverage;
    connectAttr R_ctr_elbowFK1.tx R_armStr_pma1.input1D[0];
    setAttr R_armStr_pma1.input1D[1] `getAttr R_jnt_elbow1.tx`;
    
    createNode -n R_armStr_pma2 plusMinusAverage;
    connectAttr R_ctr_wristFK1.tx R_armStr_pma2.input1D[0];
    setAttr R_armStr_pma2.input1D[1] `getAttr R_jnt_wrist1.tx`;
    
    createNode -n R_fkik_bta1 blendTwoAttr;
    connectAttr R_armStr_pma1.output1D R_fkik_bta1.input[0];
    connectAttr R_elbowLock_bta1.output R_fkik_bta1.input[1];
    
    createNode -n R_fkik_bta2 blendTwoAttr;
    connectAttr R_armStr_pma2.output1D R_fkik_bta2.input[0];
    connectAttr R_elbowLock_bta2.output R_fkik_bta2.input[1];
    
    connectAttr ctr_root1.rightArm R_fkik_bta1.attributesBlender;
    connectAttr ctr_root1.rightArm R_fkik_bta2.attributesBlender;
    
    connectAttr R_fkik_bta1.output R_jnt_elbow1.tx;
    connectAttr R_fkik_bta2.output R_drj_wrist1.tx;
    
    // stretch
    createNode -n R_strAmt_pma1 plusMinusAverage;
    connectAttr R_jnt_elbow1.tx R_strAmt_pma1.input1D[0];
    connectAttr R_jnt_wrist1.tx R_strAmt_pma1.input1D[1];
    
    createNode -n R_strAmt_mdn1 multiplyDivide;
    setAttr R_strAmt_mdn1.operation 2;
    setAttr R_strAmt_mdn1.input1X (`getAttr R_dis_armStr2.distance`*-1);
    connectAttr R_strAmt_pma1.output1D R_strAmt_mdn1.input2X;
    
    createNode -n R_strAmt_cla1 clamp;
    setAttr R_strAmt_cla1.maxR 1;
    connectAttr R_strAmt_mdn1.outputX R_strAmt_cla1.inputR;
    
    // stretch amount blend
    createNode -n R_strAmt_bta1 blendTwoAttr;
    setAttr R_strAmt_bta1.input[0] 1;
    connectAttr R_strAmt_cla1.outputR R_strAmt_bta1.input[1];
    connectAttr R_ctr_armIK1.stretchAmt R_strAmt_bta1.attributesBlender;    
    
    // on / off
    createNode -n R_strAmt_bta2 blendTwoAttr;
    setAttr R_strAmt_bta2.input[0] 1;
    connectAttr R_strAmt_bta1.output R_strAmt_bta2.input[1];
    connectAttr R_ctr_armIK1.stretch R_strAmt_bta2.attributesBlender;
    
    // connect scales
    connectAttr R_strAmt_bta2.output R_jnt_elbow1.sy;
    connectAttr R_strAmt_bta2.output R_jnt_elbow1.sz;
    
    connectAttr R_jnt_elbow1.s R_jnt_shTwist1.s;
    connectAttr R_jnt_elbow1.s R_jnt_shTwist2.s;
    connectAttr R_jnt_elbow1.s R_jnt_shTwist3.s;
    connectAttr R_jnt_elbow1.s R_jnt_wrTwist1.s;
    connectAttr R_jnt_elbow1.s R_jnt_wrTwist2.s;
    connectAttr R_jnt_elbow1.s R_jnt_wrTwist3.s;
    
    // cleanup
    group -n R_grp_armStr1 R_loc_armStr1 R_loc_armStr2 R_loc_armStr3 R_dis_armStr1 R_dis_armStr2 R_dis_armStr3;
    parent R_grp_armStr1 grp_hiddenNodes1;
    
    // left leg
    setAttr L_ctr_kneeIK1.t 0 0 0;
    // on/off attr for knee locking
    addAttr -ln options L_ctr_kneeIK1;
    setAttr -e-channelBox 1 L_ctr_kneeIK1.options;
    setAttr -lock 1 L_ctr_kneeIK1.options;
    addAttr -ln kneeLocking -k 1 -at double -min 0 -max 1 -dv 0 L_ctr_kneeIK1;
    
    string $renamer[];
    // distance tools
    $renamer[0] = `distanceDimension -sp 0 0 0 -ep 2 0 0`;
    rename $renamer[0] L_dis_leg1;
    $renamer[0] = `distanceDimension -sp 0 0 0 -ep 1 0 0`;
    rename $renamer[0] L_dis_leg2;
    $renamer[0] = `distanceDimension -sp 1 0 0 -ep 2 0 0`;
    rename $renamer[0] L_dis_leg3;
    
    rename distanceDimension1 L_dis_legStr1;
    rename distanceDimension2 L_dis_legStr2;
    rename distanceDimension3 L_dis_legStr3;
    rename locator1 L_loc_legStr1;
    rename locator2 L_loc_legStr2;
    rename locator3 L_loc_legStr3;
    
    pointConstraint L_jnt_hip1 L_loc_legStr1;
    pointConstraint L_ctr_kneeIK1 L_loc_legStr2;
    pointConstraint L_ctr_legIK1 L_loc_legStr3;
    
    // stretch calculation
    float $legLen = `getAttr L_jnt_knee1.tx` + `getAttr L_jnt_ankle1.tx`;
    
    // global scale correction
    createNode -n L_legStrScale_mdn1 multiplyDivide;
    setAttr L_legStrScale_mdn1.operation 2;
    connectAttr L_dis_leg2.distance L_legStrScale_mdn1.input1X;
    connectAttr ctr_mover1.sy L_legStrScale_mdn1.input2X;
    
    // stretch distance conversion
    createNode -n L_legDistMult_mdn1 multiplyDivide;
    setAttr L_legDistMult_mdn1.operation 2;
    connectAttr L_legStrScale_mdn1.outputX L_legDistMult_mdn1.input1X;
    setAttr L_legDistMult_mdn1.input2X $legLen;
    
    // individual distance calculations
    createNode -n L_legDist_mdn1 multiplyDivide;
    connectAttr L_legDistMult_mdn1.outputX L_legDist_mdn1.input1X;
    connectAttr L_legDistMult_mdn1.outputX L_legDist_mdn1.input1Y;
    setAttr L_legDist_mdn1.input2X `getAttr L_jnt_knee1.tx`;
    setAttr L_legDist_mdn1.input2Y `getAttr L_jnt_ankle1.tx`;
    
    // condition node
    createNode -n L_legStr_con1 condition;
    setAttr L_legStr_con1.operation 2;
    connectAttr L_legStrScale_mdn1.outputX L_legStr_con1.firstTerm;
    setAttr L_legStr_con1.secondTerm $legLen;
    
    connectAttr L_legDist_mdn1.outputX L_legStr_con1.colorIfTrueR;
    setAttr L_legStr_con1.colorIfFalseR `getAttr L_jnt_knee1.tx`;
    
    connectAttr L_legDist_mdn1.outputY L_legStr_con1.colorIfTrueG;
    setAttr L_legStr_con1.colorIfFalseG `getAttr L_jnt_ankle1.tx`;
    
    // blend nodes for stretchy switch
    createNode -n L_legStr_ble1 blendColors;
    connectAttr L_ctr_legIK1.stretch L_legStr_ble1.blender;
    connectAttr L_legStr_con1.outColorR L_legStr_ble1.color1R;
    connectAttr L_legStr_con1.outColorG L_legStr_ble1.color1G;
    setAttr L_legStr_ble1.color2R `getAttr L_jnt_knee1.tx`;
    setAttr L_legStr_ble1.color2G `getAttr L_jnt_ankle1.tx`;
    
    // knee locking
    // global scale correction
    createNode -n L_kneeLockScale_mdn1 multiplyDivide;
    setAttr L_kneeLockScale_mdn1.operation 2;
    connectAttr L_dis_leg1.distance L_kneeLockScale_mdn1.input1X;
    connectAttr L_dis_leg3.distance L_kneeLockScale_mdn1.input1Y;
    connectAttr ctr_mover1.sy L_kneeLockScale_mdn1.input2X;
    connectAttr ctr_mover1.sy L_kneeLockScale_mdn1.input2Y;
    
    // blend between knee lock and stretch
    createNode -n L_kneeLock_bta1 blendTwoAttr;
    connectAttr L_legStr_ble1.outputR L_kneeLock_bta1.input[0];
    connectAttr L_kneeLockScale_mdn1.outputX L_kneeLock_bta1.input[1];
    
    createNode -n L_kneeLock_bta2 blendTwoAttr;
    connectAttr L_legStr_ble1.outputG L_kneeLock_bta2.input[0];
    connectAttr L_kneeLockScale_mdn1.outputY L_kneeLock_bta2.input[1];
    
    connectAttr L_ctr_kneeIK1.kneeLocking L_kneeLock_bta1.attributesBlender;
    connectAttr L_ctr_kneeIK1.kneeLocking L_kneeLock_bta2.attributesBlender;
    
    connectAttr L_kneeLock_bta1.output L_jnt_knee1.tx;
    connectAttr L_kneeLock_bta2.output L_jnt_ankle1.tx;
    
    // stretch
    createNode -n L_legStrAmt_mdn1 multiplyDivide;
    setAttr L_legStrAmt_mdn1.operation 2;
    setAttr L_legStrAmt_mdn1.input1X `getAttr L_dis_leg2.distance`;
    connectAttr L_legStrScale_mdn1.outputX L_legStrAmt_mdn1.input2X;
    
    createNode -n L_legStrAmt_cla1 clamp;
    setAttr L_legStrAmt_cla1.maxR 1;
    connectAttr L_legStrAmt_mdn1.outputX L_legStrAmt_cla1.inputR;
    
    // stretch amount blend
    createNode -n L_legStrAmt_bta1 blendTwoAttr;
    setAttr L_legStrAmt_bta1.input[0] 1;
    connectAttr L_legStrAmt_cla1.outputR L_legStrAmt_bta1.input[1];
    connectAttr L_ctr_legIK1.stretchAmt L_legStrAmt_bta1.attributesBlender;    
    
    // on / off
    createNode -n L_legStrAmt_bta2 blendTwoAttr;
    setAttr L_legStrAmt_bta2.input[0] 1;
    connectAttr L_legStrAmt_bta1.output L_legStrAmt_bta2.input[1];
    connectAttr L_ctr_legIK1.stretch L_legStrAmt_bta2.attributesBlender;
    
    // connect scales
    connectAttr L_legStrAmt_bta2.output L_jnt_knee1.sy;
    connectAttr L_legStrAmt_bta2.output L_jnt_knee1.sz;
    
    connectAttr L_jnt_knee1.s L_jnt_hpTwist1.s;
    connectAttr L_jnt_knee1.s L_jnt_hpTwist2.s;
    connectAttr L_jnt_knee1.s L_jnt_hpTwist3.s;
    connectAttr L_jnt_knee1.s L_jnt_anTwist1.s;
    connectAttr L_jnt_knee1.s L_jnt_anTwist2.s;
    connectAttr L_jnt_knee1.s L_jnt_anTwist3.s;
    
    // cleanup
    group -n L_grp_legStr1 L_loc_legStr1 L_loc_legStr2 L_loc_legStr3 L_dis_legStr1 L_dis_legStr2 L_dis_legStr3;
    parent L_grp_legStr1 grp_hiddenNodes1;
    
    // right leg
    setAttr R_ctr_kneeIK1.t 0 0 0;
    // on/off attr for knee locking
    addAttr -ln options R_ctr_kneeIK1;
    setAttr -e-channelBox 1 R_ctr_kneeIK1.options;
    setAttr -lock 1 R_ctr_kneeIK1.options;
    addAttr -ln kneeLocking -k 1 -at double -min 0 -max 1 -dv 0 R_ctr_kneeIK1;
    
    string $renamer[];
    // distance tools
    $renamer[0] = `distanceDimension -sp 0 0 0 -ep 2 0 0`;
    rename $renamer[0] R_dis_leg1;
    $renamer[0] = `distanceDimension -sp 0 0 0 -ep 1 0 0`;
    rename $renamer[0] R_dis_leg2;
    $renamer[0] = `distanceDimension -sp 1 0 0 -ep 2 0 0`;
    rename $renamer[0] R_dis_leg3;
    
    rename distanceDimension1 R_dis_legStr1;
    rename distanceDimension2 R_dis_legStr2;
    rename distanceDimension3 R_dis_legStr3;
    rename locator1 R_loc_legStr1;
    rename locator2 R_loc_legStr2;
    rename locator3 R_loc_legStr3;
    
    pointConstraint R_jnt_hip1 R_loc_legStr1;
    pointConstraint R_ctr_kneeIK1 R_loc_legStr2;
    pointConstraint R_ctr_legIK1 R_loc_legStr3;
    
    // stretch calculation
    float $legLen = `getAttr R_jnt_knee1.tx` + `getAttr R_jnt_ankle1.tx`;
    $legLen *= -1;
    
    // global scale correction
    createNode -n R_legStrScale_mdn1 multiplyDivide;
    setAttr R_legStrScale_mdn1.operation 2;
    connectAttr R_dis_leg2.distance R_legStrScale_mdn1.input1X;
    connectAttr ctr_mover1.sy R_legStrScale_mdn1.input2X;
    
    // stretch distance conversion
    createNode -n R_legDistMult_mdn1 multiplyDivide;
    setAttr R_legDistMult_mdn1.operation 2;
    connectAttr R_legStrScale_mdn1.outputX R_legDistMult_mdn1.input1X;
    setAttr R_legDistMult_mdn1.input2X $legLen;
    
    // individual distance calculations
    createNode -n R_legDist_mdn1 multiplyDivide;
    connectAttr R_legDistMult_mdn1.outputX R_legDist_mdn1.input1X;
    connectAttr R_legDistMult_mdn1.outputX R_legDist_mdn1.input1Y;
    setAttr R_legDist_mdn1.input2X `getAttr R_jnt_knee1.tx`;
    setAttr R_legDist_mdn1.input2Y `getAttr R_jnt_ankle1.tx`;
    
    // condition node
    createNode -n R_legStr_con1 condition;
    setAttr R_legStr_con1.operation 2;
    connectAttr R_legStrScale_mdn1.outputX R_legStr_con1.firstTerm;
    setAttr R_legStr_con1.secondTerm $legLen;
    
    connectAttr R_legDist_mdn1.outputX R_legStr_con1.colorIfTrueR;
    setAttr R_legStr_con1.colorIfFalseR `getAttr R_jnt_knee1.tx`;
    
    connectAttr R_legDist_mdn1.outputY R_legStr_con1.colorIfTrueG;
    setAttr R_legStr_con1.colorIfFalseG `getAttr R_jnt_ankle1.tx`;
    
    // blend nodes for stretchy switch
    createNode -n R_legStr_ble1 blendColors;
    connectAttr R_ctr_legIK1.stretch R_legStr_ble1.blender;
    connectAttr R_legStr_con1.outColorR R_legStr_ble1.color1R;
    connectAttr R_legStr_con1.outColorG R_legStr_ble1.color1G;
    setAttr R_legStr_ble1.color2R `getAttr R_jnt_knee1.tx`;
    setAttr R_legStr_ble1.color2G `getAttr R_jnt_ankle1.tx`;
    
    // knee locking
    // global scale correction
    createNode -n R_kneeLockScale_mdn1 multiplyDivide;
    setAttr R_kneeLockScale_mdn1.operation 2;
    connectAttr R_dis_leg1.distance R_kneeLockScale_mdn1.input1X;
    connectAttr R_dis_leg3.distance R_kneeLockScale_mdn1.input1Y;
    connectAttr ctr_mover1.sy R_kneeLockScale_mdn1.input2X;
    connectAttr ctr_mover1.sy R_kneeLockScale_mdn1.input2Y;
    
    // create reverse node for right side case
    createNode -n R_legRev_mdn1 multiplyDivide;
    connectAttr R_kneeLockScale_mdn1.outputX R_legRev_mdn1.input1X;
    connectAttr R_kneeLockScale_mdn1.outputY R_legRev_mdn1.input1Y;
    setAttr R_legRev_mdn1.input2X -1;
    setAttr R_legRev_mdn1.input2Y -1;
    
    // blend between knee lock and stretch
    createNode -n R_kneeLock_bta1 blendTwoAttr;
    connectAttr R_legStr_ble1.outputR R_kneeLock_bta1.input[0];
    connectAttr R_legRev_mdn1.outputX R_kneeLock_bta1.input[1];
    
    createNode -n R_kneeLock_bta2 blendTwoAttr;
    connectAttr R_legStr_ble1.outputG R_kneeLock_bta2.input[0];
    connectAttr R_legRev_mdn1.outputY R_kneeLock_bta2.input[1];
    
    connectAttr R_ctr_kneeIK1.kneeLocking R_kneeLock_bta1.attributesBlender;
    connectAttr R_ctr_kneeIK1.kneeLocking R_kneeLock_bta2.attributesBlender;
    
    connectAttr R_kneeLock_bta1.output R_jnt_knee1.tx;
    connectAttr R_kneeLock_bta2.output R_jnt_ankle1.tx;
    
    // stretch
    createNode -n R_legStrAmt_mdn1 multiplyDivide;
    setAttr R_legStrAmt_mdn1.operation 2;
    setAttr R_legStrAmt_mdn1.input1X `getAttr R_dis_leg2.distance`;
    connectAttr R_legStrScale_mdn1.outputX R_legStrAmt_mdn1.input2X;
    
    createNode -n R_legStrAmt_cla1 clamp;
    setAttr R_legStrAmt_cla1.maxR 1;
    connectAttr R_legStrAmt_mdn1.outputX R_legStrAmt_cla1.inputR;
    
    // stretch amount blend
    createNode -n R_legStrAmt_bta1 blendTwoAttr;
    setAttr R_legStrAmt_bta1.input[0] 1;
    connectAttr R_legStrAmt_cla1.outputR R_legStrAmt_bta1.input[1];
    connectAttr R_ctr_legIK1.stretchAmt R_legStrAmt_bta1.attributesBlender;    
    
    // on / off
    createNode -n R_legStrAmt_bta2 blendTwoAttr;
    setAttr R_legStrAmt_bta2.input[0] 1;
    connectAttr R_legStrAmt_bta1.output R_legStrAmt_bta2.input[1];
    connectAttr R_ctr_legIK1.stretch R_legStrAmt_bta2.attributesBlender;
    
    // connect scales
    connectAttr R_legStrAmt_bta2.output R_jnt_knee1.sy;
    connectAttr R_legStrAmt_bta2.output R_jnt_knee1.sz;
    
    connectAttr R_jnt_knee1.s R_jnt_hpTwist1.s;
    connectAttr R_jnt_knee1.s R_jnt_hpTwist2.s;
    connectAttr R_jnt_knee1.s R_jnt_hpTwist3.s;
    connectAttr R_jnt_knee1.s R_jnt_anTwist1.s;
    connectAttr R_jnt_knee1.s R_jnt_anTwist2.s;
    connectAttr R_jnt_knee1.s R_jnt_anTwist3.s;
    
    // cleanup
    group -n R_grp_legStr1 R_loc_legStr1 R_loc_legStr2 R_loc_legStr3 R_dis_legStr1 R_dis_legStr2 R_dis_legStr3;
    parent R_grp_legStr1 grp_hiddenNodes1;
    
} // end stretchy ()

global proc setupRig ()
{
    // lock button
    button -e-en 0 srB;
    
    // get user input
    int $spineJnts = `intSliderGrp -q -v sjIS`;
    int $fingers   = `intSliderGrp -q -v fiIS`;
    
    // basic bitches
    setupHierarchy ($spineJnts, $fingers);
    rigLocators ($spineJnts);
    constrainControls ($spineJnts, $fingers);
    makeIK ($spineJnts);
    connectNodes ($fingers);    
    
    // stretchy
    if (`checkBox -q -v stCB`)
        stretchy ($spineJnts);
    
} // end setupRig ()

global proc selectiveHide (string $name, 
                           int $tx, int $ty, int $tz,
                           int $rx, int $ry, int $rz,
                           int $sx, int $sy, int $sz,
                           int $v )
{
    // self-explanatory stuff here
    if ($tx == 1) setAttr -lock 1 -k 0 -channelBox 0 ($name+".tx");
    if ($ty == 1) setAttr -lock 1 -k 0 -channelBox 0 ($name+".ty");
    if ($tz == 1) setAttr -lock 1 -k 0 -channelBox 0 ($name+".tz");
    
    if ($rx == 1) setAttr -lock 1 -k 0 -channelBox 0 ($name+".rx");
    if ($ry == 1) setAttr -lock 1 -k 0 -channelBox 0 ($name+".ry");
    if ($rz == 1) setAttr -lock 1 -k 0 -channelBox 0 ($name+".rz");
    
    if ($sx == 1) setAttr -lock 1 -k 0 -channelBox 0 ($name+".sx");
    if ($sy == 1) setAttr -lock 1 -k 0 -channelBox 0 ($name+".sy");
    if ($sz == 1) setAttr -lock 1 -k 0 -channelBox 0 ($name+".sz");
    
    if ($v  == 1) setAttr -lock 1 -k 0 -channelBox 0 ($name+".visibility");
  
} // End selectiveHide ()

global proc lockHideAttr ()
{
    // lock button
    button -e-en 0 lhB;
    
    // get user input
    $spineJnts = `intSliderGrp -q -v sjIS`;
    $fingers   = `intSliderGrp -q -v fiIS`;
    
    // not much to say here, just a boring M4Cr0 script
    setAttr grp_joints1.visibility 0;
    setAttr enj_uppSpine1.visibility 0;
    setAttr enj_lowSpine1.visibility 0;
    
    setAttr L_drv_rBank1.visibility 0;
    setAttr R_drv_rBank1.visibility 0;
    setAttr L_pIK_arm1.visibility 0;
    setAttr R_pIK_arm1.visibility 0;
    setAttr pIK_neck1.visibility 0;
    
    selectiveHide ("ctr_mover1",     0,0,0,0,0,0,1,1,1,0);
    selectiveHide ("ctr_hips1", 0,0,0,0,0,0,1,1,1,1);
    selectiveHide ("ctr_root1",     0,0,0,0,0,0,1,1,1,1);
    selectiveHide ("ctr_spineIK1",  0,0,0,0,0,0,1,1,1,1);
    selectiveHide ("ctr_head1",   0,0,0,0,0,0,1,1,1,1);
    selectiveHide ("ctr_neckBend1", 1,0,0,1,1,1,1,1,1,1);
    for ($i=1; $i<$spineJnts; $i++)
        selectiveHide (("ctr_spineFK"+$i),  0,1,1,0,0,0,1,1,1,1);
    
    string $side = "L_";
    for ($i=0; $i<2; $i++){
        if ($i==1) $side = "R_";
        if (`checkBox -q -v frCB`){
            selectiveHide (($side+"ctr_eyelid1"),  1,1,1,0,0,0,1,1,1,1);
            selectiveHide (($side+"ctr_eyelid2"),  1,1,1,0,0,0,1,1,1,1);
            }
        
        selectiveHide (($side+"ctr_clavicle1"),  1,1,1,0,0,0,1,1,1,1);
        selectiveHide (($side+"ctr_shoulderFK1"),  1,1,1,0,0,0,1,1,1,1);
        selectiveHide (($side+"ctr_elbowFK1"),     0,1,1,0,0,0,1,1,1,1);
        selectiveHide (($side+"ctr_wristFK1"),     0,1,1,0,0,0,1,1,1,1);
        
        selectiveHide (($side+"ctr_legIK1"),       0,0,0,0,0,0,1,1,1,1);
        selectiveHide (($side+"ctr_kneeIK1"),      0,0,0,1,1,1,1,1,1,1);
        selectiveHide (($side+"ctr_armIK1"),       0,0,0,0,0,0,1,1,1,1);
        selectiveHide (($side+"ctr_elbowIK1"),     0,0,0,1,1,1,1,1,1,1);

        selectiveHide (($side+"ctr_finger1"),      1,1,1,1,1,1,1,1,1,1);
        
        selectiveHide (($side+"ctr_armBend1"),      1,0,0,1,1,1,1,1,1,1);
        selectiveHide (($side+"ctr_armBend2"),      1,0,0,1,1,1,1,1,1,1);
        selectiveHide (($side+"ctr_legBend1"),      1,0,0,1,1,1,1,1,1,1);
        selectiveHide (($side+"ctr_legBend2"),      1,0,0,1,1,1,1,1,1,1);
    }
    // check for facial rig
    if (`checkBox -q -v frCB`){
        selectiveHide ("ctr_jaw1", 0,0,0,0,0,0,1,1,1,1);
        selectiveHide ("ctr_toung1", 0,0,0,0,0,0,1,1,1,1);
        selectiveHide ("L_ctr_brow1",0,0,0,0,0,0,0,0,0,1);
        selectiveHide ("L_ctr_brow2",0,0,0,0,0,0,0,0,0,1);
        selectiveHide ("L_ctr_brow3",0,0,0,0,0,0,0,0,0,1);
        selectiveHide ("L_ctr_cheekBone1",0,0,0,0,0,0,0,0,0,1);
        selectiveHide ("L_ctr_cheek1",0,0,0,0,0,0,0,0,0,1);
        selectiveHide ("L_ctr_uppMouth1",0,0,0,0,0,0,0,0,0,1);
        selectiveHide ("L_ctr_cornerMouth1",0,0,0,0,0,0,0,0,0,1);
        selectiveHide ("L_ctr_lowMouth1",0,0,0,0,0,0,0,0,0,1);
        selectiveHide ("R_ctr_brow1",0,0,0,0,0,0,0,0,0,1);
        selectiveHide ("R_ctr_brow2",0,0,0,0,0,0,0,0,0,1);
        selectiveHide ("R_ctr_brow3",0,0,0,0,0,0,0,0,0,1);
        selectiveHide ("R_ctr_cheekBone1",0,0,0,0,0,0,0,0,0,1);
        selectiveHide ("R_ctr_cheek1",0,0,0,0,0,0,0,0,0,1);
        selectiveHide ("R_ctr_uppMouth1",0,0,0,0,0,0,0,0,0,1);
        selectiveHide ("R_ctr_cornerMouth1",0,0,0,0,0,0,0,0,0,1);
        selectiveHide ("R_ctr_lowMouth1",0,0,0,0,0,0,0,0,0,1);
    }
} // End lockHideAttr ()

global proc boundSkelWin ()
{
    if (`window -q -ex boundSkelWin`) deleteUI boundSkelWin;
    window -title "Bound Skel" -iconName "BnSk" -wh 150 330 boundSkelWin;
    
    rowColumnLayout -nc 1;
        text -al "center" "Prefix";
        textField preTF;
    separator;
    rowColumnLayout -nc 1;
        text -al "left" "Neck twist joints";
        rowColumnLayout -nc 4;
            radioCollection ntRC;
            radioButton -l "None" ne0;
            radioButton -l "One" ne1;
            radioButton -l "Three" ne3;
            setParent..;
         setParent..;
    radioCollection -e -sl ne0 ntRC;
    rowColumnLayout -nc 1;
        text -al "left" "UpperArm twist joints";
        rowColumnLayout -nc 4;
            radioCollection uaRC;
            radioButton -l "None" ua0;
            radioButton -l "One" ua1;
            radioButton -l "Three" ua3;
            setParent..;
         setParent..;
    radioCollection -e -sl ua0 uaRC;
    rowColumnLayout -nc 1;
        text -al "left" "ForeArm twist joints";
        rowColumnLayout -nc 4;
            radioCollection faRC;
            radioButton -l "None" fa0;
            radioButton -l "One" fa1;
            radioButton -l "Three" fa3;
            setParent..;
         setParent..;
    radioCollection -e -sl fa0 faRC;
    rowColumnLayout -nc 1;
        text -al "left" "Thigh twist joints";
        rowColumnLayout -nc 4;
            radioCollection thRC;
            radioButton -l "None" th0;
            radioButton -l "One" th1;
            radioButton -l "Three" th3;
            setParent..;
         setParent..;
    radioCollection -e -sl th0 thRC;
    rowColumnLayout -nc 1;
        text -al "left" "Shin twist joints";
        rowColumnLayout -nc 4;
            radioCollection shRC;
            radioButton -l "None" sh0;
            radioButton -l "One" sh1;
            radioButton -l "Three" sh3;
            setParent..;
         setParent..;
    radioCollection -e -sl sh0 shRC;
    rowColumnLayout -nc 1;
        text -al "left" "Double Knee";
        checkBox dkCB;
        text -al "left" "Double Elbow";
        checkBox deCB;
        setParent..;
    separator;
         button -al "center" -l "Make My Skel" -c boundSkel;
         separator;
         button -al "center" -l "Select My Skel" -c selSkel;
    setParent..;
    
    showWindow;
    
} // End boundSkelWin ()

global proc connectBone (string $bn, string $dr)
{
    parentConstraint $dr $bn;
    connectAttr ($dr+".s") ($bn+".s");
} // End connectBone ()

global proc boundSkel ()
{
    // get user input
    $spineJnts = `intSliderGrp -q -v sjIS`;
    string $prefix = `textField -q -tx preTF`;
        
    // make essential joints
    joint -n Reference -p 0 0 0;
    if (size(`listRelatives -p Reference`) > 0) parent -w;
    //joint -n ($prefix+"Root") enj_root1; parent ($prefix+"Root") Reference;
    //connectBone(($prefix+"Root"), "enj_root1");
    joint -n ($prefix+"Hips") jnt_hips1; parent ($prefix+"Hips") Reference;
    connectBone(($prefix+"Hips"), "jnt_hips1");
    for ($i=1; `objExists ("jnt_spine"+$i)`; $i++){
        joint -n ($prefix+"Spine"+$i) ("jnt_spine"+$i);
        connectBone(($prefix+"Spine"+$i), ("jnt_spine"+$i));
        if ($i==1)
            parent ($prefix+"Spine"+$i) ($prefix+"Hips");
        else
            parent ($prefix+"Spine"+$i) ($prefix+"Spine"+($i-1));
        }
    joint -n ($prefix+"Neck") drj_neck1; parent ($prefix+"Neck") ($prefix+"Spine"+$spineJnts);
    connectBone(($prefix+"Neck"), "drj_neck1");
    joint -n ($prefix+"Head") jnt_neck2; parent ($prefix+"Head") ($prefix+"Neck");
    connectBone(($prefix+"Head"), "jnt_neck2");
    // neck twist
    if (`radioCollection -q -sl ntRC` == "ne1"){
        joint -n ($prefix+"NeckTwist1") ("jnt_neTwist2"); parent ($prefix+"NeckTwist1") ($prefix+"Neck");
        connectBone(($prefix+"NeckTwist1"), ("jnt_neTwist2"));
        }
    if (`radioCollection -q -sl ntRC` == "ne3"){
        joint -n ($prefix+"NeckTwist1") ("jnt_neTwist1"); parent ($prefix+"NeckTwist1") ($prefix+"Neck");
        connectBone(($prefix+"NeckTwist1"), ("jnt_neTwist1"));
        joint -n ($prefix+"NeckTwist2") ("jnt_neTwist2"); parent ($prefix+"NeckTwist2") ($prefix+"Neck");
        connectBone(($prefix+"NeckTwist2"), ("jnt_neTwist2"));
        joint -n ($prefix+"NeckTwist3") ("jnt_neTwist3"); parent ($prefix+"NeckTwist3") ($prefix+"Neck");
        connectBone(($prefix+"NeckTwist3"), ("jnt_neTwist3"));
    }
    // facial rig
    if (`objExists jnt_jaw1`){
        joint -n ($prefix+"Jaw") jnt_jaw1; parent ($prefix+"Jaw") ($prefix+"Head");
        connectBone(($prefix+"Jaw"), "jnt_jaw1");
        joint -n ($prefix+"Toung1") jnt_toung1; parent ($prefix+"Toung1") ($prefix+"Jaw");
        connectBone(($prefix+"Toung1"), "jnt_toung1");
        joint -n ($prefix+"Toung2") jnt_toung2; parent ($prefix+"Toung2") ($prefix+"Toung1");
        connectBone(($prefix+"Toung2"), "jnt_toung2");
    }
    
    string $side = "Left";
    string $drSide = "L_";
    for ($i=0; $i<2; $i++){
        if ($i==1){ $side = "Right"; $drSide = "R_"; }
        joint -n ($prefix+$side+"Hip") ($drSide+"jnt_hip1"); parent ($prefix+$side+"Hip") ($prefix+"Hips");
        connectBone(($prefix+$side+"Hip"), ($drSide+"jnt_hip1"));
        joint -n ($prefix+$side+"Knee1") ($drSide+"jnt_knee1"); parent ($prefix+$side+"Knee1") ($prefix+$side+"Hip");
        connectBone(($prefix+$side+"Knee1"), ($drSide+"jnt_knee1"));
        if (`checkBox -q -v dkCB`){
            joint -n ($prefix+$side+"Knee2") ($drSide+"jnt_knee2"); parent ($prefix+$side+"Knee2") ($prefix+$side+"Knee1");
            connectBone(($prefix+$side+"Knee2"), ($drSide+"jnt_knee2"));
            }
        joint -n ($prefix+$side+"Ankle") ($drSide+"jnt_ankle1"); parent ($prefix+$side+"Ankle") ($prefix+$side+"Knee1");
        connectBone(($prefix+$side+"Ankle"), ($drSide+"jnt_ankle1"));
        joint -n ($prefix+$side+"Ball") ($drSide+"jnt_ball1"); parent ($prefix+$side+"Ball") ($prefix+$side+"Ankle");
        connectBone(($prefix+$side+"Ball"), ($drSide+"jnt_ball1"));
        joint -n ($prefix+$side+"Clavicle") ($drSide+"jnt_clavicle1"); parent ($prefix+$side+"Clavicle") ($prefix+"Spine"+$spineJnts);
        connectBone(($prefix+$side+"Clavicle"), ($drSide+"jnt_clavicle1"));
        joint -n ($prefix+$side+"Shoulder") ($drSide+"jnt_shoulder1"); parent ($prefix+$side+"Shoulder") ($prefix+$side+"Clavicle");
        connectBone(($prefix+$side+"Shoulder"), ($drSide+"jnt_shoulder1"));
        joint -n ($prefix+$side+"Elbow1") ($drSide+"jnt_elbow1"); parent ($prefix+$side+"Elbow1") ($prefix+$side+"Shoulder");
        connectBone(($prefix+$side+"Elbow1"), ($drSide+"jnt_elbow1"));
        if (`checkBox -q -v deCB`){
            joint -n ($prefix+$side+"Elbow2") ($drSide+"jnt_elbow2"); parent ($prefix+$side+"Elbow2") ($prefix+$side+"Elbow1");
            connectBone(($prefix+$side+"Elbow2"), ($drSide+"jnt_elbow2"));
            }
        joint -n ($prefix+$side+"Wrist") ($drSide+"jnt_wrist1"); parent ($prefix+$side+"Wrist") ($prefix+$side+"Elbow1");
        connectBone(($prefix+$side+"Wrist"), ($drSide+"jnt_wrist1"));
        // facial rig
        if (`objExists jnt_jaw1`){
            joint -n ($prefix+$side+"LowerMouth") ($drSide+"jnt_lowMouth1"); parent ($prefix+$side+"LowerMouth") ($prefix+"Head");
            connectBone(($prefix+$side+"LowerMouth"), ($drSide+"jnt_lowMouth1"));
            joint -n ($prefix+$side+"CornerMouth") ($drSide+"jnt_cornerMouth1"); parent ($prefix+$side+"CornerMouth") ($prefix+"Head");
            connectBone(($prefix+$side+"CornerMouth"), ($drSide+"jnt_cornerMouth1"));
            joint -n ($prefix+$side+"UpperMouth") ($drSide+"jnt_uppMouth1"); parent ($prefix+$side+"UpperMouth") ($prefix+"Head");
            connectBone(($prefix+$side+"UpperMouth"), ($drSide+"jnt_uppMouth1"));
            joint -n ($prefix+$side+"Cheek") ($drSide+"jnt_cheek1"); parent ($prefix+$side+"Cheek") ($prefix+"Head");
            connectBone(($prefix+$side+"Cheek"), ($drSide+"jnt_cheek1"));
            joint -n ($prefix+$side+"CheekBone") ($drSide+"jnt_cheekBone1"); parent ($prefix+$side+"CheekBone") ($prefix+"Head");
            connectBone(($prefix+$side+"CheekBone"), ($drSide+"jnt_cheekBone1"));
            joint -n ($prefix+$side+"Nostril") ($drSide+"jnt_nostril1"); parent ($prefix+$side+"Nostril") ($prefix+"Head");
            connectBone(($prefix+$side+"Nostril"), ($drSide+"jnt_nostril1"));
            joint -n ($prefix+$side+"Brow1") ($drSide+"jnt_brow1"); parent ($prefix+$side+"Brow1") ($prefix+"Head");
            connectBone(($prefix+$side+"Brow1"), ($drSide+"jnt_brow1"));
            joint -n ($prefix+$side+"Brow2") ($drSide+"jnt_brow2"); parent ($prefix+$side+"Brow2") ($prefix+"Head");
            connectBone(($prefix+$side+"Brow2"), ($drSide+"jnt_brow2"));
            joint -n ($prefix+$side+"Brow3") ($drSide+"jnt_brow3"); parent ($prefix+$side+"Brow3") ($prefix+"Head");
            connectBone(($prefix+$side+"Brow3"), ($drSide+"jnt_brow3"));
            joint -n ($prefix+$side+"UpperEyelid") ($drSide+"jnt_eyelid1"); parent ($prefix+$side+"UpperEyelid") ($prefix+"Head");
            connectBone(($prefix+$side+"UpperEyelid"), ($drSide+"jnt_eyelid1"));
            joint -n ($prefix+$side+"LowerEyelid") ($drSide+"jnt_eyelid2"); parent ($prefix+$side+"LowerEyelid") ($prefix+"Head");
            connectBone(($prefix+$side+"LowerEyelid"), ($drSide+"jnt_eyelid2"));
            joint -n ($prefix+$side+"Eye") ($drSide+"jnt_eye1"); parent ($prefix+$side+"Eye") ($prefix+"Head");
            connectBone(($prefix+$side+"Eye"), ($drSide+"jnt_eye1"));
        }
        // twist joints
        if (`radioCollection -q -sl uaRC` == "ua1"){
            joint -n ($prefix+$side+"UpperArmTwist1") ($drSide+"jnt_shTwist2"); parent ($prefix+$side+"UpperArmTwist1") ($prefix+$side+"Shoulder");
            connectBone(($prefix+$side+"UpperArmTwist1"), ($drSide+"jnt_shTwist2"));
            joint -n ($prefix+$side+"Bicep1") ($drSide+"jnt_bicep2"); parent ($prefix+$side+"Bicep1") ($prefix+$side+"UpperArmTwist1");
            connectBone(($prefix+$side+"Bicep1"), ($drSide+"jnt_bicep2"));
            }
        if (`radioCollection -q -sl uaRC` == "ua3"){
            joint -n ($prefix+$side+"UpperArmTwist1") ($drSide+"jnt_shTwist1"); parent ($prefix+$side+"UpperArmTwist1") ($prefix+$side+"Shoulder");
            connectBone(($prefix+$side+"UpperArmTwist1"), ($drSide+"jnt_shTwist1"));
            joint -n ($prefix+$side+"UpperArmTwist2") ($drSide+"jnt_shTwist2"); parent ($prefix+$side+"UpperArmTwist2") ($prefix+$side+"Shoulder");
            connectBone(($prefix+$side+"UpperArmTwist2"), ($drSide+"jnt_shTwist2"));
            joint -n ($prefix+$side+"UpperArmTwist3") ($drSide+"jnt_shTwist3"); parent ($prefix+$side+"UpperArmTwist3") ($prefix+$side+"Shoulder");
            connectBone(($prefix+$side+"UpperArmTwist3"), ($drSide+"jnt_shTwist3"));
            
            joint -n ($prefix+$side+"Bicep1") ($drSide+"jnt_bicep1"); parent ($prefix+$side+"Bicep1") ($prefix+$side+"UpperArmTwist1");
            connectBone(($prefix+$side+"Bicep1"), ($drSide+"jnt_bicep1"));
            joint -n ($prefix+$side+"Bicep2") ($drSide+"jnt_bicep2"); parent ($prefix+$side+"Bicep2") ($prefix+$side+"UpperArmTwist2");
            connectBone(($prefix+$side+"Bicep2"), ($drSide+"jnt_bicep2"));
            joint -n ($prefix+$side+"Bicep3") ($drSide+"jnt_bicep3"); parent ($prefix+$side+"Bicep3") ($prefix+$side+"UpperArmTwist3");
            connectBone(($prefix+$side+"Bicep3"), ($drSide+"jnt_bicep3"));
        }
        if (`radioCollection -q -sl faRC` == "fa1"){
            joint -n ($prefix+$side+"ForeArmTwist1") ($drSide+"jnt_wrTwist2"); parent ($prefix+$side+"ForeArmTwist1") ($prefix+$side+"Elbow1");
            connectBone(($prefix+$side+"ForeArmTwist1"), ($drSide+"jnt_wrTwist2"));
            }
        if (`radioCollection -q -sl faRC` == "fa3"){
            joint -n ($prefix+$side+"ForeArmTwist1") ($drSide+"jnt_wrTwist1"); parent ($prefix+$side+"ForeArmTwist1") ($prefix+$side+"Elbow1");
            connectBone(($prefix+$side+"ForeArmTwist1"), ($drSide+"jnt_wrTwist1"));
            joint -n ($prefix+$side+"ForeArmTwist2") ($drSide+"jnt_wrTwist2"); parent ($prefix+$side+"ForeArmTwist2") ($prefix+$side+"Elbow1");
            connectBone(($prefix+$side+"ForeArmTwist2"), ($drSide+"jnt_wrTwist2"));
            joint -n ($prefix+$side+"ForeArmTwist3") ($drSide+"jnt_wrTwist3"); parent ($prefix+$side+"ForeArmTwist3") ($prefix+$side+"Elbow1");
            connectBone(($prefix+$side+"ForeArmTwist3"), ($drSide+"jnt_wrTwist3"));
        }
        if (`radioCollection -q -sl thRC` == "th1"){
            joint -n ($prefix+$side+"ThighTwist1") ($drSide+"jnt_hpTwist2"); parent ($prefix+$side+"ThighTwist1") ($prefix+$side+"Hip");
            connectBone(($prefix+$side+"ThighTwist1"), ($drSide+"jnt_hpTwist2"));
            }
        if (`radioCollection -q -sl thRC` == "th3"){
            joint -n ($prefix+$side+"ThighTwist1") ($drSide+"jnt_hpTwist1"); parent ($prefix+$side+"ThighTwist1") ($prefix+$side+"Hip");
            connectBone(($prefix+$side+"ThighTwist1"), ($drSide+"jnt_hpTwist1"));
            joint -n ($prefix+$side+"ThighTwist2") ($drSide+"jnt_hpTwist2"); parent ($prefix+$side+"ThighTwist2") ($prefix+$side+"Hip");
            connectBone(($prefix+$side+"ThighTwist2"), ($drSide+"jnt_hpTwist2"));
            joint -n ($prefix+$side+"ThighTwist3") ($drSide+"jnt_hpTwist3"); parent ($prefix+$side+"ThighTwist3") ($prefix+$side+"Hip");
            connectBone(($prefix+$side+"ThighTwist3"), ($drSide+"jnt_hpTwist3"));
        }
        if (`radioCollection -q -sl shRC` == "sh1"){
            joint -n ($prefix+$side+"ShinTwist1") ($drSide+"jnt_anTwist2"); parent ($prefix+$side+"ShinTwist1") ($prefix+$side+"Knee1");
            connectBone(($prefix+$side+"ShinTwist1"), ($drSide+"jnt_anTwist2"));
            }
        if (`radioCollection -q -sl shRC` == "sh3"){
            joint -n ($prefix+$side+"ShinTwist1") ($drSide+"jnt_anTwist1"); parent ($prefix+$side+"ShinTwist1") ($prefix+$side+"Knee1");
            connectBone(($prefix+$side+"ShinTwist1"), ($drSide+"jnt_anTwist1"));
            joint -n ($prefix+$side+"ShinTwist2") ($drSide+"jnt_anTwist2"); parent ($prefix+$side+"ShinTwist2") ($prefix+$side+"Knee1");
            connectBone(($prefix+$side+"ShinTwist2"), ($drSide+"jnt_anTwist2"));
            joint -n ($prefix+$side+"ShinTwist3") ($drSide+"jnt_anTwist3"); parent ($prefix+$side+"ShinTwist3") ($prefix+$side+"Knee1");
            connectBone(($prefix+$side+"ShinTwist3"), ($drSide+"jnt_anTwist3"));
        }
            
        for ($j=1; `objExists ("L_jnt_Afinger"+$j)`; $j++){
            joint -n ($prefix+$side+"BaseFinger"+$j) ($drSide+"jnt_Afinger"+$j); parent ($prefix+$side+"BaseFinger"+$j) ($prefix+$side+"Wrist");
            connectBone(($prefix+$side+"BaseFinger"+$j), ($drSide+"jnt_Afinger"+$j));
            joint -n ($prefix+$side+"MidFinger"+$j) ($drSide+"jnt_Bfinger"+$j); parent ($prefix+$side+"MidFinger"+$j) ($prefix+$side+"BaseFinger"+$j);
            connectBone(($prefix+$side+"MidFinger"+$j), ($drSide+"jnt_Bfinger"+$j));
            joint -n ($prefix+$side+"TipFinger"+$j) ($drSide+"jnt_Cfinger"+$j); parent ($prefix+$side+"TipFinger"+$j) ($prefix+$side+"MidFinger"+$j);
            connectBone(($prefix+$side+"TipFinger"+$j), ($drSide+"jnt_Cfinger"+$j));
            }
        }   
    parent Reference grp_joints1;
    
    jointLabels ();
    
} // End boundSkel ()

global proc selSkel ()
{    
    string $prefix = `textField -q -tx preTF`;
    
    // only bind joints we need
    select -r ("*"+$prefix+"*");
    select -d ("*"+$prefix+"*"+"parentConstraint1");
    
} // End selSkel ()

global proc paintMode ()
{
    string $mesh = `textField -q -tx skTF`;
    if (`objExists $mesh`){
        select -add $mesh;
        ArtPaintSkinWeightsTool;
    }
    else print "Enter a valid name";
}

global proc getSkinnedJnts ()
{
    textScrollList -e -ra infTSL;
    string $mesh = `textField -q -tx skTF`;
    string $cluster = findRelatedSkinCluster($mesh);
    string $skinInf[] = `skinCluster -q -inf $cluster`;
    for ($i=0; $i<size($skinInf); $i++)
            textScrollList -e -a $skinInf[$i] infTSL;
}

global proc weightPercent ()
{
    string $mesh = `textField -q -tx skTF`;
    string $cluster = findRelatedSkinCluster($mesh);
    string $sel[] = `ls -sl`;
    string $inf[] = `textScrollList -q -si infTSL`;
    float $wp = `floatSliderGrp -q -v wpFS`;
    
    for ($i=0; $i<size($sel); $i++)
        if (!($sel[$i] == $mesh)) skinPercent -tv $inf[0] $wp -nrm 1 $cluster $sel[$i];
}

global proc mirrorWeights ()
{
    string $cluster = findRelatedSkinCluster(`textField -q -tx skTF`);
    if (`checkBox -q -v invCB`)
        copySkinWeights -ss $cluster -ds $cluster -mi -mm YZ -sa closestPoint -ia label -ia closestJoint;
    else
        copySkinWeights -ss $cluster -ds $cluster -mm YZ -sa closestPoint -ia label -ia closestJoint;
} // end mirrorWeights ()

global proc smoothInf ()
{
    // get info on skin cluster
    string $mesh = `textField -q -tx skTF`;
    string $skin = `findRelatedSkinCluster($mesh)`;
	string $inf[] = `listConnections ($skin+".matrix")`;
	skinCluster -e-fnw -nw 2 $skin;
	// enable artisan tool
	select -r $mesh;
	ArtPaintSkinWeightsTool;
	artAttrPaintOperation artAttrCtx Smooth;
	// flood all influences
	for ($influence in $inf){
	    artSkinInflListChanging $influence 1;
	    artSkinInflListChanged artAttrSkinPaintCtx;
	    artFloodSurfaces;
	}
	skinCluster -e-fnw -nw 1 $skin;
} // end smoothInf ()

global proc proxySkinner ()
{
    // lock button
    button -e -en 0 pkB;
    
    // get user input
    string $mesh = `textField -q -tx skTF`;
    int $sj = `intSliderGrp -q -v sjIS`;
    int $f   = `intSliderGrp -q -v fiIS`;
    
    // organize pieces
    group -n Left L_Clav L_Shoulder L_Elbow L_Wrist L_Hip L_Knee L_Ankle L_Ball;
    
    for ($i=1; $i<$f+1; $i++){
        parent ("L_Afinger"+$i) Left;
        parent ("L_Bfinger"+$i) Left;
        parent ("L_Cfinger"+$i) Left;
    }
    
    string $renamer[] = `duplicate Left`;
    for ($i=1; $i<size($renamer); $i++){
        string $newName = `substitute "L_" $renamer[$i] "R_"`;
        rename ("Left1|"+$renamer[$i]) $newName;
        }
    xform -piv 0 0 0 Left1;
    xform -os -s -1 1 1 Left1;
    
    group -em -n grp_proxyMesh1;
    parent Head grp_proxyMesh1;
    parent Jaw grp_proxyMesh1;
    parent Neck grp_proxyMesh1;
    parent Pelvis grp_proxyMesh1;
    
    for ($i=1; $i<$sj+1; $i++)
        parent ("Spine"+$i) grp_proxyMesh1;
        
    $renamer = `listRelatives Left`;
    for ($i=0; $i<size($renamer); $i++)
        parent $renamer[$i] grp_proxyMesh1;
    $renamer = `listRelatives Left1`;
    for ($i=0; $i<size($renamer); $i++)
        parent $renamer[$i] grp_proxyMesh1;
    
    delete Left; delete Left1;
    
    // skin pieces
    skinCluster -n HeadSkin -tsb jnt_neck2 Head;
    skinCluster -n JawSkin -tsb jnt_jaw1 Jaw;
    skinCluster -n NeckSkin -tsb drj_neck1 jnt_neTwist1 jnt_neTwist2 jnt_neTwist3 Neck;
    
    for ($i=1; $i<$sj+1; $i++)
        skinCluster -n ("SpineSkin"+$i) -tsb ("jnt_spine"+$i) ("Spine"+$i);
        
    skinCluster -n PelvisSkin -tsb jnt_hips1 Pelvis;
    
    skinCluster -n L_ClavSkin -tsb L_jnt_clavicle1 L_Clav;
    skinCluster -n L_ShoulderSkin -tsb -dr 10 L_jnt_shoulder1 L_jnt_shTwist1 L_jnt_shTwist2 L_jnt_shTwist3 L_Shoulder;
    skinCluster -n L_ElbowSkin -tsb -dr 10 L_jnt_elbow1 L_jnt_wrTwist1 L_jnt_wrTwist2 L_jnt_wrTwist3 L_Elbow;
    skinCluster -n L_WristSkin -tsb L_jnt_wrist1 L_Wrist;
    
    for ($i=1; $i<$f+1; $i++){
        skinCluster -n ("L_AfingerSkin"+$i) -tsb ("L_jnt_Afinger"+$i) ("L_Afinger"+$i);
        skinCluster -n ("L_BfingerSkin"+$i) -tsb ("L_jnt_Bfinger"+$i) ("L_Bfinger"+$i);
        skinCluster -n ("L_CfingerSkin"+$i) -tsb ("L_jnt_Cfinger"+$i) ("L_Cfinger"+$i);
    }

    skinCluster -n L_HipSkin -tsb L_jnt_hip1 L_jnt_hpTwist1 L_jnt_hpTwist2 L_jnt_hpTwist3 L_Hip;
    skinCluster -n L_KneeSkin -tsb L_jnt_knee1 L_jnt_knee2 L_jnt_anTwist1 L_jnt_anTwist2 L_jnt_anTwist3 L_Knee;
    skinCluster -n L_AnkleSkin -tsb L_jnt_ankle1 L_Ankle;
    skinCluster -n L_BallSkin -tsb L_jnt_ball1 L_Ball;
    
    skinCluster -n R_ClavSkin -tsb R_jnt_clavicle1 R_Clav;
    skinCluster -n R_ShoulderSkin -tsb R_jnt_shoulder1 R_jnt_shTwist1 R_jnt_shTwist2 R_jnt_shTwist3 R_Shoulder;
    skinCluster -n R_ElbowSkin -tsb R_jnt_elbow1 R_jnt_wrTwist1 R_jnt_wrTwist2 R_jnt_wrTwist3 R_Elbow;
    skinCluster -n R_WristSkin -tsb R_jnt_wrist1 R_Wrist;
    
    for ($i=1; $i<$f+1; $i++){
        skinCluster -n ("R_AfingerSkin"+$i) -tsb ("R_jnt_Afinger"+$i) ("R_Afinger"+$i);
        skinCluster -n ("R_BfingerSkin"+$i) -tsb ("R_jnt_Bfinger"+$i) ("R_Bfinger"+$i);
        skinCluster -n ("R_CfingerSkin"+$i) -tsb ("R_jnt_Cfinger"+$i) ("R_Cfinger"+$i);
    }

    skinCluster -n R_HipSkin -tsb -dr 10 R_jnt_hip1 R_jnt_hpTwist1 R_jnt_hpTwist2 R_jnt_hpTwist3 R_Hip;
    skinCluster -n R_KneeSkin -tsb -dr 10 R_jnt_knee1 R_jnt_knee2 R_jnt_anTwist1 R_jnt_anTwist2 R_jnt_anTwist3 R_Knee;
    skinCluster -n R_AnkleSkin -tsb R_jnt_ankle1 R_Ankle;
    skinCluster -n R_BallSkin -tsb R_jnt_ball1 R_Ball;
    
    // copy proxy skin weights to mesh
    select -r "grp_proxyMesh1"; select -add $mesh; select -hi;
    copySkinWeights -nm -sa closestPoint -ia label -ia oneToOne -normalize;
    
    // delete proxy skin clusters
    delete HeadSkin;
    delete JawSkin;
    delete NeckSkin;
    for ($i=1; $i<$sj+1; $i++)
        delete ("SpineSkin"+$i);
    delete PelvisSkin;
    
    delete L_ClavSkin;
    delete L_ShoulderSkin;
    delete L_ElbowSkin;
    delete L_WristSkin;
    for ($i=1; $i<$f+1; $i++){
        delete ("L_AfingerSkin"+$i);
        delete ("L_BfingerSkin"+$i);
        delete ("L_CfingerSkin"+$i);
    }
    delete L_HipSkin;
    delete L_KneeSkin;
    delete L_AnkleSkin;
    delete L_BallSkin;
    
    delete R_ClavSkin;
    delete R_ShoulderSkin;
    delete R_ElbowSkin;
    delete R_WristSkin;
    for ($i=1; $i<$f+1; $i++){
        delete ("R_AfingerSkin"+$i);
        delete ("R_BfingerSkin"+$i);
        delete ("R_CfingerSkin"+$i);
    }
    delete R_HipSkin;
    delete R_KneeSkin;
    delete R_AnkleSkin;
    delete R_BallSkin;
    
    // proxy constraints
    $renamer = `listRelatives grp_proxyMesh1`;
    for ($i=0; $i<size($renamer); $i++){
        setAttr -lock 0 ($renamer[$i]+".tx");
        setAttr -lock 0 ($renamer[$i]+".ty");
        setAttr -lock 0 ($renamer[$i]+".tz");
        setAttr -lock 0 ($renamer[$i]+".rx");
        setAttr -lock 0 ($renamer[$i]+".ry");
        setAttr -lock 0 ($renamer[$i]+".rz");
        setAttr -lock 0 ($renamer[$i]+".sx");
        setAttr -lock 0 ($renamer[$i]+".sy");
        setAttr -lock 0 ($renamer[$i]+".sz");
    }
    
    parent grp_proxyMesh1 grp_scaleGeo1;
    parentConstraint -mo jnt_neck2 Head;
    parentConstraint -mo jnt_jaw1 Jaw;
    parentConstraint -mo drj_neck1 Neck;
    for ($i=1; $i<$sj+1; $i++)
        parentConstraint -mo ("jnt_spine"+$i) ("Spine"+$i);
    parentConstraint -mo jnt_hips1 Pelvis;
    
    parentConstraint -mo L_jnt_clavicle1 L_Clav;
    parentConstraint -mo L_jnt_shoulder1 L_Shoulder;
    parentConstraint -mo L_jnt_elbow1 L_Elbow;
    parentConstraint -mo L_jnt_wrist1 L_Wrist;
    for ($i=1; $i<$f+1; $i++){
        parentConstraint -mo ("L_jnt_Afinger"+$i) ("L_Afinger"+$i);
        parentConstraint -mo ("L_jnt_Bfinger"+$i) ("L_Bfinger"+$i);
        parentConstraint -mo ("L_jnt_Cfinger"+$i) ("L_Cfinger"+$i);
    }
    parentConstraint -mo L_jnt_hip1 L_Hip;
    parentConstraint -mo L_jnt_knee2 L_Knee;
    parentConstraint -mo L_jnt_ankle1 L_Ankle;
    parentConstraint -mo L_jnt_ball1 L_Ball;
    
    parentConstraint -mo R_jnt_clavicle1 R_Clav;
    parentConstraint -mo R_jnt_shoulder1 R_Shoulder;
    parentConstraint -mo R_jnt_elbow1 R_Elbow;
    parentConstraint -mo R_jnt_wrist1 R_Wrist;
    for ($i=1; $i<$f+1; $i++){
        parentConstraint -mo ("R_jnt_Afinger"+$i) ("R_Afinger"+$i);
        parentConstraint -mo ("R_jnt_Bfinger"+$i) ("R_Bfinger"+$i);
        parentConstraint -mo ("R_jnt_Cfinger"+$i) ("R_Cfinger"+$i);
    }
    parentConstraint -mo R_jnt_hip1 R_Hip;
    parentConstraint -mo R_jnt_knee2 R_Knee;
    parentConstraint -mo R_jnt_ankle1 R_Ankle;
    parentConstraint -mo R_jnt_ball1 R_Ball;
    
    // proxy switch
    addAttr -ln proxy -min 0 -max 1 -k 1 ctr_root1;
    connectAttr ctr_root1.proxy grp_proxyMesh1.visibility;
    
    createNode -n proxySwitch_bta1 blendTwoAttr;
    connectAttr ctr_root1.proxy proxySwitch_bta1.attributesBlender;
    setAttr proxySwitch_bta1.input[0] 1;
    setAttr proxySwitch_bta1.input[1] 0;
    connectAttr proxySwitch_bta1.output ($mesh+".visibility");
    
} // end proxySkinner ()

global proc makeFaceGUI ()
{
    // lock button
    button -e-en 0 mgB;
    
    ctrType ("ctr_faceGUI1","loc_head1",0,2,{0,0,90},{6,4,1});
    xform -ws -t 0 0 0 off_faceGUI1;
    
    parent off_faceGUI1 grp_attr1;
    parentConstraint -mo loc_head1 off_faceGUI1;
    
    addAttr -ln parents ctr_faceGUI1;
    setAttr -e-channelBox 1 ctr_faceGUI1.parents;
    setAttr -lock 1 "ctr_faceGUI1.parents";
    
    addAttr -ln "head" -k 1 -at double -min 0 -max 1 -dv 1 ctr_faceGUI1;
    connectAttr "ctr_faceGUI1.head" off_faceGUI1_parentConstraint1.loc_head1W0;
    
    addAttr -ln faceGui -k 1 -at double -min 0 -max 1 -dv 1 ctr_root1;
    connectAttr ctr_root1.faceGui ctr_faceGUI1.visibility;
    selectiveHide ("ctr_faceGUI1",0,0,0,0,0,0,0,0,0,1);
} // End makeFaceGUI ()

global proc makeSquare (string $name)
{
    string $newName;
    $newName = `curve -d 1 -p -1 -1 0 -p -1 1 0 -p 1 1 0 -p 1 -1 0 -p -1 -1 0 -k 0 -k 1 -k 2 -k 3 -k 4` ;
    rename $newName $name;
}

global proc makeJsEC ()
{
    // get radio selection from window
	string $jsType = `radioCollection -query -select jsTypeRC`;

	// get control name from user
	string $getName;
	
	string $shapeResult = `promptDialog
		-title "JS Name"
		-message "Enter in a name for your joystick controller."
		-button "OK" -button "Cancel"
		-defaultButton "OK" -cancelButton "Cancel"
		-dismissString "Cancel"`;
		
	if ($shapeResult == "OK") {
		$getName = `promptDialog -query -text`;
	}
	if ($getName != "") makeJs ($getName, $jsType);
	else confirmDialog -t "Whoops" -m "You need to enter in a valid name.";
} // makeJsEC ()

global proc makeJs (string $name, string $jsType)
{
	if ($jsType == "ff"){
	    // frame
	    makeSquare (("fra_"+$name+"1"));
	    scale 1.25 1.25 1 ("fra_"+$name+"1");
	    makeIdentity -a 1 -s 1 ("fra_"+$name+"1");
        setAttr ("fra_"+$name+"Shape1.template") 1;
	    
	    // text
        textCurves -ch 0 -f "Courier New|h-4|w100|c0" -t $name;
		float $textSize[] = `getAttr ("Text_"+$name+"_1.boundingBoxMax")`;
		
		scale (2.75/$textSize[0]) (0.5/$textSize[1]) 1 ("Text_"+$name+"_1");
        move -1.5 1.5 0 ("Text_"+$name+"_1");
        setAttr ("Text_"+$name+"_1.template") 1;
	    
	    // joy stick
	    makeSquare (("jsc_"+$name+"1"));
	    scale -r .25 .25 1 ("jsc_"+$name+"1");
        makeIdentity -a 1 -s 1 ("jsc_"+$name+"1");
        transformLimits -tx -1 1 -ty -1 1 -tz 0 0 -etx 1 1 -ety 1 1 -etz 1 1 ("jsc_"+$name+"1");
        selectiveHide (("jsc_"+$name+"1"),0,0,1,1,1,1,1,1,1,1);
        
        // parent together
        parent ("jsc_"+$name+"1") ("fra_"+$name+"1");
        parent ("Text_"+$name+"_1")  ("fra_"+$name+"1");
        parent ("fra_"+$name+"1")  "ctr_faceGUI1";
        
        // set to local space of GUI mover
        setAttr ("fra_"+$name+"1.s") 1 1 1;
        setAttr ("fra_"+$name+"1.t") 0 0 0;
	}
	
	if ($jsType == "of"){
	    // frame
	    makeSquare (("fra_"+$name+"1"));
	    scale .25 1.25 1 ("fra_"+$name+"1");
	    makeIdentity -a 1 -s 1 ("fra_"+$name+"1");
        setAttr ("fra_"+$name+"Shape1.template") 1;
	    
	    // text
        textCurves -ch 0 -f "Courier New|h-4|w100|c0" -t $name;
		float $textSize[] = `getAttr ("Text_"+$name+"_1.boundingBoxMax")`;
		
		scale (2.75/$textSize[0]) (0.5/$textSize[1]) 1 ("Text_"+$name+"_1");
        move -1.5 1.5 0 ("Text_"+$name+"_1");
        setAttr ("Text_"+$name+"_1.template") 1;
	    
	    // joy stick
	    makeSquare (("jsc_"+$name+"1"));
	    scale .25 .25 1 ("jsc_"+$name+"1");
        makeIdentity -a 1 -s 1 ("jsc_"+$name+"1");
        transformLimits -tx -0 0 -ty -1 1 -tz 0 0 -etx 1 1 -ety 1 1 -etz 1 1 ("jsc_"+$name+"1");
        selectiveHide (("jsc_"+$name+"1"),1,0,1,1,1,1,1,1,1,1);
        
        // parent together
        parent ("jsc_"+$name+"1") ("fra_"+$name+"1");
        parent ("Text_"+$name+"_1")  ("fra_"+$name+"1");
        parent ("fra_"+$name+"1")  "ctr_faceGUI1";
        
        // set to local space of GUI mover
        setAttr ("fra_"+$name+"1.s") 1 1 1;
        setAttr ("fra_"+$name+"1.t") 0 0 0;
	}
	
	if ($jsType == "fo"){
	    // frame
	    makeSquare (("fra_"+$name+"1"));
	    scale 1.25 .25 1 ("fra_"+$name+"1");
	    makeIdentity -a 1 -s 1 ("fra_"+$name+"1");
        setAttr ("fra_"+$name+"Shape1.template") 1;
	    
	    // text
        textCurves -ch 0 -f "Courier New|h-4|w100|c0" -t $name;
		float $textSize[] = `getAttr ("Text_"+$name+"_1.boundingBoxMax")`;
		
		scale (2.75/$textSize[0]) (0.5/$textSize[1]) 1 ("Text_"+$name+"_1");
        move -1.5 .5 0 ("Text_"+$name+"_1");
        setAttr ("Text_"+$name+"_1.template") 1;
	    
	    // joy stick
	    makeSquare (("jsc_"+$name+"1"));
	    scale .25 .25 1 ("jsc_"+$name+"1");
        makeIdentity -a 1 -s 1 ("jsc_"+$name+"1");
        transformLimits -tx -1 1 -ty -0 0 -tz 0 0 -etx 1 1 -ety 1 1 -etz 1 1 ("jsc_"+$name+"1");
        selectiveHide (("jsc_"+$name+"1"),0,1,1,1,1,1,1,1,1,1);
        
        // parent together
        parent ("jsc_"+$name+"1") ("fra_"+$name+"1");
        parent ("Text_"+$name+"_1")  ("fra_"+$name+"1");
        parent ("fra_"+$name+"1")  "ctr_faceGUI1";
        
        // set to local space of GUI mover
        setAttr ("fra_"+$name+"1.s") 1 1 1;
        setAttr ("fra_"+$name+"1.t") 0 0 0;
	}
	
	
	if ($jsType == "ft"){
	    // frame
	    makeSquare (("fra_"+$name+"1"));
	    scale 1.25 .75 1 ("fra_"+$name+"1");
	    makeIdentity -a 1 -s 1 ("fra_"+$name+"1");
        setAttr ("fra_"+$name+"Shape1.template") 1;
	    
	    // text
        textCurves -ch 0 -f "Courier New|h-4|w100|c0" -t $name;
		float $textSize[] = `getAttr ("Text_"+$name+"_1.boundingBoxMax")`;
		
		scale (2.75/$textSize[0]) (0.5/$textSize[1]) 1 ("Text_"+$name+"_1");
        move -1.5 1.0 0 ("Text_"+$name+"_1");
        setAttr ("Text_"+$name+"_1.template") 1;
	    
	    // joy stick
	    makeSquare (("jsc_"+$name+"1"));
	    scale .25 .25 1 ("jsc_"+$name+"1");
	    move 0 -.5 0 ("jsc_"+$name+"1");
        makeIdentity -a 1 -t 1 -s 1 ("jsc_"+$name+"1");
        transformLimits -tx -1 1 -ty 0 1 -tz 0 0 -etx 1 1 -ety 1 1 -etz 1 1 ("jsc_"+$name+"1");
        selectiveHide (("jsc_"+$name+"1"),0,0,1,1,1,1,1,1,1,1);
        
        // parent together
        parent ("jsc_"+$name+"1") ("fra_"+$name+"1");
        parent ("Text_"+$name+"_1")  ("fra_"+$name+"1");
        parent ("fra_"+$name+"1")  "ctr_faceGUI1";
        
        // set to local space of GUI mover
        setAttr ("fra_"+$name+"1.s") 1 1 1;
        setAttr ("fra_"+$name+"1.t") 0 0 0;
	}
	
	
	if ($jsType == "tt"){
	    // frame
	    makeSquare (("fra_"+$name+"1"));
	    scale .75 .75 1 ("fra_"+$name+"1");
	    makeIdentity -a 1 -s 1 ("fra_"+$name+"1");
        setAttr ("fra_"+$name+"Shape1.template") 1;
	    
	    // text
        textCurves -ch 0 -f "Courier New|h-4|w100|c0" -t $name;
		float $textSize[] = `getAttr ("Text_"+$name+"_1.boundingBoxMax")`;
		
		scale (2.75/$textSize[0]) (0.5/$textSize[1]) 1 ("Text_"+$name+"_1");
        move -1.5 1.0 0 ("Text_"+$name+"_1");
        setAttr ("Text_"+$name+"_1.template") 1;
	    
	    // joy stick
	    makeSquare (("jsc_"+$name+"1"));
	    scale .25 .25 1 ("jsc_"+$name+"1");
	    move -.5 -.5 0 ("jsc_"+$name+"1");
        makeIdentity -a 1 -t 1 -s 1 ("jsc_"+$name+"1");
        transformLimits -tx -.5 .5 -ty -.5 .5 -tz 0 0 -etx 1 1 -ety 1 1 -etz 1 1 ("jsc_"+$name+"1");
        selectiveHide (("jsc_"+$name+"1"),0,0,1,1,1,1,1,1,1,1);
        
        // parent together
        parent ("jsc_"+$name+"1") ("fra_"+$name+"1");
        parent ("Text_"+$name+"_1")  ("fra_"+$name+"1");
        parent ("fra_"+$name+"1")  "ctr_faceGUI1";
        
        // set to local space of GUI mover
        setAttr ("fra_"+$name+"1.s") 1 1 1;
        setAttr ("fra_"+$name+"1.t") 0 0 0;
	}
} // end makeJS ()


global proc eyeRigEC ()
{
    // moot because of eye joint - keeping for reference
    //string $eyeName = `textFieldButtonGrp -q -tx erTF`;
    //if (`objExists ("L_"+$eyeName)`) eyeRig ($eyeName);
    //else confirmDialog -t "Whoops" -m "You must enter in a valid name.";
    eyeRig ("jnt_eye1");
} // end eyeRigEC ()

global proc eyeRig (string $eyeName)
{
    // organize geometry
    group -em -n grp_headGeo1;
    parent grp_headGeo1 grp_scaleGeo1;
    parentConstraint -mo loc_head1 grp_headGeo1;
    
    // lock button
    button -e-en 0 erB;
    
    // make look at controls    
    circle -n L_ctr_lookat1 -ch 0;
    setAttr L_ctr_lookat1.overrideEnabled 1;
    setAttr L_ctr_lookat1.overrideColor 15;
    
    pointConstraint -o 0 0 5 ("L_"+$eyeName) L_ctr_lookat1;
    delete L_ctr_lookat1_pointConstraint1;
    makeIdentity -a 1 -t 1 -r 1 -s 1;
    group -n L_off_lookat1; xform -os -cp ;
    
    circle -n R_ctr_lookat1 -ch 0;
    setAttr R_ctr_lookat1.overrideEnabled 1;
    setAttr R_ctr_lookat1.overrideColor 13;
    
    pointConstraint -o 0 0 5 ("R_"+$eyeName) R_ctr_lookat1;
    delete R_ctr_lookat1_pointConstraint1;
    makeIdentity -a 1 -t 1 -r 1 -s 1;
    group -n R_off_lookat1; xform -os -cp ;
    
    spaceLocator -n ctr_lookat1;
    setAttr ctr_lookat1.overrideEnabled 1;
    setAttr ctr_lookat1.overrideColor 14;
    
    group -n off_lookat1; xform -os -cp;
    pointConstraint L_ctr_lookat1 R_ctr_lookat1 off_lookat1;
    delete off_lookat1_pointConstraint1;
    
    parent L_off_lookat1 ctr_lookat1;
    parent R_off_lookat1 ctr_lookat1;
    
    select off_lookat1;
    makeIdentity -a 1 -t 1 -r 1 -s 1;
    
    parent off_lookat1 grp_attr1;
    parentConstraint -mo loc_head1 off_lookat1;
    selectiveHide ("L_ctr_lookat1",0,0,0,1,1,1,1,1,1,1);
    selectiveHide ("R_ctr_lookat1",0,0,0,1,1,1,1,1,1,1);
    selectiveHide ("ctr_lookat1",0,0,0,0,0,0,1,1,1,1);
    
    // aim constraints
    aimConstraint -mo -weight 1 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType "none" -skip z L_ctr_lookat1 ("L_"+$eyeName);
    aimConstraint -mo -weight 1 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType "none" -skip z R_ctr_lookat1 ("R_"+$eyeName);
    
    // joystick create & connect
    makeJs ("lUppBlink", "of");
    move  1.5  3 0;
    makeJs ("rUppBlink", "of");
    move -1.5  3 0;
    makeJs ("lLowBlink", "of");
    move  1.5 -4 0;
    makeJs ("rLowBlink", "of");
    move -1.5 -4 0;
    
    makeJs ("lEye", "ff");
    move  1.5 -.5 0;
    makeJs ("rEye", "ff");
    move  -1.5 -.5 0;
    
    // node for sensitivity
    createNode multiplyDivide -n eyeJsSens_mdn1;
    createNode multiplyDivide -n eyeJsSens_mdn2;
    
    connectAttr jsc_lEye1.t eyeJsSens_mdn1.input1;
    connectAttr jsc_rEye1.t eyeJsSens_mdn2.input1;
    
    connectAttr eyeJsSens_mdn1.output L_off_lookat1.t;
    connectAttr eyeJsSens_mdn2.output R_off_lookat1.t;

    
    addAttr -ln eyeOptions ctr_faceGUI1;
    setAttr -e-channelBox 1 ctr_faceGUI1.eyeOptions;
    setAttr -lock 1 "ctr_faceGUI1.eyeOptions";
    
    addAttr -ln joystickSensitivity -at double -min 0 -max 10 -dv 4 -k 1 ctr_faceGUI1;
    
    connectAttr ctr_faceGUI1.joystickSensitivity eyeJsSens_mdn1.input2X;
    connectAttr ctr_faceGUI1.joystickSensitivity eyeJsSens_mdn2.input2X;
    connectAttr ctr_faceGUI1.joystickSensitivity eyeJsSens_mdn1.input2Y;
    connectAttr ctr_faceGUI1.joystickSensitivity eyeJsSens_mdn2.input2Y;
    
    // auto eye lid
    
    // blending nodes
    createNode -n L_eyelid_bta1 blendTwoAttr;
    createNode -n L_eyelid_bta2 blendTwoAttr;
    createNode -n R_eyelid_bta1 blendTwoAttr;
    createNode -n R_eyelid_bta2 blendTwoAttr;
    // clamps
    createNode -n L_autolid_cla1 clamp;
    setAttr L_autolid_cla1.maxR 360;
    setAttr L_autolid_cla1.minR -15;
    setAttr L_autolid_cla1.maxG 360;
    setAttr L_autolid_cla1.minG -15;
    createNode -n R_autolid_cla1 clamp;
    setAttr R_autolid_cla1.maxR 360;
    setAttr R_autolid_cla1.minR -15;
    setAttr R_autolid_cla1.maxG 360;
    setAttr R_autolid_cla1.minG -15;
   
    connectAttr ("L_"+$eyeName+".rx") L_autolid_cla1.inputR;
    connectAttr ("L_"+$eyeName+".rx") L_autolid_cla1.inputG;
    connectAttr ("R_"+$eyeName+".rx") R_autolid_cla1.inputR;
    connectAttr ("R_"+$eyeName+".rx") R_autolid_cla1.inputG;
    
    // pos x -> neg z
    
    // create and connect nodes
    createNode multiplyDivide -n L_eyelid_mdn1;
    connectAttr L_autolid_cla1.outputR L_eyelid_mdn1.input1X;
    connectAttr L_autolid_cla1.outputG L_eyelid_mdn1.input1Y;
    connectAttr L_eyelid_mdn1.outputX L_eyelid_bta1.input[0];
    connectAttr L_eyelid_mdn1.outputY L_eyelid_bta2.input[0];
    
    createNode multiplyDivide -n R_eyelid_mdn1;
    connectAttr R_autolid_cla1.outputR R_eyelid_mdn1.input1X;
    connectAttr R_autolid_cla1.outputG R_eyelid_mdn1.input1Y;
    connectAttr R_eyelid_mdn1.outputX R_eyelid_bta1.input[0];
    connectAttr R_eyelid_mdn1.outputY R_eyelid_bta2.input[0];
    
    // connect blink sliders
    
    // create and connect nodes
    createNode multiplyDivide -n L_uppBlink_mdn1;
    setAttr L_uppBlink_mdn1.input2Y -45;
    connectAttr jsc_lUppBlink1.t L_uppBlink_mdn1.input1;
    connectAttr L_uppBlink_mdn1.outputY L_eyelid_bta1.input[1];
    
    createNode multiplyDivide -n L_lowBlink_mdn1;
    setAttr L_lowBlink_mdn1.input2Y 25;
    connectAttr jsc_lLowBlink1.t L_lowBlink_mdn1.input1;
    connectAttr L_lowBlink_mdn1.outputY L_eyelid_bta2.input[1];
    
    createNode multiplyDivide -n R_uppBlink_mdn1;
    setAttr R_uppBlink_mdn1.input2Y -45;
    connectAttr jsc_rUppBlink1.t R_uppBlink_mdn1.input1;
    connectAttr R_uppBlink_mdn1.outputY R_eyelid_bta1.input[1];
    
    createNode multiplyDivide -n R_lowBlink_mdn1;
    setAttr R_lowBlink_mdn1.input2Y 25;
    connectAttr jsc_rLowBlink1.t R_lowBlink_mdn1.input1;
    connectAttr R_lowBlink_mdn1.outputY R_eyelid_bta2.input[1];
    
    // get absolute value
    createNode -n L_sliderabs_mdn1 multiplyDivide;
    setAttr L_sliderabs_mdn1.operation 3;
    connectAttr jsc_lUppBlink1.ty L_sliderabs_mdn1.input1X;
    connectAttr jsc_lLowBlink1.ty L_sliderabs_mdn1.input1Y;
    setAttr L_sliderabs_mdn1.input2X 2;
    setAttr L_sliderabs_mdn1.input2Y 2;
    
    createNode -n L_sliderabs_mdn2 multiplyDivide;
    setAttr L_sliderabs_mdn2.operation 3;
    connectAttr L_sliderabs_mdn1.outputX L_sliderabs_mdn2.input1X;
    connectAttr L_sliderabs_mdn1.outputY L_sliderabs_mdn2.input1Y;
    setAttr L_sliderabs_mdn2.input2X .5;
    setAttr L_sliderabs_mdn2.input2Y .5;
    
    createNode -n R_sliderabs_mdn1 multiplyDivide;
    setAttr R_sliderabs_mdn1.operation 3;
    connectAttr jsc_rUppBlink1.ty R_sliderabs_mdn1.input1X;
    connectAttr jsc_rLowBlink1.ty R_sliderabs_mdn1.input1Y;
    setAttr R_sliderabs_mdn1.input2X 2;
    setAttr R_sliderabs_mdn1.input2Y 2;
    
    createNode -n R_sliderabs_mdn2 multiplyDivide;
    setAttr R_sliderabs_mdn2.operation 3;
    connectAttr R_sliderabs_mdn1.outputX R_sliderabs_mdn2.input1X;
    connectAttr R_sliderabs_mdn1.outputY R_sliderabs_mdn2.input1Y;
    setAttr R_sliderabs_mdn2.input2X .5;
    setAttr R_sliderabs_mdn2.input2Y .5;
    
    connectAttr L_sliderabs_mdn2.outputX L_eyelid_bta1.attributesBlender;
    connectAttr L_sliderabs_mdn2.outputY L_eyelid_bta2.attributesBlender;
    connectAttr R_sliderabs_mdn2.outputX R_eyelid_bta1.attributesBlender;
    connectAttr R_sliderabs_mdn2.outputY R_eyelid_bta2.attributesBlender;
    
    connectAttr L_eyelid_bta1.output L_drv_eyelid1.rz;
    connectAttr L_eyelid_bta2.output L_drv_eyelid2.rz;
    connectAttr R_eyelid_bta1.output R_drv_eyelid1.rz;
    connectAttr R_eyelid_bta2.output R_drv_eyelid2.rz;
    
    // extra attributes
    createNode multiplyDivide -n ALSens_mdn1;
    setAttr ALSens_mdn1.input2X 0.8;
    setAttr ALSens_mdn1.input2Y -0.2;
    
    addAttr -ln autoLidSensitivity -at double -min 0 -max 1 -dv 1 -k 1 ctr_faceGUI1;
    connectAttr ctr_faceGUI1.autoLidSensitivity ALSens_mdn1.input1X;
    connectAttr ctr_faceGUI1.autoLidSensitivity ALSens_mdn1.input1Y;
    
    connectAttr ALSens_mdn1.outputX L_eyelid_mdn1.input2X;
    connectAttr ALSens_mdn1.outputY L_eyelid_mdn1.input2Y;
    connectAttr ALSens_mdn1.outputX R_eyelid_mdn1.input2X;
    connectAttr ALSens_mdn1.outputY R_eyelid_mdn1.input2Y;
    
    addAttr -ln enableLookAt -at double -min 0 -max 1 -dv 0 -k 1 ctr_faceGUI1;
    connectAttr ctr_faceGUI1.enableLookAt off_lookat1.visibility;
} // End eyeRig ()

global proc sliderConnectEC ()
{
	// get selection 
	string $getControl = `textField -q -tx slTF`;
	
	if ($getControl!="*jsc*"){
    	// get blendshape node from user
    	string $getBlendshape = `textFieldButtonGrp -q -tx bsTF`;
    	if (`objExists $getBlendshape`){
        	// get blendshape name from user
        	string $getShape;
        	
        	string $shapeResult = `promptDialog
        		-title "Shape"
        		-message "What is the name of the target shape?"
        		-button "OK" -button "Cancel"
        		-defaultButton "OK" -cancelButton "Cancel"
        		-dismissString "Cancel"`;
        		
        	if ($shapeResult == "OK") {
        		$getShape = `promptDialog -query -text`;
        		if (`objExists ($getBlendshape +"."+$getShape)`) sliderConnect ($getControl, $getShape, $getBlendshape);
                else confirmDialog -t "Whoops" -m "You need to enter in a valid blendshape to continue.";
        	}
        }
    	else confirmDialog -t "Whoops" -m "You need to specify a valid shape to continue.";
	}
    else confirmDialog -t "Whoops" -m "You need to select exactly one joystick object to continue.";

} // end sliderConnectEC ()

global proc sliderConnect(string $getControl, string $getShape, string $blendshapeNode)
{
	// get radio selection from window
	string $sliderType = `radioCollection -query -select sliderTypeRC`;
	
	// pma node operation type
	int $getPmaType = 1;	
	if ($sliderType == "tl") $getPmaType = 2; 
	if ($sliderType == "br") $getPmaType = 2;
	
	// clamp node information
	int $getClampType = 1;
	if ($sliderType == "bl") $getClampType = -1; 
	if ($sliderType == "br") $getClampType = -1;
	
	// normal slider information
	int $getNodeType = 0;
	if ($sliderType == "left") $getNodeType = 1; 
	if ($sliderType == "bot") $getNodeType = 1;
	
	int $getUpDown = 0;
	if ($sliderType == "left") $getUpDown = 1; 
	if ($sliderType == "right") $getUpDown = 1;

	// diag slider
	if ($sliderType == "tl")      diagSlider($getPmaType, $getClampType, $getControl, $getShape, $blendshapeNode);
	else if ($sliderType == "tr") diagSlider($getPmaType, $getClampType, $getControl, $getShape, $blendshapeNode);
	else if ($sliderType == "bl") diagSlider($getPmaType, $getClampType, $getControl, $getShape, $blendshapeNode);
	else if ($sliderType == "br") diagSlider($getPmaType, $getClampType, $getControl, $getShape, $blendshapeNode);
	// normal slider
	else normalSlider($getNodeType, $getUpDown, $getControl, $getShape, $blendshapeNode);
	
} // end sliderConnect

global proc diagSlider(int $pmaType, int $clampType, string $control, string $shape, string $blendshapeNode)
{
	// create nodes
	createNode plusMinusAverage -n ($blendshapeNode + "_" + $shape + "_pma1");
	createNode clamp -n ($blendshapeNode + "_" + $shape + "_clamp1");
	createNode multiplyDivide -n ($blendshapeNode + "_" + $shape + "_mdn1");
	createNode clamp -n ($blendshapeNode + "_" + $shape + "_clamp2");

	// connect our nodes
	connectAttr ($control + ".translateY") ($blendshapeNode + "_" + $shape + "_pma1.input1D[0]");
	connectAttr ($control + ".translateX") ($blendshapeNode + "_" + $shape + "_pma1.input1D[1]");
	
	// depends on if it is on the left or right side of the frame
	setAttr ($blendshapeNode + "_" + $shape + "_pma1.operation") $pmaType;
	connectAttr ($blendshapeNode + "_" + $shape + "_pma1.output1D") ($blendshapeNode + "_" + $shape + "_clamp1.inputR");
	
	// depending on if it is the top or bottom side of the frame
	if ($clampType == 1){	
    	setAttr ($blendshapeNode + "_" + $shape + "_clamp1.maxR") 1; 
    	setAttr ($blendshapeNode + "_" + $shape + "_clamp1.maxG") 1;
	}
	else{               
    	setAttr ($blendshapeNode + "_" + $shape + "_clamp1.minR") -1; 
    	setAttr ($blendshapeNode + "_" + $shape + "_clamp1.minG") -1;
	}

	connectAttr ($control + ".translateY") ($blendshapeNode + "_" + $shape + "_mdn1.input1X");
	connectAttr ($blendshapeNode + "_" + $shape + "_clamp1.outputR") ($blendshapeNode + "_" + $shape + "_mdn1.input2X");

	connectAttr ($blendshapeNode + "_" + $shape + "_mdn1.outputX")   ($blendshapeNode + "_" + $shape + "_clamp2.inputR");
	setAttr ($blendshapeNode + "_" + $shape + "_clamp2.maxR") 1; 
	setAttr ($blendshapeNode + "_" + $shape + "_clamp2.maxG") 1;

	connectAttr ($blendshapeNode + "_" + $shape + "_clamp2.outputR") ($blendshapeNode+"." + $shape);
	
	for ($i=1; objExists(("makeTextCurves"+$i)); $i++)
	    delete ("makeTextCurves"+$i);
} // end diagSlider

global proc normalSlider(int $nodeType, int $upDown, string $control, string $shape, string $blendshapeNode)
{
	// create nodes
	createNode multiplyDivide -n ($blendshapeNode + "_" + $shape + "_mdn1");
	createNode clamp          -n ($blendshapeNode + "_" + $shape + "_clamp1");
	setAttr ($blendshapeNode + "_" + $shape + "_clamp1.maxR") 1;
	
	// connect nodes
	connectAttr ($control + ".translateX") ($blendshapeNode + "_" + $shape + "_mdn1.input1X");
	connectAttr ($control + ".translateY") ($blendshapeNode + "_" + $shape + "_mdn1.input1Y");
	
	if($nodeType == 1){ 
    	setAttr ($blendshapeNode + "_" + $shape + "_mdn1.input2X") -1;
    	setAttr ($blendshapeNode + "_" + $shape + "_mdn1.input2Y") -1;
	}
	
	if ($upDown == 1) 
	    connectAttr ($blendshapeNode + "_" + $shape + "_mdn1.outputX") ($blendshapeNode + "_" + $shape + "_clamp1.inputR");
	else
	    connectAttr ($blendshapeNode + "_" + $shape + "_mdn1.outputY") ($blendshapeNode + "_" + $shape + "_clamp1.inputR");
	
	connectAttr ($blendshapeNode + "_" + $shape + "_clamp1.outputR") ($blendshapeNode+"." + $shape); 
	
    for ($i=1; objExists(("makeTextCurves"+$i)); $i++)
	    delete ("makeTextCurves"+$i);
} // end normalSlider

global proc standardBSEC ()
{
    string $meshSel[] = `ls -sl`;
    if (`objExists ctr_faceGUI1`){
        standardBS ($meshSel[0]);
        button -e-en 1 bsB;
    }
    else print "make dat gui mover first s0n";
} // end standardBSEC ()

global proc standardBS (string $mesh)
{
    // disable button
    button -e-en 0 bsB;
    // unlock mesh
    setAttr -lock 0 ($mesh+".tx");
    
    // make duplicate geometry for blendshapes
    string $d1[] = `duplicate -n bsg_open1 $mesh`; xform -ws -t 10 0 0 bsg_open1;
    string $d2[] = `duplicate -n bsg_narrow1 $mesh`; xform -ws -t 12 0 0 bsg_narrow1;
    string $d3[] = `duplicate -n bsg_smile1 $mesh`; xform -ws -t 14 0 0 bsg_smile1;
    string $d4[] = `duplicate -n bsg_frown1 $mesh`; xform -ws -t 16 0 0 bsg_frown1;
    string $d5[] = `duplicate -n bsg_sneer1 $mesh`; xform -ws -t 18 0 0 bsg_sneer1;
    
    string $d6[] = `duplicate -n bsg_uppLipUp1 $mesh`; xform -ws -t 20 0 0 bsg_uppLipUp1;
    string $d7[] = `duplicate -n bsg_uppLipDown1 $mesh`; xform -ws -t 22 0 0 bsg_uppLipDown1;
    string $d8[] = `duplicate -n bsg_lowLipUp1 $mesh`; xform -ws -t 24 0 0 bsg_lowLipUp1;
    string $d9[] = `duplicate -n bsg_lowLipDown1 $mesh`; xform -ws -t 26 0 0 bsg_lowLipDown1;
    
    string $d10[] = `duplicate -n bsg_innBrowUp1 $mesh`; xform -ws -t 28 0 0 bsg_innBrowUp1;
    string $d11[] = `duplicate -n bsg_innBrowDown1 $mesh`; xform -ws -t 30 0 0 bsg_innBrowDown1;
    string $d12[] = `duplicate -n bsg_outBrowUp1 $mesh`; xform -ws -t 32 0 0 bsg_outBrowUp1;
    string $d13[] = `duplicate -n bsg_outBrowDown1 $mesh`; xform -ws -t 34 0 0 bsg_outBrowDown1;
    
    string $d14[] = `duplicate -n bsg_leftSwish1 $mesh`; xform -ws -t 36 0 0 bsg_leftSwish1;
    string $d15[] = `duplicate -n bsg_rightSwish1 $mesh`; xform -ws -t 38 0 0 bsg_rightSwish1;
    
    string $d16[] = `duplicate -n bsg_squint1 $mesh`; xform -ws -t 38 0 0 bsg_squint1;
        
    // create left blendshape node
    blendShape -foc -n L_faceShapes1 $d3[0] $d4[0] $d5[0] $d6[0] $d7[0] $d16[0]
                                     $d8[0] $d9[0] $d10[0] $d11[0] $d12[0] $d13[0] $mesh;
    
    // get number of verts in mesh
    int $vtxs[] = `polyEvaluate -v $mesh`;
    float $vtxLoc[];
    
    select -cl;
    // add vertex to selection if in positive X
    for ($i=0; $i<$vtxs[0]; $i++){
        $vtxLoc = `xform -q -ws -t ($mesh+".vtx["+$i+"]")`;
        if ($vtxLoc[0] < 0)
            setAttr ("L_faceShapes1.inputTarget[0].baseWeights["+$i+"]") 0;
    }
    // go to paint weights tool and flood 8 times
    select $mesh;
    ArtPaintBlendShapeWeightsTool;
    artAttrPaintOperation artAttrCtx Smooth;
    artSetToolAndSelectAttr( "artAttrCtx", "blendShape.L_faceShapes1.baseWeights" );
    for ($i=0; $i<8; $i++) artFloodSurfaces;
    
    // create right blendshape node
    blendShape -foc -n R_faceShapes1 $d3[0] $d4[0] $d5[0] $d6[0] $d7[0] $d16[0]
                                     $d8[0] $d9[0] $d10[0] $d11[0] $d12[0] $d13[0] $mesh;
    select -cl;
    // add vertex to selection if in positive X
    for ($i=0; $i<$vtxs[0]; $i++){
        $vtxLoc = `xform -q -ws -t ($mesh+".vtx["+$i+"]")`;
        if ($vtxLoc[0] >= 0)
            setAttr ("R_faceShapes1.inputTarget[0].baseWeights["+$i+"]") 0;
    }
    // go to paint weights tool and flood 8 times
    select $mesh;
    ArtPaintBlendShapeWeightsTool;
    artAttrPaintOperation artAttrCtx Smooth;
    artSetToolAndSelectAttr( "artAttrCtx", "blendShape.R_faceShapes1.baseWeights" );
    for ($i=0; $i<8; $i++) artFloodSurfaces;
    
    // create normal blendshape node
    blendShape -foc -n faceShapes1 $d1[0] $d2[0] $d3[0] $d6[0] $d7[0]
                                   $d8[0] $d9[0] $d14[0] $d15[0] $mesh;
    // make sliders
    // 4x4s
    makeJs ("sync", "ff");
    move -os -r 4.5 -.5 0;
    makeJs ("mouthEmo", "ff");
    move -os -r 7.5 -.5 0;
    makeJs ("brow", "ff");
    move -os -r 4.5 3 0;
    makeJs ("browEmo", "ff");
    move -os -r 7.5 3 0;
    makeJs ("toung", "ff");
    move -os -r 4.5 -4 0;
    // 2x4s
    makeJs ("squint", "ft");
    move -os -r 10.5 3.5 0;
    makeJs ("sneer", "ft");
    move -os -r 10.5 1 0;
    makeJs ("uppLip", "ft");
    move -os -r 10.5 -2 0;
    makeJs ("lowLip", "ft");
    move -os -r 10.5 -4.5 0;
    // 4x1s
    makeJs ("swish", "fo");
    move -os -r 7.5 -3 0;
    makeJs ("pursed", "fo");
    move -os -r 7.5 -5 0;
    
    // reshape gui mover
    string $shape[] = `pickWalk -d down ctr_faceGUI1`;
    move -ws -a 13 6 0 ($shape[0]+".cv[3]");
    move -ws -a 13 -6 0 ($shape[0]+".cv[4]");
    move -ws -a 13 -6 0 ($shape[0]+".cv[0]");
    
    // connect sliders
    // brow
    diagSlider (2, 1, "jsc_brow1", "bsg_outBrowUp1", "R_faceShapes1"); //tl
    diagSlider (1, 1, "jsc_brow1", "bsg_outBrowUp1", "L_faceShapes1"); //tr
    diagSlider (1, -1, "jsc_brow1", "bsg_outBrowDown1", "R_faceShapes1"); //bl
    diagSlider (2, -1, "jsc_brow1", "bsg_outBrowDown1", "L_faceShapes1"); //br
    // brow emo
    diagSlider (2, 1, "jsc_browEmo1", "bsg_innBrowUp1", "R_faceShapes1"); //tl
    diagSlider (1, 1, "jsc_browEmo1", "bsg_innBrowUp1", "L_faceShapes1"); //tr
    diagSlider (1, -1, "jsc_browEmo1", "bsg_innBrowDown1", "R_faceShapes1"); //bl
    diagSlider (2, -1, "jsc_browEmo1", "bsg_innBrowDown1", "L_faceShapes1"); //br
    // moutEmo
    diagSlider (2, 1, "jsc_mouthEmo1", "bsg_smile1", "R_faceShapes1"); //tl
    diagSlider (1, 1, "jsc_mouthEmo1", "bsg_smile1", "L_faceShapes1"); //tr
    diagSlider (1, -1, "jsc_mouthEmo1", "bsg_frown1", "R_faceShapes1"); //bl
    diagSlider (2, -1, "jsc_mouthEmo1", "bsg_frown1", "L_faceShapes1"); //br
    // sync
    normalSlider (0, 0, "jsc_sync1", "bsg_lowLipUp1", "faceShapes1"); //t
    normalSlider (1, 1, "jsc_sync1", "bsg_narrow1", "faceShapes1"); //l
    normalSlider (0, 1, "jsc_sync1", "bsg_smile1", "faceShapes1"); //r
    normalSlider (1, 0, "jsc_sync1", "bsg_open1", "faceShapes1"); //b
    // squint
    diagSlider (2, 1, "jsc_squint1", "bsg_squint1", "R_faceShapes1"); //tl
    diagSlider (1, 1, "jsc_squint1", "bsg_squint1", "L_faceShapes1"); //tr
    // sneer
    diagSlider (2, 1, "jsc_sneer1", "bsg_sneer1", "R_faceShapes1"); //tl
    diagSlider (1, 1, "jsc_sneer1", "bsg_sneer1", "L_faceShapes1"); //tr
    // uppLip
    diagSlider (2, 1, "jsc_uppLip1", "bsg_uppLipUp1", "R_faceShapes1"); //tl
    diagSlider (1, 1, "jsc_uppLip1", "bsg_uppLipUp1", "L_faceShapes1"); //tr
    // lowLip
    diagSlider (2, 1, "jsc_lowLip1", "bsg_lowLipDown1", "R_faceShapes1"); //tl
    diagSlider (1, 1, "jsc_lowLip1", "bsg_lowLipDown1", "L_faceShapes1"); //tr
    // swish
    normalSlider (1, 1, "jsc_swish1", "bsg_rightSwish1", "faceShapes1"); //l
    normalSlider (0, 1, "jsc_swish1", "bsg_leftSwish1", "faceShapes1"); //r
    // pursed
    normalSlider (0, 1, "jsc_pursed1", "bsg_uppLipDown1", "faceShapes1"); //r
    normalSlider (0, 1, "jsc_pursed1", "bsg_lowLipUp1", "L_faceShapes1"); //r
    normalSlider (0, 1, "jsc_pursed1", "bsg_lowLipUp1", "R_faceShapes1"); //r
} // end standardBS ()

global proc createFacialNetwork (string $ctr, int $mid)
{
    // get drv
    string $drv = `substitute "ctr" $ctr "drv"`;
    // for each side
    // 3 pmas for t,r,s
    string $side = "L_";
    for ($i=0; $i<2; $i++){
        if ($i==1) $side = "R_";
        if ($mid == 1){ $i=1; $side = "";}
        createNode -n ($side+$ctr+"Tx_pma1") plusMinusAverage;
        createNode -n ($side+$ctr+"Ty_pma1") plusMinusAverage;
        createNode -n ($side+$ctr+"Tz_pma1") plusMinusAverage;
        createNode -n ($side+$ctr+"Rx_pma1") plusMinusAverage;
        createNode -n ($side+$ctr+"Ry_pma1") plusMinusAverage;
        createNode -n ($side+$ctr+"Rz_pma1") plusMinusAverage;
        createNode -n ($side+$ctr+"Sx_pma1") plusMinusAverage;
        setAttr ($side+$ctr+"Sx_pma1.input1D[0]") 1;
        createNode -n ($side+$ctr+"Sy_pma1") plusMinusAverage;
        setAttr ($side+$ctr+"Sy_pma1.input1D[0]") 1;
        createNode -n ($side+$ctr+"Sz_pma1") plusMinusAverage;
        setAttr ($side+$ctr+"Sz_pma1.input1D[0]") 1;
        
        connectAttr ($side+$ctr+"Tx_pma1.output1D") ($side+$drv+".tx");
        connectAttr ($side+$ctr+"Ty_pma1.output1D") ($side+$drv+".ty");
        connectAttr ($side+$ctr+"Tz_pma1.output1D") ($side+$drv+".tz");
        connectAttr ($side+$ctr+"Rx_pma1.output1D") ($side+$drv+".rx");
        connectAttr ($side+$ctr+"Ry_pma1.output1D") ($side+$drv+".ry");
        connectAttr ($side+$ctr+"Rz_pma1.output1D") ($side+$drv+".rz");
        connectAttr ($side+$ctr+"Sx_pma1.output1D") ($side+$drv+".sx");
        connectAttr ($side+$ctr+"Sy_pma1.output1D") ($side+$drv+".sy");
        connectAttr ($side+$ctr+"Sz_pma1.output1D") ($side+$drv+".sz");
        
        addAttr -ln cc ($side+$drv);
    }
} // end createFacialNetwork ()

global proc prepFacialNetwork ()
{
    button -e-en 0 jrB;
    createFacialNetwork ("ctr_jaw1",1);
    createFacialNetwork ("ctr_toung1",1);
    createFacialNetwork ("ctr_brow1",0);
    createFacialNetwork ("ctr_brow2",0);
    createFacialNetwork ("ctr_brow3",0);
    createFacialNetwork ("ctr_cheekBone1",0);
    createFacialNetwork ("ctr_cheek1",0);
    createFacialNetwork ("ctr_nostril1",0);
    createFacialNetwork ("ctr_uppMouth1",0);
    createFacialNetwork ("ctr_cornerMouth1",0);
    createFacialNetwork ("ctr_lowMouth1",0);
} // end prepFacialNetwork ()

global proc sliderNetwork ()
{
    string $ctr = `textField -q -tx slTF`;
    if (!`objExists ($ctr+".prep")`){
        // the condition - direction 1
        createNode -n ($ctr+"d1_con1") condition;
        createNode -n ($ctr+"d1_con2") condition;
        createNode -n ($ctr+"d1_con3") condition;
        setAttr ($ctr+"d1_con3.operation") 0;
        
        // the condition - direction 2
        createNode -n ($ctr+"d2_con1") condition;
        createNode -n ($ctr+"d2_con2") condition;
        createNode -n ($ctr+"d2_con3") condition;
        setAttr ($ctr+"d2_con3.operation") 0;
        
        // the condition - direction 3
        createNode -n ($ctr+"d3_con1") condition;
        createNode -n ($ctr+"d3_con2") condition;
        createNode -n ($ctr+"d3_con3") condition;
        setAttr ($ctr+"d3_con3.operation") 0;
        
        // the condition - direction 4
        createNode -n ($ctr+"d4_con1") condition;
        createNode -n ($ctr+"d4_con2") condition;
        createNode -n ($ctr+"d4_con3") condition;
        setAttr ($ctr+"d4_con3.operation") 0;
        
        // attributes to keep track of connections
        addAttr -ln count $ctr;
        addAttr -ln prep $ctr;
        
        addAttr -ln tl $ctr;
        addAttr -ln top $ctr;
        addAttr -ln tr $ctr;
        addAttr -ln left $ctr;
        addAttr -ln right $ctr;
        addAttr -ln bl $ctr;
        addAttr -ln bot $ctr;
        addAttr -ln br $ctr;
    }
} // end sliderNetwork ()

global proc connectCtrToSliderEC ()
{
    // error checking... lots of error checking
    string $slider = `textField -q -tx slTF`;
    string $jsType = `radioCollection -query -select sliderTypeRC`;
    if (`objExists ($slider+".prep")`)
        if (`getAttr ($slider+"."+$jsType)` == 0){
            int $count = `getAttr ($slider+".count")`;
            setAttr ($slider+"."+$jsType) 1;
            if ($count<4){
                setAttr ($slider+".count") ($count+1);
                connectCtrToSlider ($slider, $jsType, $count);
            }
            else print "this slider already has 4 connections";
        }
        else print ($jsType+" is already in use");
    else print "prep your slider first n00b";
} // end connectCtrToSliderEC ()

global proc connectCtrToSlider (string $slider, string $type, int $sc)
{
    string $sel[] = `ls -sl`;
    string $ctr;
    string $drv;
    int $cc;
    float $t[];
    float $r[];
    float $s[];
    
    if ($type == "tl"){
        // oh mercy me - the dreaded diag sliders
        createNode -n ($slider+"d"+($sc+1)+"_pma1") plusMinusAverage;
        createNode -n ($slider+"d"+($sc+1)+"_cla1") clamp;
        createNode -n ($slider+"d"+($sc+1)+"_cla2") clamp;
        createNode -n ($slider+"d"+($sc+1)+"_mdn1") multiplyDivide;
        
        setAttr ($slider+"d"+($sc+1)+"_pma1.operation") 2;
        connectAttr ($slider+".ty") ($slider+"d"+($sc+1)+"_pma1.input1D[0]");
        connectAttr ($slider+".tx") ($slider+"d"+($sc+1)+"_pma1.input1D[1]");
        
        connectAttr ($slider+"d"+($sc+1)+"_pma1.output1D") ($slider+"d"+($sc+1)+"_cla1.inputR");
        setAttr ($slider+"d"+($sc+1)+"_cla1.maxR") 1;
        
        connectAttr ($slider+".ty") ($slider+"d"+($sc+1)+"_mdn1.input1X");
        connectAttr ($slider+"d"+($sc+1)+"_cla1.outputR") ($slider+"d"+($sc+1)+"_mdn1.input2X");
        
        connectAttr ($slider+"d"+($sc+1)+"_mdn1.outputX") ($slider+"d"+($sc+1)+"_cla2.inputR");
        setAttr ($slider+"d"+($sc+1)+"_cla2.maxR") 1;
        
        connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($slider+"d"+($sc+1)+"_con1.firstTerm");
    }
    if ($type == "top"){
        connectAttr ($slider+".ty") ($slider+"d"+($sc+1)+"_con1.firstTerm");
        setAttr ($slider+"d"+($sc+1)+"_con1.operation") 2;
    }
    if ($type == "tr"){
        createNode -n ($slider+"d"+($sc+1)+"_pma1") plusMinusAverage;
        createNode -n ($slider+"d"+($sc+1)+"_cla1") clamp;
        createNode -n ($slider+"d"+($sc+1)+"_cla2") clamp;
        createNode -n ($slider+"d"+($sc+1)+"_mdn1") multiplyDivide;
        
        connectAttr ($slider+".ty") ($slider+"d"+($sc+1)+"_pma1.input1D[0]");
        connectAttr ($slider+".tx") ($slider+"d"+($sc+1)+"_pma1.input1D[1]");
        
        connectAttr ($slider+"d"+($sc+1)+"_pma1.output1D") ($slider+"d"+($sc+1)+"_cla1.inputR");
        setAttr ($slider+"d"+($sc+1)+"_cla1.maxR") 1;
        
        connectAttr ($slider+".ty") ($slider+"d"+($sc+1)+"_mdn1.input1X");
        connectAttr ($slider+"d"+($sc+1)+"_cla1.outputR") ($slider+"d"+($sc+1)+"_mdn1.input2X");
        
        connectAttr ($slider+"d"+($sc+1)+"_mdn1.outputX") ($slider+"d"+($sc+1)+"_cla2.inputR");
        setAttr ($slider+"d"+($sc+1)+"_cla2.maxR") 1;
        
        connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($slider+"d"+($sc+1)+"_con1.firstTerm");
    }
    if ($type == "left"){
        connectAttr ($slider+".tx") ($slider+"d"+($sc+1)+"_con1.firstTerm");
        setAttr ($slider+"d"+($sc+1)+"_con1.operation") 4;
    }
    if ($type == "right"){
        connectAttr ($slider+".tx") ($slider+"d"+($sc+1)+"_con1.firstTerm");
        setAttr ($slider+"d"+($sc+1)+"_con1.operation") 2;
    }
    if ($type == "bl"){
        createNode -n ($slider+"d"+($sc+1)+"_pma1") plusMinusAverage;
        createNode -n ($slider+"d"+($sc+1)+"_cla1") clamp;
        createNode -n ($slider+"d"+($sc+1)+"_cla2") clamp;
        createNode -n ($slider+"d"+($sc+1)+"_mdn1") multiplyDivide;
        
        connectAttr ($slider+".ty") ($slider+"d"+($sc+1)+"_pma1.input1D[0]");
        connectAttr ($slider+".tx") ($slider+"d"+($sc+1)+"_pma1.input1D[1]");
        
        connectAttr ($slider+"d"+($sc+1)+"_pma1.output1D") ($slider+"d"+($sc+1)+"_cla1.inputR");
        setAttr ($slider+"d"+($sc+1)+"_cla1.minR") -1;
        
        connectAttr ($slider+".ty") ($slider+"d"+($sc+1)+"_mdn1.input1X");
        connectAttr ($slider+"d"+($sc+1)+"_cla1.outputR") ($slider+"d"+($sc+1)+"_mdn1.input2X");
        
        connectAttr ($slider+"d"+($sc+1)+"_mdn1.outputX") ($slider+"d"+($sc+1)+"_cla2.inputR");
        setAttr ($slider+"d"+($sc+1)+"_cla2.maxR") 1;
        
        connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($slider+"d"+($sc+1)+"_con1.firstTerm");
    }
    if ($type == "bot"){
        connectAttr ($slider+".ty") ($slider+"d"+($sc+1)+"_con1.firstTerm");
        setAttr ($slider+"d"+($sc+1)+"_con1.operation") 4;
    }
    if ($type == "br"){
        createNode -n ($slider+"d"+($sc+1)+"_pma1") plusMinusAverage;
        createNode -n ($slider+"d"+($sc+1)+"_cla1") clamp;
        createNode -n ($slider+"d"+($sc+1)+"_cla2") clamp;
        createNode -n ($slider+"d"+($sc+1)+"_mdn1") multiplyDivide;
        
        setAttr ($slider+"d"+($sc+1)+"_pma1.operation") 2;
        connectAttr ($slider+".ty") ($slider+"d"+($sc+1)+"_pma1.input1D[0]");
        connectAttr ($slider+".tx") ($slider+"d"+($sc+1)+"_pma1.input1D[1]");
        
        connectAttr ($slider+"d"+($sc+1)+"_pma1.output1D") ($slider+"d"+($sc+1)+"_cla1.inputR");
        setAttr ($slider+"d"+($sc+1)+"_cla1.minR") -1;
        
        connectAttr ($slider+".ty") ($slider+"d"+($sc+1)+"_mdn1.input1X");
        connectAttr ($slider+"d"+($sc+1)+"_cla1.outputR") ($slider+"d"+($sc+1)+"_mdn1.input2X");
        
        connectAttr ($slider+"d"+($sc+1)+"_mdn1.outputX") ($slider+"d"+($sc+1)+"_cla2.inputR");
        setAttr ($slider+"d"+($sc+1)+"_cla2.maxR") 1;
        
        connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($slider+"d"+($sc+1)+"_con1.firstTerm");
    }
    
    for ($i=0; $i<size($sel); $i++){
        // get transform data
        $ctr = $sel[$i];
        $t = `getAttr ($ctr+".t")`;
        $r = `getAttr ($ctr+".r")`;
        $s = `getAttr ($ctr+".s")`;
        // get drv
        $drv = `substitute "ctr" $ctr "drv"`;
        // get control connection count
        $cc = `getAttr ($drv+".cc")`;
        setAttr ($drv+".cc") ($cc+1);
        // translate nodes
        createNode -n ($ctr+"T_ble"+$cc) blendColors;
        setAttr ($ctr+"T_ble"+$cc+".color1") 0 0 0;
        setAttr ($ctr+"T_ble"+$cc+".color2") $t[0] $t[1] $t[2];
        createNode -n ($ctr+"T_mdn"+$cc) multiplyDivide;
        connectAttr ($ctr+"T_ble"+$cc+".output") ($ctr+"T_mdn"+$cc+".input1");
        createNode -n ($ctr+"Tcon_mdn"+$cc) multiplyDivide;
        connectAttr ($ctr+"T_mdn"+$cc+".output") ($ctr+"Tcon_mdn"+$cc+".input1");
        connectAttr ($ctr+"Tcon_mdn"+$cc+".outputX") ($ctr+"Tx_pma1.input1D["+$cc+"]");
        connectAttr ($ctr+"Tcon_mdn"+$cc+".outputY") ($ctr+"Ty_pma1.input1D["+$cc+"]");
        connectAttr ($ctr+"Tcon_mdn"+$cc+".outputZ") ($ctr+"Tz_pma1.input1D["+$cc+"]");
        // rotate nodes
        createNode -n ($ctr+"R_ble"+$cc) blendColors;
        setAttr ($ctr+"R_ble"+$cc+".color1") 0 0 0;
        setAttr ($ctr+"R_ble"+$cc+".color2") $r[0] $r[1] $r[2];
        createNode -n ($ctr+"R_mdn"+$cc) multiplyDivide;
        connectAttr ($ctr+"R_ble"+$cc+".output") ($ctr+"R_mdn"+$cc+".input1");
        createNode -n ($ctr+"Rcon_mdn"+$cc) multiplyDivide;
        connectAttr ($ctr+"R_mdn"+$cc+".output") ($ctr+"Rcon_mdn"+$cc+".input1");
        connectAttr ($ctr+"Rcon_mdn"+$cc+".outputX") ($ctr+"Rx_pma1.input1D["+$cc+"]");
        connectAttr ($ctr+"Rcon_mdn"+$cc+".outputY") ($ctr+"Ry_pma1.input1D["+$cc+"]");
        connectAttr ($ctr+"Rcon_mdn"+$cc+".outputZ") ($ctr+"Rz_pma1.input1D["+$cc+"]");
        // scale nodes
        createNode -n ($ctr+"S_ble"+$cc) blendColors;
        setAttr ($ctr+"S_ble"+$cc+".color1") 0 0 0;
        setAttr ($ctr+"S_ble"+$cc+".color2") ($s[0]-1) ($s[1]-1) ($s[2]-1);
        createNode -n ($ctr+"S_mdn"+$cc) multiplyDivide;
        connectAttr ($ctr+"S_ble"+$cc+".output") ($ctr+"S_mdn"+$cc+".input1");
        createNode -n ($ctr+"Scon_mdn"+$cc) multiplyDivide;
        connectAttr ($ctr+"S_mdn"+$cc+".output") ($ctr+"Scon_mdn"+$cc+".input1");
        connectAttr ($ctr+"Scon_mdn"+$cc+".outputX") ($ctr+"Sx_pma1.input1D["+($cc+1)+"]");
        connectAttr ($ctr+"Scon_mdn"+$cc+".outputY") ($ctr+"Sy_pma1.input1D["+($cc+1)+"]");
        connectAttr ($ctr+"Scon_mdn"+$cc+".outputZ") ($ctr+"Sz_pma1.input1D["+($cc+1)+"]");
        
        // prepare condition network
        if ($type == "tl"){
            connectAttr ($slider+"d"+($sc+1)+"_con3.outColorR") ($ctr+"T_ble"+$cc+".blender");
            connectAttr ($slider+"d"+($sc+1)+"_con3.outColorR") ($ctr+"R_ble"+$cc+".blender");
            connectAttr ($slider+"d"+($sc+1)+"_con3.outColorR") ($ctr+"S_ble"+$cc+".blender");
            // connect pma to mdn and set mdns
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"T_mdn"+$cc+".input2X");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"T_mdn"+$cc+".input2Y");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"T_mdn"+$cc+".input2Z");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"R_mdn"+$cc+".input2X");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"R_mdn"+$cc+".input2Y");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"R_mdn"+$cc+".input2Z");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"S_mdn"+$cc+".input2X");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"S_mdn"+$cc+".input2Y");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"S_mdn"+$cc+".input2Z");
        }
        if ($type == "top"){
            connectAttr ($slider+"d"+($sc+1)+"_con1.outColorR") ($ctr+"T_ble"+$cc+".blender");
            connectAttr ($slider+"d"+($sc+1)+"_con1.outColorR") ($ctr+"R_ble"+$cc+".blender");
            connectAttr ($slider+"d"+($sc+1)+"_con1.outColorR") ($ctr+"S_ble"+$cc+".blender");
            // connect slider to mdn
            connectAttr ($slider+".ty") ($ctr+"T_mdn"+$cc+".input2X");
            connectAttr ($slider+".ty") ($ctr+"T_mdn"+$cc+".input2Y");
            connectAttr ($slider+".ty") ($ctr+"T_mdn"+$cc+".input2Z");
            connectAttr ($slider+".ty") ($ctr+"R_mdn"+$cc+".input2X");
            connectAttr ($slider+".ty") ($ctr+"R_mdn"+$cc+".input2Y");
            connectAttr ($slider+".ty") ($ctr+"R_mdn"+$cc+".input2Z");
            connectAttr ($slider+".ty") ($ctr+"S_mdn"+$cc+".input2X");
            connectAttr ($slider+".ty") ($ctr+"S_mdn"+$cc+".input2Y");
            connectAttr ($slider+".ty") ($ctr+"S_mdn"+$cc+".input2Z");
        }
        if ($type == "tr"){
            connectAttr ($slider+"d"+($sc+1)+"_con3.outColorR") ($ctr+"T_ble"+$cc+".blender");
            connectAttr ($slider+"d"+($sc+1)+"_con3.outColorR") ($ctr+"R_ble"+$cc+".blender");
            connectAttr ($slider+"d"+($sc+1)+"_con3.outColorR") ($ctr+"S_ble"+$cc+".blender");
            // connect pma to mdn and set mdns
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"T_mdn"+$cc+".input2X");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"T_mdn"+$cc+".input2Y");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"T_mdn"+$cc+".input2Z");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"R_mdn"+$cc+".input2X");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"R_mdn"+$cc+".input2Y");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"R_mdn"+$cc+".input2Z");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"S_mdn"+$cc+".input2X");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"S_mdn"+$cc+".input2Y");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"S_mdn"+$cc+".input2Z");
        }
        if ($type == "left"){
            connectAttr ($slider+"d"+($sc+1)+"_con1.outColorR") ($ctr+"T_ble"+$cc+".blender");
            connectAttr ($slider+"d"+($sc+1)+"_con1.outColorR") ($ctr+"R_ble"+$cc+".blender");
            connectAttr ($slider+"d"+($sc+1)+"_con1.outColorR") ($ctr+"S_ble"+$cc+".blender");
            // connect slider to mdn
            connectAttr ($slider+".tx") ($ctr+"T_mdn"+$cc+".input2X");
            connectAttr ($slider+".tx") ($ctr+"T_mdn"+$cc+".input2Y");
            connectAttr ($slider+".tx") ($ctr+"T_mdn"+$cc+".input2Z");
            connectAttr ($slider+".tx") ($ctr+"R_mdn"+$cc+".input2X");
            connectAttr ($slider+".tx") ($ctr+"R_mdn"+$cc+".input2Y");
            connectAttr ($slider+".tx") ($ctr+"R_mdn"+$cc+".input2Z");
            connectAttr ($slider+".tx") ($ctr+"S_mdn"+$cc+".input2X");
            connectAttr ($slider+".tx") ($ctr+"S_mdn"+$cc+".input2Y");
            connectAttr ($slider+".tx") ($ctr+"S_mdn"+$cc+".input2Z");
            setAttr ($ctr+"Tcon_mdn"+$cc+".input2") -1 -1 -1;
            setAttr ($ctr+"Rcon_mdn"+$cc+".input2") -1 -1 -1;
            setAttr ($ctr+"Scon_mdn"+$cc+".input2") -1 -1 -1;
        }
        if ($type == "right"){
            connectAttr ($slider+"d"+($sc+1)+"_con1.outColorR") ($ctr+"T_ble"+$cc+".blender");
            connectAttr ($slider+"d"+($sc+1)+"_con1.outColorR") ($ctr+"R_ble"+$cc+".blender");
            connectAttr ($slider+"d"+($sc+1)+"_con1.outColorR") ($ctr+"S_ble"+$cc+".blender");
            // connect slider to mdn
            connectAttr ($slider+".tx") ($ctr+"T_mdn"+$cc+".input2X");
            connectAttr ($slider+".tx") ($ctr+"T_mdn"+$cc+".input2Y");
            connectAttr ($slider+".tx") ($ctr+"T_mdn"+$cc+".input2Z");
            connectAttr ($slider+".tx") ($ctr+"R_mdn"+$cc+".input2X");
            connectAttr ($slider+".tx") ($ctr+"R_mdn"+$cc+".input2Y");
            connectAttr ($slider+".tx") ($ctr+"R_mdn"+$cc+".input2Z");
            connectAttr ($slider+".tx") ($ctr+"S_mdn"+$cc+".input2X");
            connectAttr ($slider+".tx") ($ctr+"S_mdn"+$cc+".input2Y");
            connectAttr ($slider+".tx") ($ctr+"S_mdn"+$cc+".input2Z");
        }
        if ($type == "bl"){
            connectAttr ($slider+"d"+($sc+1)+"_con3.outColorR") ($ctr+"T_ble"+$cc+".blender");
            connectAttr ($slider+"d"+($sc+1)+"_con3.outColorR") ($ctr+"R_ble"+$cc+".blender");
            connectAttr ($slider+"d"+($sc+1)+"_con3.outColorR") ($ctr+"S_ble"+$cc+".blender");
            // connect pma to mdn and set mdns
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"T_mdn"+$cc+".input2X");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"T_mdn"+$cc+".input2Y");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"T_mdn"+$cc+".input2Z");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"R_mdn"+$cc+".input2X");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"R_mdn"+$cc+".input2Y");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"R_mdn"+$cc+".input2Z");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"S_mdn"+$cc+".input2X");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"S_mdn"+$cc+".input2Y");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"S_mdn"+$cc+".input2Z");
        }
        if ($type == "bot"){
            connectAttr ($slider+"d"+($sc+1)+"_con1.outColorR") ($ctr+"T_ble"+$cc+".blender");
            connectAttr ($slider+"d"+($sc+1)+"_con1.outColorR") ($ctr+"R_ble"+$cc+".blender");
            connectAttr ($slider+"d"+($sc+1)+"_con1.outColorR") ($ctr+"S_ble"+$cc+".blender");
            // connect slider to mdn
            connectAttr ($slider+".ty") ($ctr+"T_mdn"+$cc+".input2X");
            connectAttr ($slider+".ty") ($ctr+"T_mdn"+$cc+".input2Y");
            connectAttr ($slider+".ty") ($ctr+"T_mdn"+$cc+".input2Z");
            connectAttr ($slider+".ty") ($ctr+"R_mdn"+$cc+".input2X");
            connectAttr ($slider+".ty") ($ctr+"R_mdn"+$cc+".input2Y");
            connectAttr ($slider+".ty") ($ctr+"R_mdn"+$cc+".input2Z");
            connectAttr ($slider+".ty") ($ctr+"S_mdn"+$cc+".input2X");
            connectAttr ($slider+".ty") ($ctr+"S_mdn"+$cc+".input2Y");
            connectAttr ($slider+".ty") ($ctr+"S_mdn"+$cc+".input2Z");
            setAttr ($ctr+"Tcon_mdn"+$cc+".input2") -1 -1 -1;
            setAttr ($ctr+"Rcon_mdn"+$cc+".input2") -1 -1 -1;
            setAttr ($ctr+"Scon_mdn"+$cc+".input2") -1 -1 -1;
        }
        if ($type == "br"){
            connectAttr ($slider+"d"+($sc+1)+"_con3.outColorR") ($ctr+"T_ble"+$cc+".blender");
            connectAttr ($slider+"d"+($sc+1)+"_con3.outColorR") ($ctr+"R_ble"+$cc+".blender");
            connectAttr ($slider+"d"+($sc+1)+"_con3.outColorR") ($ctr+"S_ble"+$cc+".blender");
            // connect pma to mdn and set mdns
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"T_mdn"+$cc+".input2X");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"T_mdn"+$cc+".input2Y");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"T_mdn"+$cc+".input2Z");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"R_mdn"+$cc+".input2X");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"R_mdn"+$cc+".input2Y");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"R_mdn"+$cc+".input2Z");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"S_mdn"+$cc+".input2X");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"S_mdn"+$cc+".input2Y");
            connectAttr ($slider+"d"+($sc+1)+"_cla2.outputR") ($ctr+"S_mdn"+$cc+".input2Z");
        }
        // reset control transform
        setAttr ($ctr+".t") 0 0 0;
        setAttr ($ctr+".r") 0 0 0;
        if ($ctr == "ctr_jaw1");
        else setAttr ($ctr+".s") 1 1 1;
    }
} // end connectCtrToSlider ()

global proc mirrorFaceControlEC ()
{
    string $getSide;
    if(`checkBox -q -v mrCB`)
        $getSide = "R_";
    else
        $getSide = "L_";
    string $getReset = `checkBox -q -v reCB`;
    mirrorFaceControl ($getSide, $getReset);
} // end mirrorFaceControlEC ()

global proc mirrorFaceControl (string $side, int $reset)
{
    float $t[3];
    float $r[3];
    float $s[3];
    
    string $os;
    if ($side == "L_") $os = "R_";
    else $os = "L_";
    
    $t = `getAttr ($side+"ctr_brow1.t")`;
    $r = `getAttr ($side+"ctr_brow1.r")`;
    $s = `getAttr ($side+"ctr_brow1.s")`;
    setAttr ($os+"ctr_brow1.t") ($t[0]*-1) $t[1] $t[2];
    setAttr ($os+"ctr_brow1.r") $r[0] $r[1] ($r[2]*-1);
    setAttr ($os+"ctr_brow1.s") $s[0] $s[1] $s[2];
    
    $t = `getAttr ($side+"ctr_brow2.t")`;
    $r = `getAttr ($side+"ctr_brow2.r")`;
    $s = `getAttr ($side+"ctr_brow2.s")`;
    setAttr ($os+"ctr_brow2.t") ($t[0]*-1) $t[1] $t[2];
    setAttr ($os+"ctr_brow2.r") $r[0] $r[1] ($r[2]*-1);
    setAttr ($os+"ctr_brow2.s") $s[0] $s[1] $s[2];
    
    $t = `getAttr ($side+"ctr_brow3.t")`;
    $r = `getAttr ($side+"ctr_brow3.r")`;
    $s = `getAttr ($side+"ctr_brow3.s")`;
    setAttr ($os+"ctr_brow3.t") ($t[0]*-1) $t[1] $t[2];
    setAttr ($os+"ctr_brow3.r") $r[0] $r[1] ($r[2]*-1);
    setAttr ($os+"ctr_brow3.s") $s[0] $s[1] $s[2];
    
    $t = `getAttr ($side+"ctr_nostril1.t")`;
    $r = `getAttr ($side+"ctr_nostril1.r")`;
    $s = `getAttr ($side+"ctr_nostril1.s")`;
    setAttr ($os+"ctr_nostril1.t") ($t[0]*-1) $t[1] $t[2];
    setAttr ($os+"ctr_nostril1.r") $r[0] $r[1] ($r[2]*-1);
    setAttr ($os+"ctr_nostril1.s") $s[0] $s[1] $s[2];
    
    $t = `getAttr ($side+"ctr_cheek1.t")`;
    $r = `getAttr ($side+"ctr_cheek1.r")`;
    $s = `getAttr ($side+"ctr_cheek1.s")`;
    setAttr ($os+"ctr_cheek1.t") ($t[0]*-1) $t[1] $t[2];
    setAttr ($os+"ctr_cheek1.r") $r[0] $r[1] ($r[2]*-1);
    setAttr ($os+"ctr_cheek1.s") $s[0] $s[1] $s[2];
    
    $t = `getAttr ($side+"ctr_cheekBone1.t")`;
    $r = `getAttr ($side+"ctr_cheekBone1.r")`;
    $s = `getAttr ($side+"ctr_cheekBone1.s")`;
    setAttr ($os+"ctr_cheekBone1.t") ($t[0]*-1) $t[1] $t[2];
    setAttr ($os+"ctr_cheekBone1.r") $r[0] $r[1] ($r[2]*-1);
    setAttr ($os+"ctr_cheekBone1.s") $s[0] $s[1] $s[2];
    
    $t = `getAttr ($side+"ctr_uppMouth1.t")`;
    $r = `getAttr ($side+"ctr_uppMouth1.r")`;
    $s = `getAttr ($side+"ctr_uppMouth1.s")`;
    setAttr ($os+"ctr_uppMouth1.t") ($t[0]*-1) $t[1] $t[2];
    setAttr ($os+"ctr_uppMouth1.r") $r[0] $r[1] ($r[2]*-1);
    setAttr ($os+"ctr_uppMouth1.s") $s[0] $s[1] $s[2];
    
    $t = `getAttr ($side+"ctr_cornerMouth1.t")`;
    $r = `getAttr ($side+"ctr_cornerMouth1.r")`;
    $s = `getAttr ($side+"ctr_cornerMouth1.s")`;
    setAttr ($os+"ctr_cornerMouth1.t") ($t[0]*-1) $t[1] $t[2];
    setAttr ($os+"ctr_cornerMouth1.r") $r[0] $r[1] ($r[2]*-1);
    setAttr ($os+"ctr_cornerMouth1.s") $s[0] $s[1] $s[2];
    
    $t = `getAttr ($side+"ctr_lowMouth1.t")`;
    $r = `getAttr ($side+"ctr_lowMouth1.r")`;
    $s = `getAttr ($side+"ctr_lowMouth1.s")`;
    setAttr ($os+"ctr_lowMouth1.t") ($t[0]*-1) $t[1] $t[2];
    setAttr ($os+"ctr_lowMouth1.r") $r[0] $r[1] ($r[2]*-1);
    setAttr ($os+"ctr_lowMouth1.s") $s[0] $s[1] $s[2];
    
    $t = `getAttr ctr_toung1.t`;
    $r = `getAttr ctr_toung1.r`;
    setAttr ctr_toung1.t ($t[0]*-1) $t[1] ($t[2]*-1);
    setAttr ctr_toung1.r $r[0] ($r[1]*-1) ($r[2]*-1);
    
    if ($reset){
        setAttr ($side+"ctr_brow1.t") 0 0 0;
        setAttr ($side+"ctr_brow1.r") 0 0 0;
        setAttr ($side+"ctr_brow1.s") 1 1 1;
        
        setAttr ($side+"ctr_brow2.t") 0 0 0;
        setAttr ($side+"ctr_brow2.r") 0 0 0;
        setAttr ($side+"ctr_brow2.s") 1 1 1;
        
        setAttr ($side+"ctr_brow3.t") 0 0 0;
        setAttr ($side+"ctr_brow3.r") 0 0 0;
        setAttr ($side+"ctr_brow3.s") 1 1 1;
        
        setAttr ($side+"ctr_cheek1.t") 0 0 0;
        setAttr ($side+"ctr_cheek1.r") 0 0 0;
        setAttr ($side+"ctr_cheek1.s") 1 1 1;
        
        setAttr ($side+"ctr_cheek1.t") 0 0 0;
        setAttr ($side+"ctr_cheek1.r") 0 0 0;
        setAttr ($side+"ctr_cheek1.s") 1 1 1;
        
        setAttr ($side+"ctr_cheekBone1.t") 0 0 0;
        setAttr ($side+"ctr_cheekBone1.r") 0 0 0;
        setAttr ($side+"ctr_cheekBone1.s") 1 1 1;
        
        setAttr ($side+"ctr_nostril1.t") 0 0 0;
        setAttr ($side+"ctr_nostril1.r") 0 0 0;
        setAttr ($side+"ctr_nostril1.s") 1 1 1;
        
        setAttr ($side+"ctr_uppMouth1.t") 0 0 0;
        setAttr ($side+"ctr_uppMouth1.r") 0 0 0;
        setAttr ($side+"ctr_uppMouth1.s") 1 1 1;
        
        setAttr ($side+"ctr_cornerMouth1.t") 0 0 0;
        setAttr ($side+"ctr_cornerMouth1.r") 0 0 0;
        setAttr ($side+"ctr_cornerMouth1.s") 1 1 1;
        
        setAttr ($side+"ctr_lowMouth1.t") 0 0 0;
        setAttr ($side+"ctr_lowMouth1.r") 0 0 0;
        setAttr ($side+"ctr_lowMouth1.s") 1 1 1;
    }
} // end mirrorFaceControl

global proc mirrorBodyControl ()
{
    float $t[3];
    float $r[3];
    float $t2[3];
    float $r2[3];
    float $custom;
    float $custom2;
    
    string $side = "L_";
    string $os = "R_";
    string $ns = `textField -q -tx nsTF`;
    
    // just get info and mirror
    $r = `getAttr ($ns+$side+"ctr_clavicle1.r")`;
    $r2 = `getAttr ($ns+$os+"ctr_clavicle1.r")`;
    setAttr ($ns+$os+"ctr_clavicle1.r") $r[0] $r[1] $r[2];
    setAttr ($ns+$side+"ctr_clavicle1.r") $r2[0] $r2[1] $r2[2];
    
    $r = `getAttr ($ns+$side+"ctr_shoulderFK1.r")`;
    $r2 = `getAttr ($ns+$os+"ctr_shoulderFK1.r")`;
    setAttr ($ns+$os+"ctr_shoulderFK1.r") $r[0] $r[1] $r[2];
    setAttr ($ns+$side+"ctr_shoulderFK1.r") $r2[0] $r2[1] $r2[2];
    
    $t = `getAttr ($ns+$side+"ctr_elbowFK1.t")`;
    $r = `getAttr ($ns+$side+"ctr_elbowFK1.r")`;
    $t2 = `getAttr ($ns+$os+"ctr_elbowFK1.t")`;
    $r2 = `getAttr ($ns+$os+"ctr_elbowFK1.r")`;
    setAttr ($ns+$os+"ctr_elbowFK1.tx") $t[0];
    setAttr ($ns+$os+"ctr_elbowFK1.r") $r[0] $r[1] $r[2];
    setAttr ($ns+$side+"ctr_elbowFK1.tx") $t2[0];
    setAttr ($ns+$side+"ctr_elbowFK1.r") $r2[0] $r2[1] $r2[2];
    
    $t = `getAttr ($ns+$side+"ctr_wristFK1.t")`;
    $r = `getAttr ($ns+$side+"ctr_wristFK1.r")`;
    $t2 = `getAttr ($ns+$os+"ctr_wristFK1.t")`;
    $r2 = `getAttr ($ns+$os+"ctr_wristFK1.r")`;
    setAttr ($ns+$os+"ctr_wristFK1.tx") $t[0];
    setAttr ($ns+$os+"ctr_wristFK1.r") $r[0] $r[1] $r[2];
    setAttr ($ns+$side+"ctr_wristFK1.tx") $t2[0];
    setAttr ($ns+$side+"ctr_wristFK1.r") $r2[0] $r2[1] $r2[2];
    
    $t = `getAttr ($ns+$side+"ctr_armIK1.t")`;
    $r = `getAttr ($ns+$side+"ctr_armIK1.r")`;
    $t2 = `getAttr ($ns+$os+"ctr_armIK1.t")`;
    $r2 = `getAttr ($ns+$os+"ctr_armIK1.r")`;
    setAttr ($ns+$os+"ctr_armIK1.t") ($t[0]*-1) ($t[1]*-1) ($t[2]*-1);
    setAttr ($ns+$os+"ctr_armIK1.r") $r[0] $r[1] $r[2];
    setAttr ($ns+$side+"ctr_armIK1.t") ($t2[0]*-1) ($t2[1]*-1) ($t2[2]*-1);
    setAttr ($ns+$side+"ctr_armIK1.r") $r2[0] $r2[1] $r2[2];
    
    $custom = `getAttr ($ns+$side+"ctr_armIK1.elbow")`;
    $custom2 = `getAttr ($ns+$os+"ctr_armIK1.elbow")`;
    setAttr ($ns+$os+"ctr_armIK1.elbow") $custom;
    setAttr ($ns+$side+"ctr_armIK1.elbow") $custom2;
    
    // fucking custom
    for ($i=1; objExists(($ns+$side+"ctr_finger1.base"+$i)); $i++){
        $custom = `getAttr ($ns+$side+"ctr_finger1.base"+$i)`;
        $custom2 = `getAttr ($ns+$os+"ctr_finger1.base"+$i)`;
        setAttr ($ns+$os+"ctr_finger1.base"+$i) $custom;
        setAttr ($ns+$side+"ctr_finger1.base"+$i) $custom2;
        $custom = `getAttr ($ns+$side+"ctr_finger1.mid"+$i)`;
        $custom2 = `getAttr ($ns+$os+"ctr_finger1.mid"+$i)`;
        setAttr ($ns+$os+"ctr_finger1.mid"+$i) $custom;
        setAttr ($ns+$side+"ctr_finger1.mid"+$i) $custom2;
        $custom = `getAttr ($ns+$side+"ctr_finger1.tip"+$i)`;
        $custom2 = `getAttr ($ns+$os+"ctr_finger1.tip"+$i)`;
        setAttr ($ns+$os+"ctr_finger1.tip"+$i) $custom;
        setAttr ($ns+$side+"ctr_finger1.tip"+$i) $custom2;
        $custom = `getAttr ($ns+$side+"ctr_finger1.spread"+$i)`;
        $custom2 = `getAttr ($ns+$os+"ctr_finger1.spread"+$i)`;
        setAttr ($ns+$os+"ctr_finger1.spread"+$i) $custom;
        setAttr ($ns+$side+"ctr_finger1.spread"+$i) $custom2;
        $custom = `getAttr ($ns+$side+"ctr_finger1.roll"+$i)`;
        $custom2 = `getAttr ($ns+$os+"ctr_finger1.roll"+$i)`;
        setAttr ($ns+$os+"ctr_finger1.roll"+$i) $custom;
        setAttr ($ns+$side+"ctr_finger1.roll"+$i) $custom2;
    }
    
    $t = `getAttr ($ns+$side+"ctr_legIK1.t")`;
    $r = `getAttr ($ns+$side+"ctr_legIK1.r")`;
    $t2 = `getAttr ($ns+$os+"ctr_legIK1.t")`;
    $r2 = `getAttr ($ns+$os+"ctr_legIK1.r")`;
    setAttr ($ns+$os+"ctr_legIK1.t") $t[0] $t[1] ($t[2]*-1);
    setAttr ($ns+$os+"ctr_legIK1.r") ($r[0]*-1) ($r[1]*-1) $r[2];
    setAttr ($ns+$side+"ctr_legIK1.t") $t2[0] $t2[1] ($t2[2]*-1);
    setAttr ($ns+$side+"ctr_legIK1.r") ($r2[0]*-1) ($r2[1]*-1) $r2[2];
    
    $custom = `getAttr ($ns+$side+"ctr_legIK1.knee")`;
    $custom2 = `getAttr ($ns+$os+"ctr_legIK1.knee")`;
    setAttr ($ns+$os+"ctr_legIK1.knee") ($custom*-1);
    setAttr ($ns+$side+"ctr_legIK1.knee") ($custom2*-1);
    $custom = `getAttr ($ns+$side+"ctr_legIK1.ball")`;
    $custom2 = `getAttr ($ns+$os+"ctr_legIK1.ball")`;
    setAttr ($ns+$os+"ctr_legIK1.ball") $custom;
    setAttr ($ns+$side+"ctr_legIK1.ball") $custom2;
    $custom = `getAttr ($ns+$side+"ctr_legIK1.bank")`;
    $custom2 = `getAttr ($ns+$os+"ctr_legIK1.bank")`;
    setAttr ($ns+$os+"ctr_legIK1.bank") $custom;
    setAttr ($ns+$side+"ctr_legIK1.bank") $custom2;
    $custom = `getAttr ($ns+$side+"ctr_legIK1.sideBank")`;
    $custom2 = `getAttr ($ns+$os+"ctr_legIK1.sideBank")`;
    setAttr ($ns+$os+"ctr_legIK1.sideBank") $custom;
    setAttr ($ns+$side+"ctr_legIK1.sideBank") $custom2;
    $custom = `getAttr ($ns+$side+"ctr_legIK1.toePivot")`;
    $custom2 = `getAttr ($ns+$os+"ctr_legIK1.toePivot")`;
    setAttr ($ns+$os+"ctr_legIK1.toePivot") $custom;
    setAttr ($ns+$side+"ctr_legIK1.toePivot") $custom2;
    $custom = `getAttr ($ns+$side+"ctr_legIK1.heelPivot")`;
    $custom2 = `getAttr ($ns+$os+"ctr_legIK1.heelPivot")`;
    setAttr ($ns+$os+"ctr_legIK1.heelPivot") $custom;
    setAttr ($ns+$side+"ctr_legIK1.heelPivot") $custom2;
    
    // mirror mid controls
    $r = `getAttr ($ns+"ctr_hips1.r")`;
    setAttr ($ns+"ctr_hips1.r") ($r[0]*-1) ($r[1]*-1) ($r[2]*-1);
    $t = `getAttr ($ns+"ctr_hips1.t")`;
    setAttr ($ns+"ctr_hips1.t") $t[0] ($t[1]*-1) $t[2];
    
    $r = `getAttr ($ns+"ctr_root1.r")`;
    setAttr ($ns+"ctr_root1.r") ($r[0]*-1) ($r[1]*-1) $r[2];
    $t = `getAttr ($ns+"ctr_root1.t")`;
    setAttr ($ns+"ctr_root1.t") $t[0] $t[1] ($t[2]*-1);
    
    $r = `getAttr ($ns+"ctr_spineIK1.r")`;
    setAttr ($ns+"ctr_spineIK1.r") $r[0] ($r[1]*-1) ($r[2]*-1);
    $t = `getAttr ($ns+"ctr_spineIK1.t")`;
    setAttr ($ns+"ctr_spineIK1.t") $t[0] ($t[1]*-1) ($t[2]*-1);
    
    for ($i=1; `objExists ($ns+"ctr_spineFK"+$i)`; $i++){
        $r = `getAttr ($ns+"ctr_spineFK"+$i+".r")`;
        setAttr ($ns+"ctr_spineFK"+$i+".r") ($r[0]*-1) ($r[1]*-1) $r[2];
        }
    
    $t = `getAttr ($ns+"ctr_head1.t")`;
    $r = `getAttr ($ns+"ctr_head1.r")`;
    setAttr ($ns+"ctr_head1.t") $t[0] $t[1] ($t[2]*-1);
    setAttr ($ns+"ctr_head1.r") ($r[0]*-1) $r[1] $r[2];
} // end mirrorControl ()

// zeros
global proc zerosFace()
{
    string $side = "L_";
    string $ns = `textField -q -tx nsTF`;
    
    setAttr ($ns+"ctr_jaw1.t") 0 0 0;
    setAttr ($ns+"ctr_jaw1.r") 0 0 0;
    setAttr ($ns+"ctr_jaw1.stickyLips") 0;
    setAttr ($ns+"ctr_toung1.t") 0 0 0;
    setAttr ($ns+"ctr_toung1.r") 0 0 0;
    for($i=0; $i<2; $i++){
        if ($i ==1) $side = "R_";
        setAttr ($ns+$side+"ctr_lowMouth1.t") 0 0 0;
        setAttr ($ns+$side+"ctr_lowMouth1.r") 0 0 0;
        setAttr ($ns+$side+"ctr_lowMouth1.s") 1 1 1;
        setAttr ($ns+$side+"ctr_uppMouth1.t") 0 0 0;
        setAttr ($ns+$side+"ctr_uppMouth1.r") 0 0 0;
        setAttr ($ns+$side+"ctr_uppMouth1.s") 1 1 1;
        setAttr ($ns+$side+"ctr_cornerMouth1.t") 0 0 0;
        setAttr ($ns+$side+"ctr_cornerMouth1.r") 0 0 0;
        setAttr ($ns+$side+"ctr_cornerMouth1.s") 1 1 1;
        setAttr ($ns+$side+"ctr_cheek1.t") 0 0 0;
        setAttr ($ns+$side+"ctr_cheek1.r") 0 0 0;
        setAttr ($ns+$side+"ctr_cheek1.s") 1 1 1;
        setAttr ($ns+$side+"ctr_cheekBone1.t") 0 0 0;
        setAttr ($ns+$side+"ctr_cheekBone1.r") 0 0 0;
        setAttr ($ns+$side+"ctr_cheekBone1.s") 1 1 1;
        setAttr ($ns+$side+"ctr_nostril1.t") 0 0 0;
        setAttr ($ns+$side+"ctr_nostril1.r") 0 0 0;
        setAttr ($ns+$side+"ctr_nostril1.s") 1 1 1;
        setAttr ($ns+$side+"ctr_brow1.t") 0 0 0;
        setAttr ($ns+$side+"ctr_brow1.r") 0 0 0;
        setAttr ($ns+$side+"ctr_brow1.s") 1 1 1;
        setAttr ($ns+$side+"ctr_brow2.t") 0 0 0;
        setAttr ($ns+$side+"ctr_brow2.r") 0 0 0;
        setAttr ($ns+$side+"ctr_brow2.s") 1 1 1;
        setAttr ($ns+$side+"ctr_brow3.t") 0 0 0;
        setAttr ($ns+$side+"ctr_brow3.r") 0 0 0;
        setAttr ($ns+$side+"ctr_brow3.s") 1 1 1;
        setAttr ($ns+$side+"ctr_eyelid1.r") 0 0 0;
        setAttr ($ns+$side+"ctr_eyelid2.r") 0 0 0;
        
    }
    
}
// zeros
global proc zeros()
{
    string $side = "L_";
    string $ns = `textField -q -tx nsTF`;
    
    for($i=0; $i<=1; $i++){
        if($i==1){
            for ($j=1; `objExists ($ns+"ctr_spineFK"+$j)`; $j++)
                setAttr ($ns+"ctr_spineFK"+$j+".r") 0 0 0;
            setAttr ($ns+"ctr_hips1.r") 0 0 0;
            setAttr ($ns+"ctr_root1.r") 0 0 0;
            setAttr ($ns+"ctr_root1.t") 0 0 0;
            setAttr ($ns+"ctr_spineIK1.r") 0 0 0;
            setAttr ($ns+"ctr_spineIK1.t") 0 0 0;
            setAttr ($ns+"ctr_head1.r") 0 0 0;
            setAttr ($ns+"ctr_head1.t") 0 0 0;
            $side = "R_";
            }
            
        setAttr ($ns+$side+"ctr_legIK1.t") 0 0 0;
        setAttr ($ns+$side+"ctr_legIK1.r") 0 0 0;
        setAttr ($ns+$side+"ctr_legIK1.knee") 0;
        setAttr ($ns+$side+"ctr_legIK1.ball") 0;
        setAttr ($ns+$side+"ctr_legIK1.bank") 0;
        setAttr ($ns+$side+"ctr_legIK1.sideBank") 0;
        setAttr ($ns+$side+"ctr_legIK1.toePivot") 0;
        setAttr ($ns+$side+"ctr_legIK1.heelPivot") 0;
        
        setAttr ($ns+$side+"ctr_armIK1.t") 0 0 0;
        setAttr ($ns+$side+"ctr_armIK1.r") 0 0 0;
        
        for ($j=1; `objExists ("L_jnt_Afinger"+$j)`; $j++){
            setAttr ($ns+$side+"ctr_finger1.base"+$j) 0;
            setAttr ($ns+$side+"ctr_finger1.mid"+$j) 0;
            setAttr ($ns+$side+"ctr_finger1.tip"+$j) 0;
            setAttr ($ns+$side+"ctr_finger1.spread"+$j) 0;
            setAttr ($ns+$side+"ctr_finger1.roll"+$j) 0;
            }
        
        setAttr ($ns+$side+"ctr_clavicle1.r") 0 0 0;
        setAttr ($ns+$side+"ctr_shoulderFK1.r") 0 0 0;
        setAttr ($ns+$side+"ctr_elbowFK1.tx") 0;
        setAttr ($ns+$side+"ctr_elbowFK1.r") 0 0 0;
        setAttr ($ns+$side+"ctr_wristFK1.tx") 0;
        setAttr ($ns+$side+"ctr_wristFK1.r") 0 0 0;
    }
} // end zeros() 
// pose library

global proc writeAttr (string $ns, string $pose)
{    
    // make directory and designate file path to set project
    sysFile -md (`workspace -q -rd` +  "/RH_poses/");
    string $filePath = (`workspace -q -rd` +  "/RH_poses/" + $pose + ".txt");
    
    // open file for writing
    $fileId = `fopen $filePath "w"`;
    
    // used to get attributes
    float $t[]; float $r[]; float $s[]; float $e[];
    
    $t = `getAttr ($ns + "ctr_mover1.t")`;
    $r = `getAttr ($ns + "ctr_mover1.r")`;
    $e[0] = `getAttr ($ns + "ctr_mover1.globalScale")`;
    fprint $fileId "ctr_mover1\n";
    fprint $fileId ($t[0] + " " + $t[1] + " " + $t[2] + "\n");
    fprint $fileId ($r[0] + " " + $r[1] + " " + $r[2] + "\n");
    fprint $fileId ($e[0] + "\n");
        
    $t = `getAttr ($ns + "L_ctr_legIK1.t")`;
    $r = `getAttr ($ns + "L_ctr_legIK1.r")`;
    $e[0] = `getAttr ($ns + "L_ctr_legIK1.knee")`;
    $e[1] = `getAttr ($ns + "L_ctr_legIK1.poleVector")`;
    $e[2] = `getAttr ($ns + "L_ctr_legIK1.ball")`;
    $e[3] = `getAttr ($ns + "L_ctr_legIK1.bank")`;
    $e[4] = `getAttr ($ns + "L_ctr_legIK1.sideBank")`;
    $e[5] = `getAttr ($ns + "L_ctr_legIK1.toePivot")`;
    $e[6] = `getAttr ($ns + "L_ctr_legIK1.heelPivot")`;
    $e[7] = `getAttr ($ns + "L_ctr_legIK1.hips")`;
    
    fprint $fileId "L_ctr_legIK1\n";
    fprint $fileId ($t[0] + " " + $t[1] + " " + $t[2] + "\n");
    fprint $fileId ($r[0] + " " + $r[1] + " " + $r[2] + "\n");
    fprint $fileId ($e[0] + "\n");
    fprint $fileId ($e[1] + "\n");
    fprint $fileId ($e[2] + "\n");
    fprint $fileId ($e[3] + "\n");
    fprint $fileId ($e[4] + "\n");
    fprint $fileId ($e[5] + "\n");
    fprint $fileId ($e[6] + "\n");
    fprint $fileId ($e[7] + "\n");
        
    $t = `getAttr ($ns + "R_ctr_legIK1.t")`;
    $r = `getAttr ($ns + "R_ctr_legIK1.r")`;
    $e[0] = `getAttr ($ns + "R_ctr_legIK1.knee")`;
    $e[1] = `getAttr ($ns + "R_ctr_legIK1.poleVector")`;
    $e[2] = `getAttr ($ns + "R_ctr_legIK1.ball")`;
    $e[3] = `getAttr ($ns + "R_ctr_legIK1.bank")`;
    $e[4] = `getAttr ($ns + "R_ctr_legIK1.sideBank")`;
    $e[5] = `getAttr ($ns + "R_ctr_legIK1.toePivot")`;
    $e[6] = `getAttr ($ns + "R_ctr_legIK1.heelPivot")`;
    $e[7] = `getAttr ($ns + "R_ctr_legIK1.hips")`;
    
    fprint $fileId "R_ctr_legIK1\n";
    fprint $fileId ($t[0] + " " + $t[1] + " " + $t[2] + "\n");
    fprint $fileId ($r[0] + " " + $r[1] + " " + $r[2] + "\n");
    fprint $fileId ($e[0] + "\n");
    fprint $fileId ($e[1] + "\n");
    fprint $fileId ($e[2] + "\n");
    fprint $fileId ($e[3] + "\n");
    fprint $fileId ($e[4] + "\n");
    fprint $fileId ($e[5] + "\n");
    fprint $fileId ($e[6] + "\n");
    fprint $fileId ($e[7] + "\n");
    
    $t = `getAttr ($ns + "L_ctr_kneeIK1.t")`;
    fprint $fileId "L_ctr_kneeIK1\n";
    fprint $fileId ($t[0] + " " + $t[1] + " " + $t[2] + "\n");
    $t = `getAttr ($ns + "R_ctr_kneeIK1.t")`;
    fprint $fileId "R_ctr_kneeIK1\n";
    fprint $fileId ($t[0] + " " + $t[1] + " " + $t[2] + "\n");
    
    $t = `getAttr ($ns + "ctr_root1.t")`;
    $r = `getAttr ($ns + "ctr_root1.r")`;
    $e[0] = `getAttr ($ns + "ctr_root1.leftArm")`;
    $e[1] = `getAttr ($ns + "ctr_root1.rightArm")`;
    $e[2] = `getAttr ($ns + "ctr_root1.spine")`;
    fprint $fileId "ctr_root1\n";
    fprint $fileId ($t[0] + " " + $t[1] + " " + $t[2] + "\n");
    fprint $fileId ($r[0] + " " + $r[1] + " " + $r[2] + "\n");
    fprint $fileId ($e[0] + "\n");
    fprint $fileId ($e[1] + "\n");
    fprint $fileId ($e[2] + "\n");
    
    $t = `getAttr ($ns + "ctr_hips1.t")`;
    $r = `getAttr ($ns + "ctr_hips1.r")`;
    fprint $fileId "ctr_hips1\n";
    fprint $fileId ($t[0] + " " + $t[1] + " " + $t[2] + "\n");
    fprint $fileId ($r[0] + " " + $r[1] + " " + $r[2] + "\n");
    
    for ($i = 1; `objExists ($ns+"ctr_spineFK"+$i)`; $i++){
        $t = `getAttr ($ns + "ctr_spineFK1.t")`;
        $r = `getAttr ($ns + "ctr_spineFK1.r")`;    
        fprint $fileId ("ctr_spineFK"+$i+"\n");
        fprint $fileId ($t[0] + "\n");
        fprint $fileId ($r[0] + " " + $r[1] + " " + $r[2] + "\n");
    }
    
    $t = `getAttr ($ns + "ctr_spineIK1.t")`;
    $r = `getAttr ($ns + "ctr_spineIK1.r")`;
    fprint $fileId "ctr_spineIK1\n";
    fprint $fileId ($t[0] + " " + $t[1] + " " + $t[2] + "\n");
    fprint $fileId ($r[0] + " " + $r[1] + " " + $r[2] + "\n");
    
    $r = `getAttr ($ns + "L_ctr_clavicle1.r")`;
    fprint $fileId "L_ctr_clavicle1\n";
    fprint $fileId ($r[0] + " " + $r[1] + " " + $r[2] + "\n");
    $r = `getAttr ($ns + "R_ctr_clavicle1.r")`;
    fprint $fileId "R_ctr_clavicle1\n";
    fprint $fileId ($r[0] + " " + $r[1] + " " + $r[2] + "\n");
    
    $r = `getAttr ($ns + "L_ctr_shoulderFK1.r")`;
    $e[0] = `getAttr ($ns + "L_ctr_shoulderFK1.chest")`;
    fprint $fileId "L_ctr_shoulderFK1\n";
    fprint $fileId ($r[0] + " " + $r[1] + " " + $r[2] + "\n");
    fprint $fileId ($e[0] + "\n");
    $r = `getAttr ($ns + "R_ctr_shoulderFK1.r")`;
    $e[0] = `getAttr ($ns + "R_ctr_shoulderFK1.chest")`;
    fprint $fileId "R_ctr_shoulderFK1\n";
    fprint $fileId ($r[0] + " " + $r[1] + " " + $r[2] + "\n");
    fprint $fileId ($e[0] + "\n");
    
    $t = `getAttr ($ns + "L_ctr_elbowFK1.t")`;
    $r = `getAttr ($ns + "L_ctr_elbowFK1.r")`;
    fprint $fileId "L_ctr_elbowFK1\n";
    fprint $fileId ($t[0] + "\n");
    fprint $fileId ($r[0] + " " + $r[1] + " " + $r[2] + "\n");
    $t = `getAttr ($ns + "R_ctr_elbowFK1.t")`;
    $r = `getAttr ($ns + "R_ctr_elbowFK1.r")`;
    fprint $fileId "R_ctr_elbowFK1\n";
    fprint $fileId ($t[0] + "\n");
    fprint $fileId ($r[0] + " " + $r[1] + " " + $r[2] + "\n");
    
    $t = `getAttr ($ns + "L_ctr_wristFK1.t")`;
    $r = `getAttr ($ns + "L_ctr_wristFK1.r")`;
    fprint $fileId "L_ctr_wristFK1\n";
    fprint $fileId ($t[0] + "\n");
    fprint $fileId ($r[0] + " " + $r[1] + " " + $r[2] + "\n");
    $t = `getAttr ($ns + "R_ctr_wristFK1.t")`;
    $r = `getAttr ($ns + "R_ctr_wristFK1.r")`;
    fprint $fileId "R_ctr_wristFK1\n";
    fprint $fileId ($t[0] + "\n");
    fprint $fileId ($r[0] + " " + $r[1] + " " + $r[2] + "\n");
    
    for ($i = 1; `objExists ($ns+"L_ctr_finger1.base"+$i)`; $i++){
        $e[0] = `getAttr ($ns+"L_ctr_finger1.base"+$i)`;
        $e[1] = `getAttr ($ns+"L_ctr_finger1.mid"+$i)`;
        $e[2] = `getAttr ($ns+"L_ctr_finger1.tip"+$i)`;
        $e[3] = `getAttr ($ns+"L_ctr_finger1.spread"+$i)`;
        $e[4] = `getAttr ($ns+"L_ctr_finger1.roll"+$i)`;
        fprint $fileId ("L_finger" +$i+ "\n");
        fprint $fileId ($e[0] + "\n");
        fprint $fileId ($e[1] + "\n");
        fprint $fileId ($e[2] + "\n");
        fprint $fileId ($e[3] + "\n");
        fprint $fileId ($e[4] + "\n");
    }
    
    for ($i = 1; `objExists ($ns+"R_ctr_finger1.base"+$i)`; $i++){
        $e[0] = `getAttr ($ns+"R_ctr_finger1.base"+$i)`;
        $e[1] = `getAttr ($ns+"R_ctr_finger1.mid"+$i)`;
        $e[2] = `getAttr ($ns+"R_ctr_finger1.tip"+$i)`;
        $e[3] = `getAttr ($ns+"R_ctr_finger1.spread"+$i)`;
        $e[4] = `getAttr ($ns+"R_ctr_finger1.roll"+$i)`;
        fprint $fileId ("R_finger" +$i+ "\n");
        fprint $fileId ($e[0] + "\n");
        fprint $fileId ($e[1] + "\n");
        fprint $fileId ($e[2] + "\n");
        fprint $fileId ($e[3] + "\n");
        fprint $fileId ($e[4] + "\n");
    }
    
    $t = `getAttr ($ns + "L_ctr_armIK1.t")`;
    $r = `getAttr ($ns + "L_ctr_armIK1.r")`;
    $e[0] = `getAttr ($ns + "L_ctr_armIK1.elbow")`;
    $e[1] = `getAttr ($ns + "L_ctr_armIK1.poleVector")`;
    $e[2] = `getAttr ($ns + "L_ctr_armIK1.head")`;
    $e[3] = `getAttr ($ns + "L_ctr_armIK1.chest")`;
    $e[4] = `getAttr ($ns + "L_ctr_armIK1.hips")`;
    $e[5] = `getAttr ($ns + "L_ctr_armIK1.leftFoot")`;
    $e[6] = `getAttr ($ns + "L_ctr_armIK1.rightFoot")`;
    fprint $fileId "L_ctr_armIK1\n";
    fprint $fileId ($t[0] + " " + $t[1] + " " + $t[2] + "\n");
    fprint $fileId ($r[0] + " " + $r[1] + " " + $r[2] + "\n");
    fprint $fileId ($e[0] + "\n");
    fprint $fileId ($e[1] + "\n");
    fprint $fileId ($e[2] + "\n");
    fprint $fileId ($e[3] + "\n");
    fprint $fileId ($e[4] + "\n");
    fprint $fileId ($e[5] + "\n");
    fprint $fileId ($e[6] + "\n");
    
    $t = `getAttr ($ns + "R_ctr_armIK1.t")`;
    $r = `getAttr ($ns + "R_ctr_armIK1.r")`;
    $e[0] = `getAttr ($ns + "R_ctr_armIK1.elbow")`;
    $e[1] = `getAttr ($ns + "R_ctr_armIK1.poleVector")`;
    $e[2] = `getAttr ($ns + "R_ctr_armIK1.head")`;
    $e[3] = `getAttr ($ns + "R_ctr_armIK1.chest")`;
    $e[4] = `getAttr ($ns + "R_ctr_armIK1.hips")`;
    $e[5] = `getAttr ($ns + "R_ctr_armIK1.leftFoot")`;
    $e[6] = `getAttr ($ns + "R_ctr_armIK1.rightFoot")`;
    fprint $fileId "R_ctr_armIK1\n";
    fprint $fileId ($t[0] + " " + $t[1] + " " + $t[2] + "\n");
    fprint $fileId ($r[0] + " " + $r[1] + " " + $r[2] + "\n");
    fprint $fileId ($e[0] + "\n");
    fprint $fileId ($e[1] + "\n");
    fprint $fileId ($e[2] + "\n");
    fprint $fileId ($e[3] + "\n");
    fprint $fileId ($e[4] + "\n");
    fprint $fileId ($e[5] + "\n");
    fprint $fileId ($e[6] + "\n");
    
    $t = `getAttr ($ns + "ctr_head1.t")`;
    $r = `getAttr ($ns + "ctr_head1.r")`;
    $e[0] = `getAttr ($ns + "ctr_head1.chest")`;
    fprint $fileId "ctr_head1\n";
    fprint $fileId ($t[0] + " " + $t[1] + " " + $t[2] + "\n");
    fprint $fileId ($r[0] + " " + $r[1] + " " + $r[2] + "\n");
    fprint $fileId ($e[0] + "\n");
    fclose $fileId;
    
} // end readAttr ()

global proc savePose ()
{
    string $getNamespace = `textField -q -tx nsTF`;
    string $getPoseName = `textField -q -tx pnTF`;
    
    writeAttr ($getNamespace, $getPoseName);
} // end saveAttr ()


global proc readAttr (string $ns, string $pose)
{
    string $fileName = ($ns + $pose);
    // open file for writing
    $fileId = `fopen $fileName "r"`;
    
    string $ctr;
    string $get;
    float $val[];
    
    // ctr_mover1
    $ctr = `fgetword $fileId`;
    // t
    $get = `fgetword $fileId`;
    $val[0] = $get;
    $get = `fgetword $fileId`;
    $val[1] = $get;
    $get = `fgetword $fileId`;
    $val[2] = $get;
    // r
    $get = `fgetword $fileId`;
    $val[3] = $get;
    $get = `fgetword $fileId`;
    $val[4] = $get;
    $get = `fgetword $fileId`;
    $val[5] = $get;
    // e
    $get = `fgetword $fileId`;
    $val[6] = $get;
    
    setAttr ($ns+$ctr+".t") $val[0] $val[1] $val[2];
    setAttr ($ns+$ctr+".r") $val[3] $val[4] $val[5];
    setAttr ($ns+$ctr+".globalScale") $val[6];
    
    // L_ctr_legIK1
    $ctr = `fgetword $fileId`;
    // t
    $get = `fgetword $fileId`;
    $val[0] = $get;
    $get = `fgetword $fileId`;
    $val[1] = $get;
    $get = `fgetword $fileId`;
    $val[2] = $get;
    // r
    $get = `fgetword $fileId`;
    $val[3] = $get;
    $get = `fgetword $fileId`;
    $val[4] = $get;
    $get = `fgetword $fileId`;
    $val[5] = $get;
    // e
    $get = `fgetword $fileId`;
    $val[6] = $get;
    $get = `fgetword $fileId`;
    $val[7] = $get;
    $get = `fgetword $fileId`;
    $val[8] = $get;
    $get = `fgetword $fileId`;
    $val[9] = $get;
    $get = `fgetword $fileId`;
    $val[10] = $get;
    $get = `fgetword $fileId`;
    $val[11] = $get;
    $get = `fgetword $fileId`;
    $val[12] = $get;
    $get = `fgetword $fileId`;
    $val[13] = $get;
    
    setAttr ($ns+$ctr+".t") $val[0] $val[1] $val[2];
    setAttr ($ns+$ctr+".r") $val[3] $val[4] $val[5];
    setAttr ($ns+$ctr+".knee") $val[6];
    setAttr ($ns+$ctr+".poleVector") $val[7];
    setAttr ($ns+$ctr+".ball") $val[8];
    setAttr ($ns+$ctr+".bank") $val[9];
    setAttr ($ns+$ctr+".sideBank") $val[10];
    setAttr ($ns+$ctr+".toePivot") $val[11];
    setAttr ($ns+$ctr+".heelPivot") $val[12];
    setAttr ($ns+$ctr+".hips") $val[13];
    
    // R_ctr_legIK1
    $ctr = `fgetword $fileId`;
    // t
    $get = `fgetword $fileId`;
    $val[0] = $get;
    $get = `fgetword $fileId`;
    $val[1] = $get;
    $get = `fgetword $fileId`;
    $val[2] = $get;
    // r
    $get = `fgetword $fileId`;
    $val[3] = $get;
    $get = `fgetword $fileId`;
    $val[4] = $get;
    $get = `fgetword $fileId`;
    $val[5] = $get;
    // e
    $get = `fgetword $fileId`;
    $val[6] = $get;
    $get = `fgetword $fileId`;
    $val[7] = $get;
    $get = `fgetword $fileId`;
    $val[8] = $get;
    $get = `fgetword $fileId`;
    $val[9] = $get;
    $get = `fgetword $fileId`;
    $val[10] = $get;
    $get = `fgetword $fileId`;
    $val[11] = $get;
    $get = `fgetword $fileId`;
    $val[12] = $get;
    $get = `fgetword $fileId`;
    $val[13] = $get;
    
    setAttr ($ns+$ctr+".t") $val[0] $val[1] $val[2];
    setAttr ($ns+$ctr+".r") $val[3] $val[4] $val[5];
    setAttr ($ns+$ctr+".knee") $val[6];
    setAttr ($ns+$ctr+".poleVector") $val[7];
    setAttr ($ns+$ctr+".ball") $val[8];
    setAttr ($ns+$ctr+".bank") $val[9];
    setAttr ($ns+$ctr+".sideBank") $val[10];
    setAttr ($ns+$ctr+".toePivot") $val[11];
    setAttr ($ns+$ctr+".heelPivot") $val[12];
    setAttr ($ns+$ctr+".hips") $val[13];
    
    // L_ctr_kneeIK1
    $ctr = `fgetword $fileId`;
    // t
    $get = `fgetword $fileId`;
    $val[0] = $get;
    $get = `fgetword $fileId`;
    $val[1] = $get;
    $get = `fgetword $fileId`;
    $val[2] = $get;
    
    setAttr ($ns+$ctr+".t") $val[0] $val[1] $val[2];
    
    // R_ctr_kneeIK1
    $ctr = `fgetword $fileId`;
    // t
    $get = `fgetword $fileId`;
    $val[0] = $get;
    $get = `fgetword $fileId`;
    $val[1] = $get;
    $get = `fgetword $fileId`;
    $val[2] = $get;
    
    setAttr ($ns+$ctr+".t") $val[0] $val[1] $val[2];
    
    // ctr_root1
    $ctr = `fgetword $fileId`;
    // t
    $get = `fgetword $fileId`;
    $val[0] = $get;
    $get = `fgetword $fileId`;
    $val[1] = $get;
    $get = `fgetword $fileId`;
    $val[2] = $get;
    // r
    $get = `fgetword $fileId`;
    $val[3] = $get;
    $get = `fgetword $fileId`;
    $val[4] = $get;
    $get = `fgetword $fileId`;
    $val[5] = $get;
    // e
    $get = `fgetword $fileId`;
    $val[6] = $get;
    $get = `fgetword $fileId`;
    $val[7] = $get;
    $get = `fgetword $fileId`;
    $val[8] = $get;
    
    //setAttr ($ns+$ctr+".t") $val[0] $val[1] $val[2];
    //setAttr ($ns+$ctr+".r") $val[3] $val[4] $val[5];
    setAttr ($ns+$ctr+".leftArm") $val[6];
    setAttr ($ns+$ctr+".rightArm") $val[7];
    setAttr ($ns+$ctr+".spine") $val[8];
    
    // ctr_hips1
    $ctr = `fgetword $fileId`;
    // t
    $get = `fgetword $fileId`;
    $val[0] = $get;
    $get = `fgetword $fileId`;
    $val[1] = $get;
    $get = `fgetword $fileId`;
    $val[2] = $get;
    // r
    $get = `fgetword $fileId`;
    $val[3] = $get;
    $get = `fgetword $fileId`;
    $val[4] = $get;
    $get = `fgetword $fileId`;
    $val[5] = $get;
    
    setAttr ($ns+$ctr+".t") $val[0] $val[1] $val[2];
    setAttr ($ns+$ctr+".r") $val[3] $val[4] $val[5];
    
    for ($i = 1; `objExists ($ns+"ctr_spineFK"+$i)`; $i++){    
        // ctr_spineFKi
        $ctr = `fgetword $fileId`;
        // t
        $get = `fgetword $fileId`;
        $val[0] = $get;
        // r
        $get = `fgetword $fileId`;
        $val[1] = $get;
        $get = `fgetword $fileId`;
        $val[2] = $get;
        $get = `fgetword $fileId`;
        $val[3] = $get;
        
        setAttr ($ns+$ctr+".tx") $val[0];
        setAttr ($ns+$ctr+".r") $val[1] $val[2] $val[3];
    }
    
    // ctr_spineIK1
    $ctr = `fgetword $fileId`;
    // t
    $get = `fgetword $fileId`;
    $val[0] = $get;
    $get = `fgetword $fileId`;
    $val[1] = $get;
    $get = `fgetword $fileId`;
    $val[2] = $get;
    // r
    $get = `fgetword $fileId`;
    $val[3] = $get;
    $get = `fgetword $fileId`;
    $val[4] = $get;
    $get = `fgetword $fileId`;
    $val[5] = $get;
    
    setAttr ($ns+$ctr+".t") $val[0] $val[1] $val[2];
    setAttr ($ns+$ctr+".r") $val[3] $val[4] $val[5];
    
    // L_ctr_clavicle1
    $ctr = `fgetword $fileId`;
    // r
    $get = `fgetword $fileId`;
    $val[3] = $get;
    $get = `fgetword $fileId`;
    $val[4] = $get;
    $get = `fgetword $fileId`;
    $val[5] = $get;
    
    setAttr ($ns+$ctr+".r") $val[3] $val[4] $val[5];
    
    // R_ctr_clavicle1
    $ctr = `fgetword $fileId`;
    // r
    $get = `fgetword $fileId`;
    $val[3] = $get;
    $get = `fgetword $fileId`;
    $val[4] = $get;
    $get = `fgetword $fileId`;
    $val[5] = $get;
    
    setAttr ($ns+$ctr+".r") $val[3] $val[4] $val[5];
    
    // L_ctr_shoulderFK1
    $ctr = `fgetword $fileId`;
    // r
    $get = `fgetword $fileId`;
    $val[3] = $get;
    $get = `fgetword $fileId`;
    $val[4] = $get;
    $get = `fgetword $fileId`;
    $val[5] = $get;
    // e
    $get = `fgetword $fileId`;
    $val[6] = $get;
    
    setAttr ($ns+$ctr+".r") $val[3] $val[4] $val[5];
    setAttr ($ns+$ctr+".chest") $val[6];
    
    // R_ctr_shoulderFK1
    $ctr = `fgetword $fileId`;
    // r
    $get = `fgetword $fileId`;
    $val[3] = $get;
    $get = `fgetword $fileId`;
    $val[4] = $get;
    $get = `fgetword $fileId`;
    $val[5] = $get;
    // e
    $get = `fgetword $fileId`;
    $val[6] = $get;
    
    setAttr ($ns+$ctr+".r") $val[3] $val[4] $val[5];
    setAttr ($ns+$ctr+".chest") $val[6];
    
    // L_ctr_elbowFK1
    $ctr = `fgetword $fileId`;
    // t
    $get = `fgetword $fileId`;
    $val[0] = $get;
    // r
    $get = `fgetword $fileId`;
    $val[3] = $get;
    $get = `fgetword $fileId`;
    $val[4] = $get;
    $get = `fgetword $fileId`;
    $val[5] = $get;
    
    setAttr ($ns+$ctr+".tx") $val[0];
    setAttr ($ns+$ctr+".r") $val[3] $val[4] $val[5];
    
    // R_ctr_elbowFK1
    $ctr = `fgetword $fileId`;
    // t
    $get = `fgetword $fileId`;
    $val[0] = $get;
    // r
    $get = `fgetword $fileId`;
    $val[3] = $get;
    $get = `fgetword $fileId`;
    $val[4] = $get;
    $get = `fgetword $fileId`;
    $val[5] = $get;
    
    setAttr ($ns+$ctr+".tx") $val[0];
    setAttr ($ns+$ctr+".r") $val[3] $val[4] $val[5];
    
    // L_ctr_wristFK1
    $ctr = `fgetword $fileId`;
    // t
    $get = `fgetword $fileId`;
    $val[0] = $get;
    // r
    $get = `fgetword $fileId`;
    $val[3] = $get;
    $get = `fgetword $fileId`;
    $val[4] = $get;
    $get = `fgetword $fileId`;
    $val[5] = $get;
    
    setAttr ($ns+$ctr+".tx") $val[0];
    setAttr ($ns+$ctr+".r") $val[3] $val[4] $val[5];
    
    // R_ctr_wristFK1
    $ctr = `fgetword $fileId`;
    // t
    $get = `fgetword $fileId`;
    $val[0] = $get;
    // r
    $get = `fgetword $fileId`;
    $val[3] = $get;
    $get = `fgetword $fileId`;
    $val[4] = $get;
    $get = `fgetword $fileId`;
    $val[5] = $get;
    
    setAttr ($ns+$ctr+".tx") $val[0];
    setAttr ($ns+$ctr+".r") $val[3] $val[4] $val[5];
    
    for ($i = 1; `objExists ($ns+"L_ctr_finger1.base"+$i)`; $i++){
        $ctr = `fgetword $fileId`;
        // e
        $get = `fgetword $fileId`;
        $val[0] = $get;
        $get = `fgetword $fileId`;
        $val[1] = $get;
        $get = `fgetword $fileId`;
        $val[2] = $get;
        $get = `fgetword $fileId`;
        $val[3] = $get;
        $get = `fgetword $fileId`;
        $val[4] = $get;
        
        setAttr ($ns+"L_ctr_finger1.base"+$i) $val[0];
        setAttr ($ns+"L_ctr_finger1.mid"+$i) $val[1];
        setAttr ($ns+"L_ctr_finger1.tip"+$i) $val[2];
        setAttr ($ns+"L_ctr_finger1.spread"+$i) $val[3];
        setAttr ($ns+"L_ctr_finger1.roll"+$i) $val[4];
    }
    
    for ($i = 1; `objExists ($ns+"R_ctr_finger1.base"+$i)`; $i++){
        $ctr = `fgetword $fileId`;
        // e
        $get = `fgetword $fileId`;
        $val[0] = $get;
        $get = `fgetword $fileId`;
        $val[1] = $get;
        $get = `fgetword $fileId`;
        $val[2] = $get;
        $get = `fgetword $fileId`;
        $val[3] = $get;
        $get = `fgetword $fileId`;
        $val[4] = $get;
        
        setAttr ($ns+"R_ctr_finger1.base"+$i) $val[0];
        setAttr ($ns+"R_ctr_finger1.mid"+$i) $val[1];
        setAttr ($ns+"R_ctr_finger1.tip"+$i) $val[2];
        setAttr ($ns+"R_ctr_finger1.spread"+$i) $val[3];
        setAttr ($ns+"R_ctr_finger1.roll"+$i) $val[4];
    }
    
    // L_ctr_armIK1
    $ctr = `fgetword $fileId`;
    // t
    $get = `fgetword $fileId`;
    $val[0] = $get;
    $get = `fgetword $fileId`;
    $val[1] = $get;
    $get = `fgetword $fileId`;
    $val[2] = $get;
    // r
    $get = `fgetword $fileId`;
    $val[3] = $get;
    $get = `fgetword $fileId`;
    $val[4] = $get;
    $get = `fgetword $fileId`;
    $val[5] = $get;
    // e
    $get = `fgetword $fileId`;
    $val[6] = $get;
    $get = `fgetword $fileId`;
    $val[7] = $get;
    $get = `fgetword $fileId`;
    $val[8] = $get;
    $get = `fgetword $fileId`;
    $val[9] = $get;
    $get = `fgetword $fileId`;
    $val[10] = $get;
    $get = `fgetword $fileId`;
    $val[11] = $get;
    $get = `fgetword $fileId`;
    $val[12] = $get;
    
    setAttr ($ns+$ctr+".t") $val[0] $val[1] $val[2];
    setAttr ($ns+$ctr+".r") $val[3] $val[4] $val[5];
    setAttr ($ns+$ctr+".elbow") $val[6];
    setAttr ($ns+$ctr+".poleVector") $val[7];
    setAttr ($ns+$ctr+".head") $val[8];
    setAttr ($ns+$ctr+".chest") $val[9];
    setAttr ($ns+$ctr+".hips") $val[10];
    setAttr ($ns+$ctr+".leftFoot") $val[11];
    setAttr ($ns+$ctr+".rightFoot") $val[12];
    
    // R_ctr_armIK1
    $ctr = `fgetword $fileId`;
    // t
    $get = `fgetword $fileId`;
    $val[0] = $get;
    $get = `fgetword $fileId`;
    $val[1] = $get;
    $get = `fgetword $fileId`;
    $val[2] = $get;
    // r
    $get = `fgetword $fileId`;
    $val[3] = $get;
    $get = `fgetword $fileId`;
    $val[4] = $get;
    $get = `fgetword $fileId`;
    $val[5] = $get;
    // e
    $get = `fgetword $fileId`;
    $val[6] = $get;
    $get = `fgetword $fileId`;
    $val[7] = $get;
    $get = `fgetword $fileId`;
    $val[8] = $get;
    $get = `fgetword $fileId`;
    $val[9] = $get;
    $get = `fgetword $fileId`;
    $val[10] = $get;
    $get = `fgetword $fileId`;
    $val[11] = $get;
    $get = `fgetword $fileId`;
    $val[12] = $get;
    
    setAttr ($ns+$ctr+".t") $val[0] $val[1] $val[2];
    setAttr ($ns+$ctr+".r") $val[3] $val[4] $val[5];
    setAttr ($ns+$ctr+".elbow") $val[6];
    setAttr ($ns+$ctr+".poleVector") $val[7];
    setAttr ($ns+$ctr+".head") $val[8];
    setAttr ($ns+$ctr+".chest") $val[9];
    setAttr ($ns+$ctr+".hips") $val[10];
    setAttr ($ns+$ctr+".leftFoot") $val[11];
    setAttr ($ns+$ctr+".rightFoot") $val[12];
    
    // ctr_head1
    $ctr = `fgetword $fileId`;
    // t
    $get = `fgetword $fileId`;
    $val[0] = $get;
    $get = `fgetword $fileId`;
    $val[1] = $get;
    $get = `fgetword $fileId`;
    $val[2] = $get;
    // r
    $get = `fgetword $fileId`;
    $val[3] = $get;
    $get = `fgetword $fileId`;
    $val[4] = $get;
    $get = `fgetword $fileId`;
    $val[5] = $get;
    // e
    $get = `fgetword $fileId`;
    $val[6] = $get;
    
    setAttr ($ns+$ctr+".t") $val[0] $val[1] $val[2];
    setAttr ($ns+$ctr+".r") $val[3] $val[4] $val[5];
    setAttr ($ns+$ctr+".chest") $val[6];
        
    fclose $fileId;    
} // readPose ()

global proc importPose ()
{
    string $ws = `workspace -q -rd`;
    string $sel[] = `textScrollList -q -si pTSL`;
    string $getNamespace = `textField -q -tx nsTF`;
    string $getPose = ($ws + "RH_poses/" + $sel[0]);
    
    readAttr ($getNamespace, $getPose);
} // readPose ()

global proc getPoses ()
{    
    textScrollList -e -ra pTSL;
    
    string $ws = `workspace -q -rd`;
    string $get[];
    $get = `getFileList -fld ($ws + "/RH_poses/")`;
    
    for ($i=0; $i<size($get); $i++)
        textScrollList -e -a $get[$i] pTSL;
} // end getPoses ()

global proc saveAnim ()
{
    // get file name and remove extension
    string $fileName = `file -q -sn -shn`;
    substitute ".ma" $fileName "";
    substitute ".mb" $fileName "";
    
    string $ns = `textField -q -tx nsTF`;
    select -r ($ns + "Reference");
    sysFile -md (`workspace -q -rd` +  "/scenes/Animation/FBX");
    file -force -options "v=0;" -typ "FBX export" -pr -es (`workspace -q -rd`+"/scenes/Animation/FBX/"+$fileName);
} // end saveAnim ()

global proc oppoAnim ()
{
    int $sf = `playbackOptions -q -ast`;
    int $ef = `playbackOptions -q -aet`;
    string $ns = `textField -q -tx nsTF`;
    
    for ($i=0; $i<$ef; $i++){
        currentTime ($sf+$i);
        
        setKeyframe ($ns + "ctr_root1");
        setKeyframe ($ns + "ctr_hips1");
        setKeyframe ($ns + "ctr_spineIK1");
        setKeyframe ($ns + "ctr_head1");
        
        for ($j=1; `objExists ($ns + "ctr_spineFK"+$j)`; $j++)
            setKeyframe ($ns + "ctr_spineFK"+$j);
            
        setKeyframe ($ns + "L_ctr_legIK1");
        setKeyframe ($ns + "L_ctr_clavicle1");
        setKeyframe ($ns + "L_ctr_shoulderFK1");
        setKeyframe ($ns + "L_ctr_elbowFK1");
        setKeyframe ($ns + "L_ctr_wristFK1");
        setKeyframe ($ns + "L_ctr_finger1");
        setKeyframe ($ns + "L_ctr_armIK1");
        
        setKeyframe ($ns + "R_ctr_legIK1");
        setKeyframe ($ns + "R_ctr_clavicle1");
        setKeyframe ($ns + "R_ctr_shoulderFK1");
        setKeyframe ($ns + "R_ctr_elbowFK1");
        setKeyframe ($ns + "R_ctr_wristFK1");
        setKeyframe ($ns + "R_ctr_finger1");
        setKeyframe ($ns + "R_ctr_armIK1");
    }
    
    for ($i=0; $i<$ef; $i++){
        currentTime ($sf+$i);
        
        mirrorBodyControl;
        
        setKeyframe ($ns + "ctr_root1");
        setKeyframe ($ns + "ctr_hips1");
        setKeyframe ($ns + "ctr_spineIK1");
        setKeyframe ($ns + "ctr_head1");
        
        for ($j=1; `objExists ($ns + "ctr_spineFK"+$j)`; $j++)
            setKeyframe ($ns + "ctr_spineFK"+$j);
            
        setKeyframe ($ns + "L_ctr_legIK1");
        setKeyframe ($ns + "L_ctr_clavicle1");
        setKeyframe ($ns + "L_ctr_shoulderFK1");
        setKeyframe ($ns + "L_ctr_elbowFK1");
        setKeyframe ($ns + "L_ctr_wristFK1");
        setKeyframe ($ns + "L_ctr_finger1");
        setKeyframe ($ns + "L_ctr_armIK1");
        
        setKeyframe ($ns + "R_ctr_legIK1");
        setKeyframe ($ns + "R_ctr_clavicle1");
        setKeyframe ($ns + "R_ctr_shoulderFK1");
        setKeyframe ($ns + "R_ctr_elbowFK1");
        setKeyframe ($ns + "R_ctr_wristFK1");
        setKeyframe ($ns + "R_ctr_finger1");
        setKeyframe ($ns + "R_ctr_armIK1");
    }
} // end oppoAnim ()

global proc unlockButtonsCR ()
{
    intSliderGrp -e-en 1 sjIS;
    intSliderGrp -e-en 1 fiIS;
    checkBox -e-en 1 stCB;
    checkBox -e-en 1 frCB;
    button -e-en 1 spB;
    button -e-en 1 mcB;
    button -e-en 1 srB;
    button -e-en 1 lhB;
}// end unlockButtons ()

global proc unlockButtonsSK ()
{
    button -e-en 1 skB;
    button -e-en 1 pkB;
    button -e-en 1 mgB;
}// end unlockButtons ()

global proc unlockButtonsFG ()
{
    button -e-en 1 mgB;
    button -e-en 1 erB;
    button -e-en 1 bsB;
    button -e-en 1 jrB;
}// end unlockButtons ()

// main window
global proc rigHelper ()
{
    // check if window exists then create window
    if (`window -q -ex rigHelperWindow`) deleteUI rigHelperWindow;
    window -title "Rig Helper v3.2 by Derek Williams" -iconName "RH" -wh 380 400 rigHelperWindow;
    
    menuBarLayout;
        menu -l "Help";
            menuItem -l "Video Tutorial" -c ("showHelp -a \"http://www.youtube.com/watch?v=X4ChhPrONBk\"");
        menu -l "About";
            menuItem -l "My Website" -c ("showHelp -a \"http://www.ndupree.com\"");
        
    tabLayout;
        columnLayout -adj 1 "Control Rig";
        rowColumnLayout -nc 2;
            text -al "left" "Spine Joints";
            intSliderGrp -min 1 -max 24 -v 4 -s 1 -f 1 sjIS;
            
            text -al "left" "Fingers";
            intSliderGrp -min 1 -max 9 -v 5 -s 1 -f 1 fiIS;
        setParent..;
        
        rowColumnLayout -nc 4;
            checkBox -v 0 -l "stretchy"     stCB;
            checkBox -v 0 -l "facial rig"   frCB;
        setParent..;
        separator;
            button -al "center" -l "Make Skeleton Proxy" -c makeJoints spB;
            button -al "center" -l "Make Controls to Edit" -c makeControls mcB;
            button -al "center" -l "Setup Rig" -c setupRig srB;
        separator;
    	    button -al "center" -l "Lock 'n Hide"   -c lockHideAttr lhB;
        separator;
    	    button -al "center" -l "Unlock Buttons"   -c unlockButtonsCR;
    	separator;
        setParent..;
    	
    	columnLayout -adj 1 "Skinning";
    		text -al "left" "Type name of your mesh in the following field.";
    		textField skTF;
        separator;
    		button -al "center" -l "Setup Bound Skeleton"    -c boundSkelWin skB;
        separator;
    	//	button -al "center" -l "Proxy Skinner"    -c proxySkinner pkB;
        //separator;
    		button -l "Paint Skin Weights" -c paintMode;
        separator;
    		text -al "left" "Enter in the weight percent and select the influence.";
            floatSliderGrp -min 0 -max 1 -v 1 -s 0.05 -f 1 wpFS;
        rowColumnLayout -nc 2;
            textScrollList -h 100 infTSL;
            button -l "Load Influences" -c getSkinnedJnts;
        setParent..;
            button -l "Assign Weight to Verts" -c weightPercent;
        separator;
    		rowColumnLayout -nc 2;
    		    checkBox -v 0 -l "Right to Left" invCB;
    		    button -l "Mirror Weights"    -c mirrorWeights mkB;
    		setParent..;
        separator;
    	button -al "center" -l "Smooth All Weights"   -c smoothInf;
    	separator;
    	button -al "center" -l "Unlock Buttons"   -c unlockButtonsSK;
    	separator;
    	setParent..;
    	
    	columnLayout -adj 1 "Facial GUI";
    		    button -al "center" -l "Make GUI Mover"  -c makeFaceGUI mgB;
    		separator;
    		    button -al "center" -l "Make Eye Rig"  -c eyeRigEC erB;
    		separator;
    		    text -al "left" "Select mesh then click button.";
    		    button -al "center" -l "Standard BlendShape GUI"  -c standardBSEC bsB;
            separator;
                text -al "left" "Prep joint facial controls for sliders.";
                button -l "Prepare Facial Network"  -c prepFacialNetwork jrB;
    		separator;
    	        button -al "center" -l "Unlock Buttons"   -c unlockButtonsFG;
    		separator;
        setParent..;
    	columnLayout -adj 1 "Custom GUI";
    		text -al "left" "Select desired control type then press make slider.";
    		rowColumnLayout -nc 6;
    			radioCollection jsTypeRC;
    			radioButton -l "4x4" ff;
    			radioButton -l "1x4" of;
    			radioButton -l "4x1" fo;
    			radioButton -l "4x2" ft;
    			radioButton -l "2x2" tt;
    	 		radioCollection -edit -select ff jsTypeRC;
    		    button -al "right" -l "Make Slider"  -c makeJsEC;
    		setParent..;
    		separator;
    		text -al "left" "Enter name of slider to connect below.";
    	    textField slTF;
    		text -al "left" "Select slider control type.";
    		rowColumnLayout -nc 3;
    			radioCollection sliderTypeRC;
    			radioButton -l "Top Left" tl;
    			radioButton -l "Top" top;
    			radioButton -l "Top Right" tr;
    			radioButton -l "Left" left;
    			radioButton -l "None" n;
    			radioButton -l "Right" right;
    			radioButton -l "Bottom Left" bl;
    			radioButton -l "Bottom" bot;
    			radioButton -l "Bottom Right" br;
    	 		radioCollection -edit -select n sliderTypeRC;
    		setParent..;
    		text -al "left" "Blendshape Connect - Type blendshape node below";
    		textFieldButtonGrp -tx "faceShapes" -bl "Blendshape Slider" -bc sliderConnectEC bsTF;
    	separator;
    	    text -al "left" "Joint Rig Connect - Select desired joint controls";
    	    button -l "Prep Slider" -c sliderNetwork;
    	    button -l "Joint Ctr Slider" -c connectCtrToSliderEC;
    	setParent..;
    	
    	columnLayout "Animation";
    	rowColumnLayout -nc 2;
            text "Namespace ";
            textField nsTF;
        setParent..;
        
    	rowColumnLayout -nc 4;
    	    checkBox -v 0 -l "Reset Source" reCB;
    	    checkBox -v 0 -l "Right to Left" mrCB;
    	    button -l "Mirror Facial Controls" -c mirrorFaceControlEC;
    	    button -l "Zeros" -c zerosFace;
    	setParent..;
        
    	rowColumnLayout -nc 3;
    	    button -l "Zeros" -c zeros;
    	    button -l "Mirror Body Controls" -c mirrorBodyControl;
    	    button -l "Opposite Animation" -c oppoAnim;
    	setParent..;
        separator;
        rowColumnLayout -nc 3;
            text "Pose Name ";
            textField pnTF;
            button -l "Save Pose" -c savePose;
        setParent..;
        rowColumnLayout -nc 2;
            textScrollList -h 100 pTSL;
            button -l "Load Poses" -c getPoses;
            button -l "Import Pose" -c importPose;
    	setParent..;
        rowColumnLayout -nc 1;
            button -l "Save Anim FBX" -c saveAnim;
        setParent..;
    setParent..;
    showWindow;
    
    runOnStart;
} // end RigHelper ()    

/* 
--------------
RigHelper v3.2
--------------
copyright ndupree 2014
www.ndupree.com
*/